<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类：android | 移动开发技术]]></title>
  <link href="http://jason5.cn/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://jason5.cn/"/>
  <updated>2016-08-03T12:07:43+08:00</updated>
  <id>http://jason5.cn/</id>
  <author>
    <name><![CDATA[jason]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CardView在API 21以下的圆角效果处理]]></title>
    <link href="http://jason5.cn/blog/cardviewzai-api-21yi-xia-de-yuan-jiao-xiao-guo-chu-li.html"/>
    <updated>2016-07-21T19:48:15+08:00</updated>
    <id>http://jason5.cn/blog/cardviewzai-api-21yi-xia-de-yuan-jiao-xiao-guo-chu-li</id>
    <content type="html"><![CDATA[<p>CardView是Android5.0（API 21）加入的新控件，当然，在API 21以下也能用，在build.gradle的依赖里加入下边一行就可以用了</p>

<p><code>
compile 'com.android.support:cardview-v7:23.1.1'
</code></p>

<p>项目中要做一个卡片浏览的程序，卡片需要有5dp的圆角，圆角效果CardView自带属性就可以支持，加上app:cardCornerRadius属性就好了，如下：</p>

<pre><code class="xml">&lt;android.support.v7.widget.CardView
  xmlns:android="http://schemas.android.com/apk/res/android"  
  xmlns:app="http://schemas.android.com/apk/res-auto"    
  android:layout_width="match_parent"    
  android:layout_height="wrap_content"    
  app:cardUseCompatPadding="true"    
  app:cardCornerRadius="5dp"&gt;
  ...
&lt;/android.support.v7.widget.CardView&gt;
</code></pre>

<!--more-->


<p>在API 21以上（包括）的机器实现了很完美的圆角效果，效果如下：</p>

<p><img src="http://jason5.cn/images/1841176-cc3c3a00ecd691e4.png" alt="" /></p>

<p>但是在API 21以下的机器出现了问题，以下是API 19的实现效果：</p>

<p><img src="http://jason5.cn/images/1841176-edef0454295c6e12.png" alt="" /></p>

<p>初步一看，虽然加上了圆角属性，但是图片边上是方的。将左下角和左上角放大仔细看下：</p>

<p><img src="http://jason5.cn/images/1841176-c40edd84f7c1e6cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" /></p>

<p><img src="http://jason5.cn/images/1841176-d504c2a1be51063b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" /></p>

<p>可以看到，CardView本身是圆角效果了，但是里边的内容却还是方的，并且出现了多余的白边。
再仔细查看CardView的文档，发现其有一个属性cardPreventCornerOverlap</p>

<pre><code class="xml">Add padding to CardView on v20 and before to prevent intersections between the Card content and rounded corners.
在v20和之前的版本中添加内边距，这个属性是为了防止卡片内容和边角的重叠
&lt;attr name="cardPreventCornerOverlap" format="boolean" /&gt;
</code></pre>

<p>cardPreventCornerOverlap默认为true，意思是阻止API 20或者之前的CardView的corner和内部元素重叠。没有重叠就产生了上边的效果，多了一条白边。于是在xml布局文件里增加CardView的属性app:cardPreventCornerOverlap=&ldquo;false"，左下角和左上角效果如下：</p>

<p><img src="http://jason5.cn/images/1841176-2690d1d4c4535311.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" /></p>

<p><img src="http://jason5.cn/images/1841176-60dd4cef0a629cc5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" /></p>

<p>可以看到，CardView里的元素已经和CardView重叠了，但是元素本身没有圆角，所以顶点伸出去了。到这里思路就很简单了，将里边的元素单独做圆角处理。</p>

<p>drawable下新建shape_radius.xml文件，代码如下：</p>

<pre><code class="xml">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;shape xmlns:android="http://schemas.android.com/apk/res/android" android:shape="rectangle"&gt;
    &lt;corners android:radius="5dp" /&gt;
    &lt;solid android:color="@color/f2f2f2"&gt;&lt;/solid&gt;
&lt;/shape&gt;
</code></pre>

<p>在CardView里的元素LinearLayout加上backgroud属性</p>

<pre><code class="xml">&lt;LinearLayout android:layout_width="match_parent" 
    android:layout_height="match_parent"
    android:orientation="vertical" 
    android:background="@drawable/shape_radius" &gt;
    &lt;ImageView    
      android:id="@+id/iv_header"    
      android:layout_width="match_parent"    
      android:layout_height="wrap_content"    
      android:layout_gravity="center_horizontal"    
      android:adjustViewBounds="true"    
      android:scaleType="fitCenter"    
      android:src="@drawable/ic_person_default"/&gt;
&lt;/LinearLayout&gt;
</code></pre>

<p>左下角正常，左上角依然</p>

<p><img src="http://jason5.cn/images/1841176-cf5c737487884d83.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" /></p>

<p><img src="http://jason5.cn/images/1841176-a6f1a4ab15d9850c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" /></p>

<p>图片还需要单独做圆角处理，这里需要的效果是，图片的上边两个角需要圆角，下边两个角需要直角。
自定义UpRoundImageView类，继承自ImageView，专门做圆角的绘制，代码如下：</p>

<pre><code class="java">
public class UpRoundImageView extends ImageView {

    private float mRadus = 5 * SystemUtils.getDensity(CampusApplication.getCampusApplicationContext());

    /*圆角的半径，依次为左上角xy半径，右上角，右下角，左下角*/
    private float[] rids = {mRadus, mRadus, mRadus, mRadus, 0.0f,0.0f,0.0f,0.0f};

    public UpRoundImageView(Context context) {
        super(context);
    }

    public UpRoundImageView(Context context, AttributeSet attrs) {
        super(context, attrs);
    }

    public UpRoundImageView(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
    }


    /**
     * 画图
     * @param canvas
     */
    protected void onDraw(Canvas canvas) {
        Path path = new Path();
        int w = this.getWidth();
        int h = this.getHeight();
        /*向路径中添加圆角矩形。radii数组定义圆角矩形的四个圆角的x,y半径。radii长度必须为8*/
        path.addRoundRect(new RectF(0,0,w,h),rids,Path.Direction.CW);
        canvas.clipPath(path);
        super.onDraw(canvas);
    }
}
</code></pre>

<p>将ImageView替换成UpRoundImageView， 这样就实现了全部圆角效果。
另外，可以在CardView加上app:cardElevation=&ldquo;3dp"属性，这个属性加上后可以在CardView后形成一个阴影，有卡片浮上来的感觉，更符合Material Design风格。 xml中CardView的属性设置为</p>

<pre><code class="xml">&lt;android.support.v7.widget.CardView
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    app:cardUseCompatPadding="true"
    app:cardCornerRadius="5dp"
    app:cardPreventCornerOverlap="false"
    app:cardElevation="3dp"&gt;
    ...
&lt;/android.support.v7.widget.CardView&gt;
</code></pre>

<p>最后实现效果在各个平台一致：</p>

<p>api 19实现效果
<img src="http://jason5.cn/images/1841176-0c3a2248165f44f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="api 19实现效果" /></p>

<p>api 22实现效果
<img src="http://jason5.cn/images/1841176-9be814e5334aaf83.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="api 22实现效果" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[greenDAO使用入门]]></title>
    <link href="http://jason5.cn/blog/greendaoshi-yong-ru-men.html"/>
    <updated>2015-07-26T11:25:29+08:00</updated>
    <id>http://jason5.cn/blog/greendaoshi-yong-ru-men</id>
    <content type="html"><![CDATA[<p>ORM（Object Relational Mapping）可以帮我们减轻开发工作量，提高工作效率。之前做Java Web项目用过Hibernate，现在想在Android项目中用一下ORM。</p>

<p>之前上网查了一下目前主流的Android ORM，有如下几种：<br/>
* ORMLite<br/>
* SugarORM<br/>
* GreenDAO<br/>
* Active Android<br/>
* Realm</p>

<p>当这些库都没有用过的时候，如何进行技术选型呢，我用了个很简单的办法，看下Github上的star数就好了，greenDAO是其中最多的，并且初步横向比较了下，greenDAO的性能不错，下边是网上一张greeDAO和ORMLite的性能对比图</p>

<p><img src="http://i3.tietuku.com/b07d9bec3ea47b7d.png" alt="" /></p>

<p>greenDAO的使用比较简单，下边就开始介绍下如何使用greenDAO吧。</p>

<!--more-->


<h2>1. DAOGenerator工程和Android App工程</h2>

<p><img src="http://i3.tietuku.com/4e32221ef721f18c.png" alt="" /></p>

<p>上边这张图说明了greenDAO的作用，greenDAO用来帮助我们的工程生成Java Objects和访问数据库的DAO类，其中Java Objects中的属性字段和SQLite Database里的表的列属性一一对应。生成Java Objects和DAO类后，应用程序Android App可以通过使用DAO类来进行增删查改的数据库操作，操作方法全都是基于Java Objects的，不用写sql语句。</p>

<p>这里涉及了两个工程，DAOGenerator工程和Android App工程。前者用于生成Java Objects和DAO类，后者是开发者的应用工程，使用前者生成的类。</p>

<p>下边就以我做的项目来举例，两个工程的目录结构如下所示</p>

<p>|&ndash;PmdCampus<br/>
&nbsp;&nbsp;&nbsp;&nbsp;|&ndash;src  <br/>
&nbsp;&nbsp;&nbsp;&nbsp;|&ndash;src-gen        <br/>
|&ndash;PmdCampusDAOGenerator</p>

<p>PmdCampusDAOGenerator是生成DAO类的独立Java工程，PmdCampus是应用开发者的Android App工程。</p>

<p>如果是用gradle来编译的话，PmdCampusDAOGenerator工程的build.gradle文件如下
```java
apply plugin: &lsquo;java&rsquo;
apply plugin: &lsquo;application&rsquo;</p>

<p>dependencies {
    compile fileTree(dir: &lsquo;libs&rsquo;, include: [&lsquo;*.jar&rsquo;])
    compile &lsquo;de.greenrobot:greendao-generator:1.3.1&rsquo;
}
<code>``
其中</code>compile &lsquo;de.greenrobot:greendao-generator:1.3.1&rsquo;`这行是引入greenDAO的库。</p>

<p>再来看下PmdCampus工程的build.gradle，由于太多其它内容，这里只贴出关键的部分。需要引入以下库
<code>java
compile 'de.greenrobot:greendao:1.3.7'
</code></p>

<p>大家注意PmdCampus下除了常规的src目录外，还有一个手工创建的src-gen目录，这个目录就是存放PmdCampusDAOGenerator工程生成的Java Objects和DAO类的。所以，PmdCampus的build.gradle文件配置一下，编译src-gen里的java文件，需要加入以下的配置：
<code>java
sourceSets {
    main {
        java {
            srcDir 'src'
            srcDir 'src-gen'
        }
    }
}
</code></p>

<h2>2. 在DAOGenerate工程创建DAOGenerator类</h2>

<p>DAOGenerate工程是一个普通的Java工程，DAOGenerator类是用来生成DAO文件的类，有main函数入口，直接从main函数运行就可以了。DAOGenerator类的代码如下：
```java
package com.example;</p>

<p>import de.greenrobot.daogenerator.DaoGenerator;
import de.greenrobot.daogenerator.Entity;
import de.greenrobot.daogenerator.Schema;</p>

<p>public class DAOGenerator {
    public static void main(String args[]) throws Exception {
        Schema schema = new Schema(1, &ldquo;com.tencent.PmdCampus.module.message.dao&rdquo;);
        addChat(schema);
        new DaoGenerator().generateAll(schema, &ldquo;./PmdCampus/src-gen&rdquo;);
    }</p>

<pre><code>private static void addChat(Schema schema){
    Entity chat = schema.addEntity("Chat");
</code></pre>

<p>//        chat.setTableName(&ldquo;ChatAnotherTableName&rdquo;);        //可以设置sqlite中的table name，默认跟Entity的名字相同
        chat.addIdProperty().primaryKey().autoincrement();  // 消息唯一ID
        chat.addIntProperty(&ldquo;conversationId&rdquo;).notNull();   // 聊天会话ID
        chat.addIntProperty(&ldquo;type&rdquo;).notNull();              // 消息类型，1文字，2图片
        chat.addStringProperty(&ldquo;senderId&rdquo;).notNull();        // 发送人唯一标识
        chat.addStringProperty(&ldquo;receiverId&rdquo;).notNull();      // 接收人唯一标识
        chat.addStringProperty(&ldquo;content&rdquo;).notNull();        // 消息内容，1文字内容，2图片url
        chat.addLongProperty(&ldquo;send_time&rdquo;).notNull();        // 消息发送的时间
        chat.addIntProperty(&ldquo;status&rdquo;).notNull();            // 消息是否发送成功（0表示成功或已读， 1表示失败, 2表示正在发送, 3表示未读）
        chat.addLongProperty(&ldquo;seq&rdquo;).notNull();              // 服务端有序的序号
    }
}</p>

<pre><code>在main方法中
</code></pre>

<p>Schema schema = new Schema(1, &ldquo;com.tencent.PmdCampus.module.message.dao&rdquo;);
<code>
该方法第一个参数用来更新数据库版本号，第二个参数为要生成的DAO类所在包路径。
</code>java
addChat(schema);
new DaoGenerator().generateAll(schema, &ldquo;./PmdCampus/src-gen&rdquo;);
```
进行建表和设置要生成DAO文件的目标工程的项目路径。addChat方法里定义了Chat对象的属性，数据库中的字段也会一一对应。</p>

<p>之后运行main函数，就会在PmdCampus/src-gen目录下生成Java Objects和DAO类了。
<img src="http://i3.tietuku.com/d85c5423440290ca.png" alt="" /></p>

<h2>3. 在Android App工程里创建DBHelper类</h2>

<p>生成了DAO类之后，在自己的Android App工程就可以使用了，为了更加方便，这里封装了一个DBHelper类，代码如下
```java
package com.tencent.PmdCampus.module.message.storage.db;</p>

<p>import android.content.Context;
import android.util.Log;</p>

<p>import com.tencent.PmdCampus.module.message.dao.Chat;
import com.tencent.PmdCampus.module.message.dao.ChatDao;
import com.tencent.PmdCampus.module.message.dao.DaoMaster;
import com.tencent.PmdCampus.module.message.dao.DaoSession;</p>

<p>import java.util.List;</p>

<p>import de.greenrobot.dao.query.DeleteQuery;
import de.greenrobot.dao.query.QueryBuilder;</p>

<p>/<em>*
 * Created by junshao on 15/7/26.
 </em>/
public class ChatDBHelper {
    private static Context mContext;
    private static ChatDBHelper instance;</p>

<pre><code>private static ChatDao chatDao;

public static ChatDBHelper getInstance(Context context)
{
    if (instance == null)
    {
        instance = new ChatDBHelper();
        if (mContext == null)
        {
            mContext = context;
        }

        DaoMaster.OpenHelper helper = new DaoMaster.DevOpenHelper(context, "message.db", null);
        DaoMaster daoMaster = new DaoMaster(helper.getWritableDatabase());
        DaoSession daoSession = daoMaster.newSession();
        chatDao = daoSession.getChatDao();
    }
    return instance;
}

public void insertChat(Chat chat){
    chatDao.insert(chat);
}

public void delChat(long id){
    chatDao.deleteByKey(id);
}

public void delAllChat(){
    chatDao.deleteAll();
}

public List&lt;Chat&gt; queryChatList(long seq){
    QueryBuilder qb = chatDao.queryBuilder();
    qb.where(ChatDao.Properties.Seq.le(seq));
    qb.orderDesc(ChatDao.Properties.Seq);
    return qb.list();
}
</code></pre>

<p>}</p>

<pre><code>
ChatDBHelper是一个单例，主要负责初始化ChatDao对象，然后利用ChatDao就可以用操作对象的方式直接操作DB了。queryChatList里用到了QueryBuilder，QueryBuilder可以设置诸多属性，这里用到了where和orderDesc，相当于对应的sql语句。关于API更多的使用说明可以参考[greenDAO官方网站](http://greendao-orm.com/)。

##4. 在业务逻辑里使用DBHelper类
现在可以愉快方便的使用DBHelpler类了，生成一个Chat对象并插入，然后查询的代码如下:
</code></pre>

<p>ChatDBHelper chatDBHelper = ChatDBHelper.getInstance(this);
Chat chat = new Chat();
chat.setConversationId(0);
chat.setType(0);
chat.setSenderId(&ldquo;111&rdquo;);
chat.setReceiverId(&ldquo;111&rdquo;);
chat.setContent(&ldquo;content&rdquo;);
chat.setStatus(1);
chat.setSeq(111);
chatDBHelper.insertChat(chat);
List<Chat> chatList = chatDBHelper.queryChatList(111);
```</p>

<p>这篇文章只是简单的介绍了greenDAO的入门用法，更多高级内容请参考官方网站。</p>

<hr />

<p>参考资料：<br/>
*  <a href="http://greendao-orm.com/">greenDAO – Android ORM for SQLite</a> <br/>
*  <a href="http://glblong.blog.51cto.com/3058613/1354953">Android开源：数据库ORM框架GreenDao学习心得及使用总结</a></p>
]]></content>
  </entry>
  
</feed>
