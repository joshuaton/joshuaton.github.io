<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类：ios | 移动开发技术]]></title>
  <link href="http://jason5.cn/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://jason5.cn/"/>
  <updated>2018-10-23T16:29:58+08:00</updated>
  <id>http://jason5.cn/</id>
  <author>
    <name><![CDATA[jason]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[TIP项目网络框架梳理]]></title>
    <link href="http://jason5.cn/blog/tipxiang-mu-wang-luo-kuang-jia-shu-li.html"/>
    <updated>2018-10-23T16:07:12+08:00</updated>
    <id>http://jason5.cn/blog/tipxiang-mu-wang-luo-kuang-jia-shu-li</id>
    <content type="html"><![CDATA[<p>前段时间小伙伴重构了项目的网络层代码，将之前的过程式的代码，面向对象化了，职责分离，更易维护。不过也增加了理解成本，这里记录一下。</p>

<p>整个网络模块的类图如下。PMD开头的类下沉到了基础库，IG开头的类仍然在项目中。</p>

<p><img src="https://jason5.cn/images/tip-network-uml.jpg" alt="" /></p>

<ul>
<li>IGNetworkManager作为项目中使用网络层的入口类，不多做介绍。</li>
<li>PMDNetworking是发起网络请求的类，这里首先要用PMDCallFactory工厂类，生成一个实现PMDCall协议的对象，然后调用makeCallWithRequest方法进行网络请求。</li>
<li>PMDCallFactory用于生成PMDCall协议对象</li>
<li>PMDCall协议对象为了避免被回收，放到了PMDCallPool里进行管理</li>
<li>PMDBaseCall实现了PMDCall协议，完成了主要的网络请求逻辑。分为以下几个步骤</li>
</ul>


<p>（1）callWithRequest准备发起网络请求</p>

<p>（2）dealWithInterceptResult遍历所有PMDIntercept，在真正发起网络请求前进行逻辑处理，处理的过程中可以中断。</p>

<p>（3）realCallWithRequest真正发起网络请求，这里的实现交给继承类IGCall来实现，具体的实现可以是http，也可以是tcp，在TIP项目中用到了IGNetworkObject去发网路请求。</p>

<p>（4）convertResponse将请求回来的数据，遍历PMDConverter进行处理。</p>

<ul>
<li>PMDInterceptor和PMDConverter协议分别是需要在网络请求发出之前和之后要处理的逻辑，只要实现此协议，加入到PMDBaseCall中就可以了。</li>
</ul>


<p>基本的结构就是这样了，除此之外，框架还实现了取消发送，重新发送等逻辑，这里不再详细介绍。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[对iOS App签名的理解]]></title>
    <link href="http://jason5.cn/blog/dui-ios-appqian-ming-de-li-jie.html"/>
    <updated>2018-10-22T11:23:43+08:00</updated>
    <id>http://jason5.cn/blog/dui-ios-appqian-ming-de-li-jie</id>
    <content type="html"><![CDATA[<p>关于iOS设备签名的原理，这篇文章说的比较清楚了。如果忘了的话可以重新阅读以下。</p>

<p><a href="http://blog.cnbang.net/tech/3386/">iOS App 签名的原理</a></p>

<p>这里按照我的理解角度复述一下：</p>

<ol>
<li>为了不让每次开发App，都将App上传到苹果后台，用苹果后台的私钥A签名，需要本地生成一对公私钥。这样每次签名就在本地Mac机器上，用私钥L签名就可以了。</li>
<li>那么苹果如果验证公钥L的合法性呢，就需要开发者将公钥L上传到苹果的后台，苹果用私钥A进行一次签名，签名+公钥L就是证书了。（这里实际上用一次对公钥L的签名替代了每次对App的签名，省去了App每次修改都上传签名的麻烦，很巧妙）</li>
<li>第2步中的证书+一些额外信息（AppId，设备列表，push权限等）全部都在苹果的后台用私钥A签名，打包成的东西叫Provisioning Profile，下载到本地Mac后，打包在App中。安装在iOS设备的时候，用公钥A对其进行解密，验证证书+一些额外信息（AppId，设备列表，push权限等。证书验证后拿到公钥L，对App数据进行解密验证（App是用私钥L签名的）。</li>
</ol>


<p>好了，上边的文字其实看着还是有点乱和绕，权当我自己的思路做参考吧。</p>

<p>回到我们的项目，其实有一点是可以改进的。</p>

<p><img src="https://jason5.cn/images/WX20181022-114418@2x.png" alt="" /></p>

<p>以上图片是我们项目在苹果后台的证书配置，可以看到，有很多项，原因是每个开发的电脑上都生成了一对公钥L和私钥L，然后将公钥L上传到苹果后台生成了证书。更好的办法是，只用一台开发电脑生成公钥L和私钥L，然后到处p12文件，分享给别的电脑，这样苹果后台就只需要一个证书就可以了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS开发中支持实时UI调试的方法]]></title>
    <link href="http://jason5.cn/blog/ioskai-fa-zhong-zhi-chi-shi-shi-uidiao-shi-de-fang-fa.html"/>
    <updated>2018-10-18T14:02:46+08:00</updated>
    <id>http://jason5.cn/blog/ioskai-fa-zhong-zhi-chi-shi-shi-uidiao-shi-de-fang-fa</id>
    <content type="html"><![CDATA[<h3>背景</h3>

<p>平时在开发iOS界面的过程中，如果修改了布局代码，需要重新启动模拟器，进行效果查看。如果工程较大，启动将耗时比较长，比较浪费时间。这里介绍一个工具InjectionIII，使用后可以不重启应用，保存文件后直接查看修改效果，极大提升界面开发工作的效率。</p>

<h3>使用方法</h3>

<p>1.在App Store下载InjectionIII</p>

<p>2.在应用启动函数 加入以下代码</p>

<pre><code class="objective-c">#if DEBUG
    NSBundle *bundle = [NSBundle bundleWithPath:@"/Applications/InjectionIII.app/Contents/Resources/iOSInjection10.bundle"];
    [bundle load];
#endif
</code></pre>

<p>3.启动InjectionIII，重启XCode，然后用模拟器启动应用。状态栏上有InjectionIII的小图标，确认File Watcher选项已经勾选。这时候修改文件，只要保存，在模拟器界面上会立即更新效果</p>

<p>PS: 这个工具的缺点是只支持模拟器，原因参见原理部分。</p>

<h3>原理</h3>

<p><a href="https://mp.weixin.qq.com/s?__biz=MjM5NTQ2NzE0NQ==&amp;mid=2247483999&amp;idx=1&amp;sn=bc88d37b6f819bd6bd7d8b76e9787620&amp;chksm=a6f958b9918ed1af9a084ce2c2732aaee715193e37fdb830dc31d8f0174c0314b22dc5c0dd1e&amp;mpshare=1&amp;scene=1&amp;srcid=0612tT8PS1pePiL5EmqMr9HH#rd">Injection：iOS热重载背后的黑魔法</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何查看p12文件的信息]]></title>
    <link href="http://jason5.cn/blog/ru-he-cha-kan-p12wen-jian-de-xin-xi.html"/>
    <updated>2017-12-16T14:37:21+08:00</updated>
    <id>http://jason5.cn/blog/ru-he-cha-kan-p12wen-jian-de-xin-xi</id>
    <content type="html"><![CDATA[<pre><code>openssl pkcs12 -in xxx.p12 -out xxx.pem -nodes
</code></pre>

<p>pem文件可以直接用文本工具打开</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[转]到底什么时候才需要在ObjC的Block中使用weakSelf/strongSelf]]></title>
    <link href="http://jason5.cn/blog/zhuan-dao-di-shi-yao-shi-hou-cai-xu-yao-zai-objcde-blockzhong-shi-yong-weakself-slash-strongself.html"/>
    <updated>2017-06-16T15:01:32+08:00</updated>
    <id>http://jason5.cn/blog/zhuan-dao-di-shi-yao-shi-hou-cai-xu-yao-zai-objcde-blockzhong-shi-yong-weakself-slash-strongself</id>
    <content type="html"><![CDATA[<p>Objective C 的 Block 是一个很实用的语法，特别是与GCD结合使用，可以很方便地实现并发、异步任务。但是，如果使用不当，Block 也会引起一些循环引用问题(retain cycle)—— Block 会 retain ‘self’，而 ‘self‘ 又 retain 了 Block。因为在 ObjC 中，直接调用一个实例变量，会被编译器处理成 ‘self->theVar’，’self’ 是一个 strong 类型的变量，引用计数会加 1，于是，self retains queue， queue retains block，block retains self。</p>

<!--more-->


<h2>解决 retain circle</h2>

<p>Apple 官方的建议是，传进 Block 之前，把 ‘self’ 转换成 weak automatic 的变量，这样在 Block 中就不会出现对 self 的强引用。如果在 Block 执行完成之前，self 被释放了，weakSelf 也会变为 nil。</p>

<p>示例代码：</p>

<pre><code>__weak __typeof__(self) weakSelf = self;
dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
    [weakSelf doSomething];
});
</code></pre>

<p>clang 的文档表示，在 doSomething 内，weakSelf 不会被释放。但，下面的情况除外：</p>

<pre><code>__weak __typeof__(self) weakSelf = self;
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
    [weakSelf doSomething];
    [weakSelf doOtherThing];
});
</code></pre>

<p>在 doSomething 中，weakSelf 不会变成 nil，不过在 doSomething 执行完成，调用第二个方法 doOtherThing 的时候，weakSelf 有可能被释放，于是，strongSelf 就派上用场了：</p>

<pre><code>__weak __typeof__(self) weakSelf = self;
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
    __strong __typeof(self) strongSelf = weakSelf;
    [strongSelf doSomething];
    [strongSelf doOtherThing];
});
</code></pre>

<p>__strong 确保在 Block 内，strongSelf 不会被释放。</p>

<h2>总结</h2>

<ul>
<li>在 Block 内如果需要访问 self 的方法、变量，建议使用 weakSelf。</li>
<li>如果在 Block 内需要多次 访问 self，则需要使用 strongSelf。</li>
</ul>


<h2>参考</h2>

<ul>
<li><a href="https://dhoerl.wordpress.com/2013/04/23/i-finally-figured-out-weakself-and-strongself">I finally figured out weakSelf and strongSelf</a></li>
<li><a href="https://stackoverflow.com/questions/21113963/is-the-weakself-strongself-dance-really-necessary-when-referencing-self-inside-a?rq=1">Is the weakSelf/strongSelf dance really necessary when referencing self inside a non-retained completion called from a UIViewController?</a></li>
</ul>


<blockquote><p> 原文链接： <a href="http://blog.lessfun.com/blog/2014/11/22/when-should-use-weakself-and-strongself-in-objc-block/">http://blog.lessfun.com/blog/2014/11/22/when-should-use-weakself-and-strongself-in-objc-block/</a></p></blockquote>
]]></content>
  </entry>
  
</feed>
