<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类：weex | 移动开发技术]]></title>
  <link href="http://jason5.cn/blog/categories/weex/atom.xml" rel="self"/>
  <link href="http://jason5.cn/"/>
  <updated>2024-09-13T12:13:56+08:00</updated>
  <id>http://jason5.cn/</id>
  <author>
    <name><![CDATA[jason]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[用Weex实现三端开发架构和思路]]></title>
    <link href="http://jason5.cn/blog/yong-weexshi-xian-san-duan-kai-fa-jia-gou-he-si-lu.html"/>
    <updated>2018-08-25T21:59:32+08:00</updated>
    <id>http://jason5.cn/blog/yong-weexshi-xian-san-duan-kai-fa-jia-gou-he-si-lu</id>
    <content type="html"><![CDATA[<p>基于目前项目的已有架构，若要实现Weex三端开发，设计的架构如下图：</p>

<p><a href="http://jason5.cn/images/weex-http-proxy.png"><img src="http://jason5.cn/images/weex-http-proxy.png" alt="" /></a></p>

<!--more-->


<p>1.iOS和Android客户端维持tcp+pb方式不变</p>

<p>2.新增http proxy模块，提供http接口给Weex h5访问</p>

<p>职责是将已有的tcp+pb方式访问的服务转换成http+json形式，提供给Weex h5调用。目前http proxy用java实现，与Android客户端网络层复用代码。</p>

<p>3.改造svr接入层，验证Weex h5登录态，进行openid转换</p>

<p>以微信登录为例，之前iOS和Android用的是App授权登录，由于Weex h5是微信公众号授权登录，两者appid不同，授权得到的openid和accesstoken都不一样，需要支持对公众号进行登录校验。校验完登录态后，将公众号openid转换为App openid，再与svr逻辑层进行通信。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Weex与原生页面间的相互跳转]]></title>
    <link href="http://jason5.cn/blog/weexyu-yuan-sheng-ye-mian-jian-de-xiang-hu-tiao-zhuan.html"/>
    <updated>2018-04-09T15:33:36+08:00</updated>
    <id>http://jason5.cn/blog/weexyu-yuan-sheng-ye-mian-jian-de-xiang-hu-tiao-zhuan</id>
    <content type="html"><![CDATA[<p>我们在现有应用中集成Weex，难免会遇到Weex页面与原生页面相互跳转的问题。通常的一种场景是，某一个中间的原生页面我们用Weex来替换，这样就存在原生页面跳转到Weex页面，再由Weex页面跳转到原生页面的场景。这篇文章讲述如何实现这种场景。</p>

<!--more-->


<h3>1. 原生页面跳转到Weex页面</h3>

<p>这个其实很简单。首先需要知道的是，Weex页面其实也是一个原生页面，只是这个原生页面的View是由Weex渲染出来的而已。所以这一步实际上是原生页面跳原生页面，用navigationController的push方法就可以了。代码如下</p>

<pre><code class="objc">IGWeexDemoViewController *vc = [IGWeexDemoViewController alloc] init];
[[CPBaseViewController currentViewController].navigationController pushViewController:vc animated:YES];
</code></pre>

<h3>2. Weex页面跳转到原生页面</h3>

<p>Weex要跳回原生页面，是需要借用原生代码的能力的。实现方式就是自定义Module，Weex将需要跳转的页面和参数传递个Module，然后Module利用原生代码，控制navigationController进行跳转。</p>

<p>首先自定义跳转的Module，代码如下：</p>

<pre><code class="objc">@implementation WXNavigationModule

WX_EXPORT_METHOD(@selector(navigationToUrl:))

-(void)navigationToUrl:(NSString *)url{
    [IGJumpMediator jumpActionWithUrl:url];
    [[CPBaseViewController currentViewController].navigationController setNavigationBarHidden:NO animated:YES];

}

@end
</code></pre>

<p>关键在方法中的第一行代码 [IGJumpMediator jumpActionWithUrl:url]，通过拿到Weex里传递进来的参数url，进行解析，然后利用Runtime机制，通过字符串得到要跳转的ViewController类，然后再设置需要的初始化参数，最后push就可以了。方法具体的代码实现这里不再赘述。</p>

<p>第二行代码是设置了导航栏为显示，下边的篇幅讲下为什么要这样设置。</p>

<h3>3. Weex页面中的自定义导航栏实现</h3>

<p>Weex页面我没有用原生的导航栏，而是参考了一些资料和代码自己实现了导航栏，主要的原则是，一切可以在Weex中实现的，都放在Weex中，不放在原生代码中，这样可以更好的进行跨平台代码复用。</p>

<p>原生跳转到Weex的时候，先隐藏原生里的导航栏。Weex调回原生的时候，在显示原生导航栏。所以有了上边那一行代码。</p>

<p>在Weex中实现导航栏，最好封装成一个组件，这样方便所有页面一起复用。以下是导航栏NavigationBar.vue的代码。</p>

<p>模板部分</p>

<pre><code class="html">&lt;template&gt;
    &lt;div&gt;
        &lt;!--iPhoneX --&gt;
        &lt;div class="iPhoneXDiv navbar" v-if="isiPhoneX"&gt;&lt;/div&gt;
        &lt;!--其他iOS设备 --&gt;
        &lt;div class="iOSDiv navbar" v-else-if="isiOS"&gt;&lt;/div&gt;
        &lt;!--安卓设备 --&gt;
        &lt;div class="android navbar" v-else-if="isAndroid"&gt;&lt;/div&gt;

        &lt;div class="subviews"&gt;
            &lt;!--Title--&gt;
            &lt;text class="titletext"&gt;&lt;/text&gt;
            &lt;!--左边图片--&gt;
            &lt;div class="left" @click="leftButtonClicked" v-if="showLeft"&gt;
                &lt;image src="local:///team_navi_back@2x.png" class="left-button"&gt;&lt;/image&gt;
            &lt;/div&gt;

            &lt;div class="right" @click="rightButtonClicked" v-if="showRight"&gt;
                &lt;!--如果显示右边item ， 图片或者文字 2选1 --&gt;
                &lt;text class="right-text" v-if="rightText"&gt;&lt;/text&gt;
                &lt;image :src="rightImage" class="left-button" v-if="rightImage"&gt;&lt;/image&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/template&gt;
</code></pre>

<p>样式部分</p>

<pre><code class="css">&lt;style scoped&gt;
    .iPhoneXDiv {
        height: 86px;
    }

    .iOSDiv {
        height: 38px;
    }

    .android {
        height: 0px;
    }

    .navbar {
        width: 750px;
        top: 0px;
        left: 0px;
        background-color: #1A1B2F;
    }

    /*大佈局样式*/
    .subviews {
        height: 90px;
        width: 750px;
        left: 0px;
        background-color: #1A1B2F;
    }

    /*中间文字样式*/
    .titletext {
        font-size: 36px;
        color: white;
        position: relative;
        width: 750px;
        height: 90px;
        text-align: center;
        line-height: 90px;
        bottom: 0;
    }

    /*左边图片*/
    .left {
        justify-content: center;
        position: absolute;
        align-items: center;
        flex: 1;
        height: 90px;
        left: 30px;
        bottom: 0px;
        width: 50px;
    }

    /*图片按钮*/
    .left-button {
        width: 50px;
        height: 50px;
        /*margin-left: 40px;*/
    }

    /*右边图片*/
    .right {
        justify-content: center;
        position: absolute;
        align-items: center;
        flex: 1;
        height: 90px;
        right: 20px;
        bottom: 0px;
        width: 50px;
        /*background-color: white;*/
    }

    /*右边文字*/
    .right-text {
        font-size: 30px;
        color: white;
        position: absolute;
        right: 20px;
        width: 100px;
        height:90px;
        text-align: center;
        bottom: 0;
    }
&lt;/style&gt;
</code></pre>

<p>js代码部分</p>

<pre><code class="javascript">var device = weex.config.env;
const Navigator = weex.requireModule('navigator');

export default {
    /*props 属性列表*/
    props: {
        /*返回图片*/
        leftImage: {
            type: String,
            default: "img/other/backbtn.png"
        },
        /*Title*/

        titleText: {
            type: String,
            default: "Title"
        },
        /*是否显示左边图片*/
        showLeft: {
            type: Boolean,
            default: true
        },
        /*showLeft=true时,左边是否是点击返回事件，否，则显示其他图片，重新给leftImage属性赋值*/
        isBack: {
            type: Boolean,
            default: true
        },
        /*是否显示右边item*/
        showRight: {
            type: Boolean,
            default: false
        },
        /*右边文字*/
        rightText: {
            type: String,
            default: ""
        },

        /*右边图片*/
        rightImage: {
            type: String,
            default: ""
        }
    },
    data() {
        return {
            isiPhoneX: (device.platform === 'iOS') &amp;&amp; (device.deviceWidth === 1125) &amp;&amp; (device.deviceHeight === 2436),
            isiOS: (device.platform === 'iOS'),
            isAndroid: (device.platform === 'android'),
            TitleText: "",
        }
    },
    methods: {
        //左边点击事件
        leftButtonClicked() {
            if (this.showLeft) {
                if (this.isBack)  //点击pop返回
                {
                    console.log('click back');
                    Navigator.pop({}, e =&gt; {
                    });
                }
                else //其他操作
                {
                    console.log('LeftItemClicked');
                    this.$emit('LeftItemClicked');
                }
            }
        },
        //右边点击事件
        rightButtonClicked() {
            if (this.showRight) {

                console.log('RightItemClicked');
                this.$emit('RightItemClicked');
            }
        },
    }
};
</code></pre>

<p>导航栏支持设置标题，左边和右边部分的显隐，左图片，右图片和右文字。对不同的平台做了下适配。</p>

<p>调用的时候比较简单，在页面头部加上如下代码就可以了</p>

<pre><code class="javascript">&lt;NavBar
    :show-left="true"
    :title-text="titleText"
    :show-right="false"&gt;
&lt;/NavBar&gt;
</code></pre>

<h3>4.效果</h3>

<p>最后看一下效果，看得出来哪部分是原生实现，哪部分是Weex实现吗
<a href="http://jason5.cn/images/weex-navi-demo.gif"><img src="http://jason5.cn/images/weex-navi-demo.gif" alt="" /></a></p>

<hr />

<p>参考资料</p>

<ul>
<li><a href="https://www.jianshu.com/p/e9bbd8a2244a">Weex系列（1）-App端自定义导航条</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用Weex DevTool调试Native应用-iOS篇]]></title>
    <link href="http://jason5.cn/blog/li-yong-weex-devtooldiao-shi-nativeying-yong-iospian.html"/>
    <updated>2018-04-03T17:48:04+08:00</updated>
    <id>http://jason5.cn/blog/li-yong-weex-devtooldiao-shi-nativeying-yong-iospian</id>
    <content type="html"><![CDATA[<p>官方的文档里说提供了一个工具DevTool，用来调试原生应用，但是写得比较简略，一直跑不起来，经过几天折腾和查资料，基本上是可以调试了，记录一下步骤和问题。</p>

<!--more-->


<h3>1. 先在本机安装iOS的调试工具</h3>

<p>工具地址是 <a href="https://github.com/weexteam/weex-devtool-iOS">https://github.com/weexteam/weex-devtool-iOS</a></p>

<pre><code class="javascript">npm install -g weex-devtool
</code></pre>

<p>运行调试工具weex-devtool，启动成功后，在终端命令行里会显示如下两行信息。</p>

<p><a href="http://jason5.cn/images/QQ20180403-181423.png"><img src="http://jason5.cn/images/QQ20180403-181423.png" alt="" /></a></p>

<p>Websocket Address For Native是调试工具暴露的一个websocket地址，用于和Native之间的双向通信，之后Native中的代码会用到。
Debug Server是调试工具提供的一个web服务地址，开发者通过这个网页可以像调试web页面一样，来调试Native应用。</p>

<h3>2. 将WXDevTool集成到项目工程中</h3>

<p>增加podfile文件，只在Debug模式下集成WXDevtool</p>

<pre><code class="javascript">pod 'WXDevtool',   '0.15.3', :configurations =&gt; ['Debug']
</code></pre>

<p>这里遇到两个问题</p>

<p>（1）集成后编不过，根据提示发现这个库和项目里用到的FLEX有冲突，所以暂时去掉了FLEX。希望后续升级版本能解决这两个库之间的冲突。</p>

<p>（2）发现还编不过，是需要再集成一个依赖库SocketRocket</p>

<pre><code>pod 'SocketRocket', '0.4.2'
</code></pre>

<h3>3. 在App启动的时候加入如下代码</h3>

<pre><code class="objc">[WXDevTool setDebug:YES];
[WXDevTool launchDevToolDebugWithUrl:@"ws://10.32.194.33:8088/debugProxy/native"];
</code></pre>

<p>这里launchDevToolDebugWithUrl函数需要传一个参数，就是在第一步中的websocket地址。</p>

<h3>4. 开始调试</h3>

<p>如果之前一切顺利的话，现在就可以调试了。网页打开调试地址<a href="http://10.32.194.33:8088">http://10.32.194.33:8088</a>  <br/>
启动Native App，然后会看到我们的App信息出现在网页中。</p>

<p><a href="http://jason5.cn/images/QQ20180403-182830.png"><img src="http://jason5.cn/images/QQ20180403-182830.png" alt="" /></a></p>

<p>可以看到下边两个黑色的大按钮，是调试工具提供的两个功能，Debugger和Inspector。
Debugger用来调试js代码。在里边可以给代码设置断点，观察变量值，查看console.log的输出，跟Web开发一样的体验。</p>

<p><a href="http://jason5.cn/images/QQ20180403-193719.png"><img src="http://jason5.cn/images/QQ20180403-193719.png" alt="" /></a></p>

<p>Inspector用来调试UI界面。这里可以看到界面的树形结构，可以直接修改位置等属性，可以实时看到效果。这里如果在终端操作页面，浏览器里的页面也是会实时刷新的。</p>

<p><a href="http://jason5.cn/images/QQ20180403-193917.png"><img src="http://jason5.cn/images/QQ20180403-193917.png" alt="" /></a></p>

<p>这里遇到了一个问题，启动App后，必须首先进入Debugger页面打开调试工具，Native里的weex页面才能被正常渲染和执行，暂时还没搞清楚原因。</p>

<h3>5.总结</h3>

<p>调试工具可以让开发Native的时候，像Web开发一样去调试，一定程度上提高了效率，对熟悉Web开发的同学来讲，应该能很快上手。</p>

<p>PS：下一篇文章会讲一下原生页面和weex页面之间的跳转以及在weex中如何自定义导航栏。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Weex中js和Native的交互-iOS篇]]></title>
    <link href="http://jason5.cn/blog/weexzhong-jshe-nativede-jiao-hu-iospian.html"/>
    <updated>2018-03-27T11:21:56+08:00</updated>
    <id>http://jason5.cn/blog/weexzhong-jshe-nativede-jiao-hu-iospian</id>
    <content type="html"><![CDATA[<p>终端集成Weex后，看了下js调用Native的方法，做了个展示列表的demo，做下记录。</p>

<p><img src="http://jason5.cn/images/QQ20180327-105246.png" alt="" /></p>

<!--more-->


<h2>Native端</h2>

<p>要实现Weex调用Native，需要实现自定义的module，暴露相应的方法，并且注册。完成这个过程后，js里可以直接注册过的module中的方法，并且通过callback拿到返回结果。下边以weex调用native的网络模块获取数据并进行展示的例子，进行介绍。</p>

<h3>1. 实现WXModuleProtocol协议</h3>

<p>自定义module，需要实现WXModuleProtocol协议</p>

<p>WXCustomNetworkModule.h</p>

<pre><code class="objc">@interface WXCustomNetworkModule : NSObject&lt;WXModuleProtocol&gt;
@end
</code></pre>

<h3>2. 实现网络请求数据的方法，并且暴露给js</h3>

<p>WXCustomNetworkModule.m</p>

<pre><code class="objc">@interface WXCustomNetworkModule()

@property (nonatomic, strong) NSMutableArray *merchants;
@property (nonatomic, copy) NSString *pageIndex;

@end

@implementation WXCustomNetworkModule

WX_EXPORT_METHOD(@selector(getMerchantList:))

-(void)getMerchantList:(WXModuleCallback)callback{

    TipCredit_QueryMerchantCreditListReq *req = [[TipCredit_QueryMerchantCreditListReq alloc] init];
    req.userLng = [CPLocationAPI getLongitude];
    req.userLat = [CPLocationAPI getLatitude];
    req.pageidx = self.pageIndex;
    req.num = 10;

    @weakify(self);
    [TipNetWorkManager requestWithReq:req withRspClass:[TipCredit_QueryMerchantCreditListRsp class] withCmd:90086 successBlock:^(id respondObjc) {
        @strongify(self);
        TipCredit_QueryMerchantCreditListRsp *rsp = (TipCredit_QueryMerchantCreditListRsp *)respondObjc;
        self.pageIndex = rsp.pageidx;
        [self.merchants addObjectsFromArray:rsp.merchantcreditsArray];

        for(int i=0; i&lt;self.merchants.count; i++){
            self.merchants[i] = [self.merchants[i] toJson];
        }
        callback(self.merchants);

    } failedBlock:^(id failedMsg, int resultCode) {
        @strongify(self);
    }];
}
</code></pre>

<p>getMerchantList是发送网络请求获取后台数据的方法。</p>

<pre><code class="objc">WX_EXPORT_METHOD(@selector(getMerchantList:))
</code></pre>

<p>这行代码可以将此函数暴露给js调用。</p>

<h3>3. 初始化的时候注册自定义module，并且指定module name</h3>

<pre><code class="objc">[WXSDKEngine registerModule:@"network" withClass:[WXCustomNetworkModule class]];
</code></pre>

<p>module name命名为network，表示网络模块。</p>

<h3>4. js拿到回调数据</h3>

<p>实现的方法，在最后可以加一个WXModuleCallback类型的callback参数</p>

<pre><code class="objc">callback(self.merchants);
</code></pre>

<p>通过这行代码将结果回调给js。回调的参数类型支持NSString, NSArray, NSDictionary。所以这里回调之前，将网络返回的自定义类转换成了NSDictionary，再进行回调。</p>

<h2>js端</h2>

<p>```javascript
<template>
  <list class="list">
    <cell class="cell" v-for="merchant in lists">
      <div class="panel">
        <text class="text"></text>
      </div>
    </cell>
  </list>
</template></p>

<script>
export default {
  name: 'App',
  components: {
    HelloWorld
  },
  data () {
    return {
      logo : 'https://gw.alicdn.com/tfs/TB1yopEdgoQMeJjy1XaXXcSsFXa-640-302.png',
      lists : []
    }
  },
  methods: {
  
  },
  created: function () {
    var self = this
    weex.requireModule('network').getMerchantList(function(rsp){
      self.lists = rsp
    })
  }
}
</script>


<pre><code>index.vue的关键代码如上。created方法在页面创建时候会执行。通过
</code></pre>

<p>weex.requireModule(&lsquo;network&rsquo;).getMerchantList
```
这行代码，调用原生网络模块，并且拿到回调数据进行展示。</p>

<h2>总结</h2>

<p>本文介绍了Weex中js与Native的交互方式。通过此方法，界面部分完全可以在js里实现，iOS和Android双端只写一份，原生部分只需要提供负责网络请求的module就可以了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[集成Weex到现有应用-iOS篇]]></title>
    <link href="http://jason5.cn/blog/ji-cheng-weexdao-xian-you-ying-yong-iospian.html"/>
    <updated>2018-03-26T11:48:50+08:00</updated>
    <id>http://jason5.cn/blog/ji-cheng-weexdao-xian-you-ying-yong-iospian</id>
    <content type="html"><![CDATA[<p>最近看了一下weex，将weex集成到了现有的iOS APP里，并且实现了一个静态页面的展示，做下记录。</p>

<!--more-->


<h2>一. 现有iOS应用的修改</h2>

<h3>1. 用cocopods引入WeexSDK</h3>

<pre><code class="bash">pod 'WeexSDK', '0.18.0'
</code></pre>

<h3>2. 在iOS APP里初始化Weex</h3>

<p>didFinishLaunchingWithOptions里添加代码</p>

<pre><code class="objc">//business configuration
[WXAppConfiguration setAppGroup:@"TencentApp"];
[WXAppConfiguration setAppName:@"TIP"];
[WXAppConfiguration setAppVersion:@"1.0.0"];

//init sdk environment
[WXSDKEngine initSDKEnvironment];

//register custom module and component，optional
//这里暂时用不到，之后再说
//[WXSDKEngine registerComponent:@"MyView" withClass:[MyViewComponent class]];
//[WXSDKEngine registerModule:@"event" withClass:[WXEventModule class]];

//register the implementation of protocol, optional
//如果在weex页面里需要下载网络图片，需要自己实现协议，如果没有，可以注释掉
[WXSDKEngine registerHandler:[WXImgLoaderDefaultImpl new] withProtocol:@protocol(WXImgLoaderProtocol)];
//set the log level
[WXLog setLogLevel: WXLogLevelAll];
</code></pre>

<h3>3. 在业务相关页面用weex渲染原生View</h3>

<pre><code class="objc">@interface IGWeexDemoViewController()

@property (nonatomic, strong) WXSDKInstance *instance;
@property (nonatomic, strong) UIView *weexView;
@property (nonatomic, strong) NSString *url;
@end

@implementation IGWeexDemoViewController

-(void)viewDidLoad{
    [super viewDidLoad];

//    self.url = @"http://10.66.212.209:8081/dist/index.js";
    self.url = @"http://weex-1251917893.cosgz.myqcloud.com/index.js";

    _instance = [[WXSDKInstance alloc] init];
    _instance.viewController = self;
    _instance.frame = self.view.frame;

    __weak typeof(self) weakSelf = self;
    _instance.onCreate = ^(UIView *view) {
        [weakSelf.weexView removeFromSuperview];
        weakSelf.weexView = view;
        [weakSelf.view addSubview:weakSelf.weexView];
    };

    _instance.onFailed = ^(NSError *error) {
        //process failure
    };

    _instance.renderFinish = ^ (UIView *view) {
        //process renderFinish
    };
    [_instance renderWithURL:[NSURL URLWithString:self.url]];
}

- (void)dealloc{
    [_instance destroyInstance];
}
</code></pre>

<h3>4. 运行效果</h3>

<p><img src="http://jason5.cn/images/QQ20180326-114148.png" alt="" /></p>

<h2>二. 生成js文件</h2>

<p>在第一张的第3节中，原生View通过加载一个js文件，然后用Weex SDK进行渲染。这一章介绍js文件的生成方法。</p>

<h3>1. 安装node</h3>

<pre><code class="bash">brew install node
</code></pre>

<h3>2. 安装weex-toolkit</h3>

<pre><code class="bash">npm install -g weex-toolkit
</code></pre>

<h3>3. 初始化weex工程</h3>

<pre><code class="bash">weex create awesome-project
</code></pre>

<p>然后在项目根目录运行
<code>bash
npm install
</code>
安装项目依赖</p>

<h3>4. 生成原生用到的js文件</h3>

<pre><code class="bash">npm run serve
</code></pre>

<p>运行这个命令，会在本地启动一个http server，原生终端用到的js文件就可以通过url访问了。生成的js在dist目录下，找到之后就可以拼出js的url了，例如
<a href="http://10.66.212.209:8081/dist/index.js%E3%80%82">http://10.66.212.209:8081/dist/index.js%E3%80%82</a></p>

<h2>三. 如何显示网络图片</h2>

<p>运行demo后，会发现网络图片不能展示。原来weex初始并没有集成网络图片下载功能，需要自己去实现。方法如下</p>

<h3>1.自定义图片下载协议WXImgLoaderProtocol</h3>

<pre><code class="objc">@protocol WXImgLoaderProtocol &lt;WXModuleProtocol&gt;
-(id&lt;WXImageOperationProtocol&gt;)downloadImageWithURL:(NSString *)url imageFrame:(CGRect)imageFrame userInfo:(NSDictionary *)options completed:(void(^)(UIImage *image,  NSError *error, BOOL finished))completedBlock;
@end
</code></pre>

<h3>2.协议的实现类WXImgLoaderDefaultImpl</h3>

<pre><code class="objc">//WXImgLoaderDefaultImpl.h文件
@interface WXImgLoaderDefaultImpl : NSObject
@end

//WXImgLoaderDefaultImpl.m文件
@implementation WXImgLoaderDefaultImpl
#pragma mark WXImgLoaderProtocol

- (id&lt;WXImageOperationProtocol&gt;)downloadImageWithURL:(NSString *)url imageFrame:(CGRect)imageFrame userInfo:(NSDictionary *)userInfo completed:(void(^)(UIImage *image,  NSError *error, BOOL finished))completedBlock
{
    if ([url hasPrefix:@"//"]) {
        url = [@"http:" stringByAppendingString:url];
    }
    return (id&lt;WXImageOperationProtocol&gt;)[[SDWebImageManager sharedManager] downloadImageWithURL:[NSURL URLWithString:url] options:0 progress:^(NSInteger receivedSize, NSInteger expectedSize) {
    } completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, BOOL finished, NSURL *imageURL) {
        if (completedBlock) {
            completedBlock(image, error, finished);
        }
    }];
}
@end
</code></pre>

<h3>3.在weex初始化的时候注册协议</h3>

<pre><code class="objc">[WXSDKEngine registerHandler:[WXImgLoaderDefaultImpl new] withProtocol:@protocol(WXImgLoaderProtocol)];
</code></pre>

<h2>四. todo</h2>

<p>后续还有一些问题要研究</p>

<ol>
<li>weex页面里，如何调用native的网络模块获取到数据</li>
<li>多页面的跳转</li>
<li>调试工具weex devtool的使用方法</li>
<li>如何构建发布流程</li>
</ol>

]]></content>
  </entry>
  
</feed>
