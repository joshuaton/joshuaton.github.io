<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类：weex | 移动开发技术]]></title>
  <link href="http://jason5.cn/blog/categories/weex/atom.xml" rel="self"/>
  <link href="http://jason5.cn/"/>
  <updated>2019-11-15T14:26:31+08:00</updated>
  <id>http://jason5.cn/</id>
  <author>
    <name><![CDATA[jason]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[用Weex实现三端开发架构和思路]]></title>
    <link href="http://jason5.cn/blog/yong-weexshi-xian-san-duan-kai-fa-jia-gou-he-si-lu.html"/>
    <updated>2018-08-25T21:59:32+08:00</updated>
    <id>http://jason5.cn/blog/yong-weexshi-xian-san-duan-kai-fa-jia-gou-he-si-lu</id>
    <content type="html"><![CDATA[<p>基于目前项目的已有架构，若要实现Weex三端开发，设计的架构如下图：</p>

<p><a href="http://jason5.cn/images/weex-http-proxy.png"><img src="http://jason5.cn/images/weex-http-proxy.png" alt="" /></a></p>

<!--more-->


<p>1.iOS和Android客户端维持tcp+pb方式不变</p>

<p>2.新增http proxy模块，提供http接口给Weex h5访问</p>

<p>职责是将已有的tcp+pb方式访问的服务转换成http+json形式，提供给Weex h5调用。目前http proxy用java实现，与Android客户端网络层复用代码。</p>

<p>3.改造svr接入层，验证Weex h5登录态，进行openid转换</p>

<p>以微信登录为例，之前iOS和Android用的是App授权登录，由于Weex h5是微信公众号授权登录，两者appid不同，授权得到的openid和accesstoken都不一样，需要支持对公众号进行登录校验。校验完登录态后，将公众号openid转换为App openid，再与svr逻辑层进行通信。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Weex与原生页面间的相互跳转]]></title>
    <link href="http://jason5.cn/blog/weexyu-yuan-sheng-ye-mian-jian-de-xiang-hu-tiao-zhuan.html"/>
    <updated>2018-04-09T15:33:36+08:00</updated>
    <id>http://jason5.cn/blog/weexyu-yuan-sheng-ye-mian-jian-de-xiang-hu-tiao-zhuan</id>
    <content type="html"><![CDATA[<p>我们在现有应用中集成Weex，难免会遇到Weex页面与原生页面相互跳转的问题。通常的一种场景是，某一个中间的原生页面我们用Weex来替换，这样就存在原生页面跳转到Weex页面，再由Weex页面跳转到原生页面的场景。这篇文章讲述如何实现这种场景。</p>

<!--more-->


<h3>1. 原生页面跳转到Weex页面</h3>

<p>这个其实很简单。首先需要知道的是，Weex页面其实也是一个原生页面，只是这个原生页面的View是由Weex渲染出来的而已。所以这一步实际上是原生页面跳原生页面，用navigationController的push方法就可以了。代码如下</p>

<pre><code class="objc">IGWeexDemoViewController *vc = [IGWeexDemoViewController alloc] init];
[[CPBaseViewController currentViewController].navigationController pushViewController:vc animated:YES];
</code></pre>

<h3>2. Weex页面跳转到原生页面</h3>

<p>Weex要跳回原生页面，是需要借用原生代码的能力的。实现方式就是自定义Module，Weex将需要跳转的页面和参数传递个Module，然后Module利用原生代码，控制navigationController进行跳转。</p>

<p>首先自定义跳转的Module，代码如下：</p>

<pre><code class="objc">@implementation WXNavigationModule

WX_EXPORT_METHOD(@selector(navigationToUrl:))

-(void)navigationToUrl:(NSString *)url{
    [IGJumpMediator jumpActionWithUrl:url];
    [[CPBaseViewController currentViewController].navigationController setNavigationBarHidden:NO animated:YES];

}

@end
</code></pre>

<p>关键在方法中的第一行代码 [IGJumpMediator jumpActionWithUrl:url]，通过拿到Weex里传递进来的参数url，进行解析，然后利用Runtime机制，通过字符串得到要跳转的ViewController类，然后再设置需要的初始化参数，最后push就可以了。方法具体的代码实现这里不再赘述。</p>

<p>第二行代码是设置了导航栏为显示，下边的篇幅讲下为什么要这样设置。</p>

<h3>3. Weex页面中的自定义导航栏实现</h3>

<p>Weex页面我没有用原生的导航栏，而是参考了一些资料和代码自己实现了导航栏，主要的原则是，一切可以在Weex中实现的，都放在Weex中，不放在原生代码中，这样可以更好的进行跨平台代码复用。</p>

<p>原生跳转到Weex的时候，先隐藏原生里的导航栏。Weex调回原生的时候，在显示原生导航栏。所以有了上边那一行代码。</p>

<p>在Weex中实现导航栏，最好封装成一个组件，这样方便所有页面一起复用。以下是导航栏NavigationBar.vue的代码。</p>

<p>模板部分</p>

<pre><code class="html">&lt;template&gt;
    &lt;div&gt;
        &lt;!--iPhoneX --&gt;
        &lt;div class="iPhoneXDiv navbar" v-if="isiPhoneX"&gt;&lt;/div&gt;
        &lt;!--其他iOS设备 --&gt;
        &lt;div class="iOSDiv navbar" v-else-if="isiOS"&gt;&lt;/div&gt;
        &lt;!--安卓设备 --&gt;
        &lt;div class="android navbar" v-else-if="isAndroid"&gt;&lt;/div&gt;

        &lt;div class="subviews"&gt;
            &lt;!--Title--&gt;
            &lt;text class="titletext"&gt;&lt;/text&gt;
            &lt;!--左边图片--&gt;
            &lt;div class="left" @click="leftButtonClicked" v-if="showLeft"&gt;
                &lt;image src="local:///team_navi_back@2x.png" class="left-button"&gt;&lt;/image&gt;
            &lt;/div&gt;

            &lt;div class="right" @click="rightButtonClicked" v-if="showRight"&gt;
                &lt;!--如果显示右边item ， 图片或者文字 2选1 --&gt;
                &lt;text class="right-text" v-if="rightText"&gt;&lt;/text&gt;
                &lt;image :src="rightImage" class="left-button" v-if="rightImage"&gt;&lt;/image&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/template&gt;
</code></pre>

<p>样式部分</p>

<p>```css</p>



<pre><code>
js代码部分
</code></pre>

<p>var device = weex.config.env;
const Navigator = weex.requireModule(&lsquo;navigator&rsquo;);</p>

<p>export default {
    /<em>props 属性列表</em>/
    props: {
        /<em>返回图片</em>/
        leftImage: {
            type: String,
            default: &ldquo;img/other/backbtn.png&rdquo;
        },
        /<em>Title</em>/</p>

<pre><code>    titleText: {
        type: String,
        default: "Title"
    },
    /*是否显示左边图片*/
    showLeft: {
        type: Boolean,
        default: true
    },
    /*showLeft=true时,左边是否是点击返回事件，否，则显示其他图片，重新给leftImage属性赋值*/
    isBack: {
        type: Boolean,
        default: true
    },
    /*是否显示右边item*/
    showRight: {
        type: Boolean,
        default: false
    },
    /*右边文字*/
    rightText: {
        type: String,
        default: ""
    },

    /*右边图片*/
    rightImage: {
        type: String,
        default: ""
    }
},
data() {
    return {
        isiPhoneX: (device.platform === 'iOS') &amp;&amp; (device.deviceWidth === 1125) &amp;&amp; (device.deviceHeight === 2436),
        isiOS: (device.platform === 'iOS'),
        isAndroid: (device.platform === 'android'),
        TitleText: "",
    }
},
methods: {
    //左边点击事件
    leftButtonClicked() {
        if (this.showLeft) {
            if (this.isBack)  //点击pop返回
            {
                console.log('click back');
                Navigator.pop({}, e =&gt; {
                });
            }
            else //其他操作
            {
                console.log('LeftItemClicked');
                this.$emit('LeftItemClicked');
            }
        }
    },
    //右边点击事件
    rightButtonClicked() {
        if (this.showRight) {

            console.log('RightItemClicked');
            this.$emit('RightItemClicked');
        }
    },
}
</code></pre>

<p>};
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>导航栏支持设置标题，左边和右边部分的显隐，左图片，右图片和右文字。对不同的平台做了下适配。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;调用的时候比较简单，在页面头部加上如下代码就可以了&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code class="javascript"&gt;&lt;NavBar
</span><span class='line'>    :show-left="true"
</span><span class='line'>    :title-text="titleText"
</span><span class='line'>    :show-right="false"&gt;
</span><span class='line'>&lt;/NavBar&gt;
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;4.效果&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;最后看一下效果，看得出来哪部分是原生实现，哪部分是Weex实现吗
</span><span class='line'>&lt;a href="http://jason5.cn/images/weex-navi-demo.gif"&gt;&lt;img src="http://jason5.cn/images/weex-navi-demo.gif" alt="" /&gt;&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;hr /&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;参考资料&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>&lt;li&gt;&lt;a href="https://www.jianshu.com/p/e9bbd8a2244a"&gt;Weex系列（1）-App端自定义导航条&lt;/a&gt;&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>    &lt;title type="html"&gt;&lt;![CDATA[利用Weex DevTool调试Native应用-iOS篇]]&gt;&lt;/title&gt;
</span><span class='line'>    &lt;link href="http://jason5.cn/blog/li-yong-weex-devtooldiao-shi-nativeying-yong-iospian.html"/&gt;
</span><span class='line'>    &lt;updated&gt;2018-04-03T17:48:04+08:00&lt;/updated&gt;
</span><span class='line'>    &lt;id&gt;http://jason5.cn/blog/li-yong-weex-devtooldiao-shi-nativeying-yong-iospian&lt;/id&gt;
</span><span class='line'>    &lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;官方的文档里说提供了一个工具DevTool，用来调试原生应用，但是写得比较简略，一直跑不起来，经过几天折腾和查资料，基本上是可以调试了，记录一下步骤和问题。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;!--more--&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;1. 先在本机安装iOS的调试工具&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;工具地址是 &lt;a href="https://github.com/weexteam/weex-devtool-iOS"&gt;https://github.com/weexteam/weex-devtool-iOS&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code class="javascript"&gt;npm install -g weex-devtool
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;运行调试工具weex-devtool，启动成功后，在终端命令行里会显示如下两行信息。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;a href="http://jason5.cn/images/QQ20180403-181423.png"&gt;&lt;img src="http://jason5.cn/images/QQ20180403-181423.png" alt="" /&gt;&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Websocket Address For Native是调试工具暴露的一个websocket地址，用于和Native之间的双向通信，之后Native中的代码会用到。
</span><span class='line'>Debug Server是调试工具提供的一个web服务地址，开发者通过这个网页可以像调试web页面一样，来调试Native应用。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;2. 将WXDevTool集成到项目工程中&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;增加podfile文件，只在Debug模式下集成WXDevtool&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code class="javascript"&gt;pod 'WXDevtool',   '0.15.3', :configurations =&gt; ['Debug']
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;这里遇到两个问题&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;（1）集成后编不过，根据提示发现这个库和项目里用到的FLEX有冲突，所以暂时去掉了FLEX。希望后续升级版本能解决这两个库之间的冲突。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;（2）发现还编不过，是需要再集成一个依赖库SocketRocket&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;pod 'SocketRocket', '0.4.2'
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;3. 在App启动的时候加入如下代码&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code class="objc"&gt;[WXDevTool setDebug:YES];
</span><span class='line'>[WXDevTool launchDevToolDebugWithUrl:@"ws://10.32.194.33:8088/debugProxy/native"];
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;这里launchDevToolDebugWithUrl函数需要传一个参数，就是在第一步中的websocket地址。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;4. 开始调试&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;如果之前一切顺利的话，现在就可以调试了。网页打开调试地址&lt;a href="http://10.32.194.33:8088"&gt;http://10.32.194.33:8088&lt;/a&gt;  &lt;br/&gt;
</span><span class='line'>启动Native App，然后会看到我们的App信息出现在网页中。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;a href="http://jason5.cn/images/QQ20180403-182830.png"&gt;&lt;img src="http://jason5.cn/images/QQ20180403-182830.png" alt="" /&gt;&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;可以看到下边两个黑色的大按钮，是调试工具提供的两个功能，Debugger和Inspector。
</span><span class='line'>Debugger用来调试js代码。在里边可以给代码设置断点，观察变量值，查看console.log的输出，跟Web开发一样的体验。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;a href="http://jason5.cn/images/QQ20180403-193719.png"&gt;&lt;img src="http://jason5.cn/images/QQ20180403-193719.png" alt="" /&gt;&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Inspector用来调试UI界面。这里可以看到界面的树形结构，可以直接修改位置等属性，可以实时看到效果。这里如果在终端操作页面，浏览器里的页面也是会实时刷新的。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;a href="http://jason5.cn/images/QQ20180403-193917.png"&gt;&lt;img src="http://jason5.cn/images/QQ20180403-193917.png" alt="" /&gt;&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;这里遇到了一个问题，启动App后，必须首先进入Debugger页面打开调试工具，Native里的weex页面才能被正常渲染和执行，暂时还没搞清楚原因。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;5.总结&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;调试工具可以让开发Native的时候，像Web开发一样去调试，一定程度上提高了效率，对熟悉Web开发的同学来讲，应该能很快上手。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;PS：下一篇文章会讲一下原生页面和weex页面之间的跳转以及在weex中如何自定义导航栏。&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>    &lt;title type="html"&gt;&lt;![CDATA[Weex中js和Native的交互-iOS篇]]&gt;&lt;/title&gt;
</span><span class='line'>    &lt;link href="http://jason5.cn/blog/weexzhong-jshe-nativede-jiao-hu-iospian.html"/&gt;
</span><span class='line'>    &lt;updated&gt;2018-03-27T11:21:56+08:00&lt;/updated&gt;
</span><span class='line'>    &lt;id&gt;http://jason5.cn/blog/weexzhong-jshe-nativede-jiao-hu-iospian&lt;/id&gt;
</span><span class='line'>    &lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;终端集成Weex后，看了下js调用Native的方法，做了个展示列表的demo，做下记录。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;img src="http://jason5.cn/images/QQ20180327-105246.png" alt="" /&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;!--more--&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;h2&gt;Native端&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;要实现Weex调用Native，需要实现自定义的module，暴露相应的方法，并且注册。完成这个过程后，js里可以直接注册过的module中的方法，并且通过callback拿到返回结果。下边以weex调用native的网络模块获取数据并进行展示的例子，进行介绍。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;1. 实现WXModuleProtocol协议&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;自定义module，需要实现WXModuleProtocol协议&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;WXCustomNetworkModule.h&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code class="objc"&gt;@interface WXCustomNetworkModule : NSObject&lt;WXModuleProtocol&gt;
</span><span class='line'>@end
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;2. 实现网络请求数据的方法，并且暴露给js&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;WXCustomNetworkModule.m&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code class="objc"&gt;@interface WXCustomNetworkModule()
</span><span class='line'>
</span><span class='line'>@property (nonatomic, strong) NSMutableArray *merchants;
</span><span class='line'>@property (nonatomic, copy) NSString *pageIndex;
</span><span class='line'>
</span><span class='line'>@end
</span><span class='line'>
</span><span class='line'>@implementation WXCustomNetworkModule
</span><span class='line'>
</span><span class='line'>WX_EXPORT_METHOD(@selector(getMerchantList:))
</span><span class='line'>
</span><span class='line'>-(void)getMerchantList:(WXModuleCallback)callback{
</span><span class='line'>
</span><span class='line'>    TipCredit_QueryMerchantCreditListReq *req = [[TipCredit_QueryMerchantCreditListReq alloc] init];
</span><span class='line'>    req.userLng = [CPLocationAPI getLongitude];
</span><span class='line'>    req.userLat = [CPLocationAPI getLatitude];
</span><span class='line'>    req.pageidx = self.pageIndex;
</span><span class='line'>    req.num = 10;
</span><span class='line'>
</span><span class='line'>    @weakify(self);
</span><span class='line'>    [TipNetWorkManager requestWithReq:req withRspClass:[TipCredit_QueryMerchantCreditListRsp class] withCmd:90086 successBlock:^(id respondObjc) {
</span><span class='line'>        @strongify(self);
</span><span class='line'>        TipCredit_QueryMerchantCreditListRsp *rsp = (TipCredit_QueryMerchantCreditListRsp *)respondObjc;
</span><span class='line'>        self.pageIndex = rsp.pageidx;
</span><span class='line'>        [self.merchants addObjectsFromArray:rsp.merchantcreditsArray];
</span><span class='line'>
</span><span class='line'>        for(int i=0; i&lt;self.merchants.count; i++){
</span><span class='line'>            self.merchants[i] = [self.merchants[i] toJson];
</span><span class='line'>        }
</span><span class='line'>        callback(self.merchants);
</span><span class='line'>
</span><span class='line'>    } failedBlock:^(id failedMsg, int resultCode) {
</span><span class='line'>        @strongify(self);
</span><span class='line'>    }];
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;getMerchantList是发送网络请求获取后台数据的方法。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code class="objc"&gt;WX_EXPORT_METHOD(@selector(getMerchantList:))
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;这行代码可以将此函数暴露给js调用。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;3. 初始化的时候注册自定义module，并且指定module name&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code class="objc"&gt;[WXSDKEngine registerModule:@"network" withClass:[WXCustomNetworkModule class]];
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;module name命名为network，表示网络模块。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;4. js拿到回调数据&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;实现的方法，在最后可以加一个WXModuleCallback类型的callback参数&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code class="objc"&gt;callback(self.merchants);
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;通过这行代码将结果回调给js。回调的参数类型支持NSString, NSArray, NSDictionary。所以这里回调之前，将网络返回的自定义类转换成了NSDictionary，再进行回调。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2&gt;js端&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```javascript
</span><span class='line'>&lt;template&gt;
</span><span class='line'>  &lt;list class="list"&gt;
</span><span class='line'>    &lt;cell class="cell" v-for="merchant in lists"&gt;
</span><span class='line'>      &lt;div class="panel"&gt;
</span><span class='line'>        &lt;text class="text"&gt;&lt;/text&gt;
</span><span class='line'>      &lt;/div&gt;
</span><span class='line'>    &lt;/cell&gt;
</span><span class='line'>  &lt;/list&gt;
</span><span class='line'>&lt;/template&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;script&gt;
</span><span class='line'>export default {
</span><span class='line'>  name: 'App',
</span><span class='line'>  components: {
</span><span class='line'>    HelloWorld
</span><span class='line'>  },
</span><span class='line'>  data () {
</span><span class='line'>    return {
</span><span class='line'>      logo : 'https://gw.alicdn.com/tfs/TB1yopEdgoQMeJjy1XaXXcSsFXa-640-302.png',
</span><span class='line'>      lists : []
</span><span class='line'>    }
</span><span class='line'>  },
</span><span class='line'>  methods: {
</span><span class='line'>  
</span><span class='line'>  },
</span><span class='line'>  created: function () {
</span><span class='line'>    var self = this
</span><span class='line'>    weex.requireModule('network').getMerchantList(function(rsp){
</span><span class='line'>      self.lists = rsp
</span><span class='line'>    })
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>&lt;/script&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;index.vue的关键代码如上。created方法在页面创建时候会执行。通过
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;weex.requireModule(&lsquo;network&rsquo;).getMerchantList</span></code></pre></td></tr></table></div></figure>
这行代码，调用原生网络模块，并且拿到回调数据进行展示。</p>

<h2>总结</h2>

<p>本文介绍了Weex中js与Native的交互方式。通过此方法，界面部分完全可以在js里实现，iOS和Android双端只写一份，原生部分只需要提供负责网络请求的module就可以了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[集成Weex到现有应用-iOS篇]]></title>
    <link href="http://jason5.cn/blog/ji-cheng-weexdao-xian-you-ying-yong-iospian.html"/>
    <updated>2018-03-26T11:48:50+08:00</updated>
    <id>http://jason5.cn/blog/ji-cheng-weexdao-xian-you-ying-yong-iospian</id>
    <content type="html"><![CDATA[<p>最近看了一下weex，将weex集成到了现有的iOS APP里，并且实现了一个静态页面的展示，做下记录。</p>

<!--more-->


<h2>一. 现有iOS应用的修改</h2>

<h3>1. 用cocopods引入WeexSDK</h3>

<pre><code class="bash">pod 'WeexSDK', '0.18.0'
</code></pre>

<h3>2. 在iOS APP里初始化Weex</h3>

<p>didFinishLaunchingWithOptions里添加代码</p>

<pre><code class="objc">//business configuration
[WXAppConfiguration setAppGroup:@"TencentApp"];
[WXAppConfiguration setAppName:@"TIP"];
[WXAppConfiguration setAppVersion:@"1.0.0"];

//init sdk environment
[WXSDKEngine initSDKEnvironment];

//register custom module and component，optional
//这里暂时用不到，之后再说
//[WXSDKEngine registerComponent:@"MyView" withClass:[MyViewComponent class]];
//[WXSDKEngine registerModule:@"event" withClass:[WXEventModule class]];

//register the implementation of protocol, optional
//如果在weex页面里需要下载网络图片，需要自己实现协议，如果没有，可以注释掉
[WXSDKEngine registerHandler:[WXImgLoaderDefaultImpl new] withProtocol:@protocol(WXImgLoaderProtocol)];
//set the log level
[WXLog setLogLevel: WXLogLevelAll];
</code></pre>

<h3>3. 在业务相关页面用weex渲染原生View</h3>

<pre><code class="objc">@interface IGWeexDemoViewController()

@property (nonatomic, strong) WXSDKInstance *instance;
@property (nonatomic, strong) UIView *weexView;
@property (nonatomic, strong) NSString *url;
@end

@implementation IGWeexDemoViewController

-(void)viewDidLoad{
    [super viewDidLoad];

//    self.url = @"http://10.66.212.209:8081/dist/index.js";
    self.url = @"http://weex-1251917893.cosgz.myqcloud.com/index.js";

    _instance = [[WXSDKInstance alloc] init];
    _instance.viewController = self;
    _instance.frame = self.view.frame;

    __weak typeof(self) weakSelf = self;
    _instance.onCreate = ^(UIView *view) {
        [weakSelf.weexView removeFromSuperview];
        weakSelf.weexView = view;
        [weakSelf.view addSubview:weakSelf.weexView];
    };

    _instance.onFailed = ^(NSError *error) {
        //process failure
    };

    _instance.renderFinish = ^ (UIView *view) {
        //process renderFinish
    };
    [_instance renderWithURL:[NSURL URLWithString:self.url]];
}

- (void)dealloc{
    [_instance destroyInstance];
}
</code></pre>

<h3>4. 运行效果</h3>

<p><img src="http://jason5.cn/images/QQ20180326-114148.png" alt="" /></p>

<h2>二. 生成js文件</h2>

<p>在第一张的第3节中，原生View通过加载一个js文件，然后用Weex SDK进行渲染。这一章介绍js文件的生成方法。</p>

<h3>1. 安装node</h3>

<pre><code class="bash">brew install node
</code></pre>

<h3>2. 安装weex-toolkit</h3>

<pre><code class="bash">npm install -g weex-toolkit
</code></pre>

<h3>3. 初始化weex工程</h3>

<pre><code class="bash">weex create awesome-project
</code></pre>

<p>然后在项目根目录运行
<code>bash
npm install
</code>
安装项目依赖</p>

<h3>4. 生成原生用到的js文件</h3>

<pre><code class="bash">npm run serve
</code></pre>

<p>运行这个命令，会在本地启动一个http server，原生终端用到的js文件就可以通过url访问了。生成的js在dist目录下，找到之后就可以拼出js的url了，例如
<a href="http://10.66.212.209:8081/dist/index.js%E3%80%82">http://10.66.212.209:8081/dist/index.js%E3%80%82</a></p>

<h2>三. 如何显示网络图片</h2>

<p>运行demo后，会发现网络图片不能展示。原来weex初始并没有集成网络图片下载功能，需要自己去实现。方法如下</p>

<h3>1.自定义图片下载协议WXImgLoaderProtocol</h3>

<pre><code class="objc">@protocol WXImgLoaderProtocol &lt;WXModuleProtocol&gt;
-(id&lt;WXImageOperationProtocol&gt;)downloadImageWithURL:(NSString *)url imageFrame:(CGRect)imageFrame userInfo:(NSDictionary *)options completed:(void(^)(UIImage *image,  NSError *error, BOOL finished))completedBlock;
@end
</code></pre>

<h3>2.协议的实现类WXImgLoaderDefaultImpl</h3>

<pre><code class="objc">//WXImgLoaderDefaultImpl.h文件
@interface WXImgLoaderDefaultImpl : NSObject
@end

//WXImgLoaderDefaultImpl.m文件
@implementation WXImgLoaderDefaultImpl
#pragma mark WXImgLoaderProtocol

- (id&lt;WXImageOperationProtocol&gt;)downloadImageWithURL:(NSString *)url imageFrame:(CGRect)imageFrame userInfo:(NSDictionary *)userInfo completed:(void(^)(UIImage *image,  NSError *error, BOOL finished))completedBlock
{
    if ([url hasPrefix:@"//"]) {
        url = [@"http:" stringByAppendingString:url];
    }
    return (id&lt;WXImageOperationProtocol&gt;)[[SDWebImageManager sharedManager] downloadImageWithURL:[NSURL URLWithString:url] options:0 progress:^(NSInteger receivedSize, NSInteger expectedSize) {
    } completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, BOOL finished, NSURL *imageURL) {
        if (completedBlock) {
            completedBlock(image, error, finished);
        }
    }];
}
@end
</code></pre>

<h3>3.在weex初始化的时候注册协议</h3>

<pre><code class="objc">[WXSDKEngine registerHandler:[WXImgLoaderDefaultImpl new] withProtocol:@protocol(WXImgLoaderProtocol)];
</code></pre>

<h2>四. todo</h2>

<p>后续还有一些问题要研究</p>

<ol>
<li>weex页面里，如何调用native的网络模块获取到数据</li>
<li>多页面的跳转</li>
<li>调试工具weex devtool的使用方法</li>
<li>如何构建发布流程</li>
</ol>

]]></content>
  </entry>
  
</feed>
