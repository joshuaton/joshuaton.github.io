<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类：web | 移动开发技术]]></title>
  <link href="http://jason5.cn/blog/categories/web/atom.xml" rel="self"/>
  <link href="http://jason5.cn/"/>
  <updated>2024-05-09T18:07:36+08:00</updated>
  <id>http://jason5.cn/</id>
  <author>
    <name><![CDATA[jason]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Nginx日志切割]]></title>
    <link href="http://jason5.cn/blog/nginxri-zhi-qie-ge.html"/>
    <updated>2023-01-09T14:56:40+08:00</updated>
    <id>http://jason5.cn/blog/nginxri-zhi-qie-ge</id>
    <content type="html"><![CDATA[<p>随着nginx日志越来越大，最终会将服务器上的日志占满，方案是用logformat自动进行日志切割，需要以下步骤</p>

<!--more-->


<h3>创建logformat配置文件</h3>

<pre><code>/data/logs/*.log {
  daily
  missingok
  rotate 7
  ifempty
  create 640 nginx root
  sharedscripts
  dateext
  postrotate
    if [ -f /var/run/nginx.pid ]; then
      kill -USR1 \`cat /var/run/nginx.pid\`
    fi
  endscript
}
</code></pre>

<p>daily表示日志按天切割</p>

<p>rotate 7 表示只保留最近的7条切割文件</p>

<p>postrotate 表示切割日志后要运行的命令，这里是杀掉nginx进程，使其能重新用新文件写入日志</p>

<h3>修改Dockerfile</h3>

<pre><code>FROM xxx/nginx:1.18

# 安装logrotate
RUN apt-get update &amp;&amp; apt-get -y install logrotate

# 设置时区
ENV TZ=Asia/Shanghai
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime &amp;&amp; echo '$TZ' &gt; /etc/timezone

COPY ${domain}/. /usr/share/nginx/html/
COPY default.conf /etc/nginx/conf.d/default.conf
COPY logrotate-nginx /etc/logrotate.d/
WORKDIR /usr/share/nginx/html
EXPOSE 80

CMD service cron start &amp;&amp; nginx -g 'daemon off;'
</code></pre>

<p>主要增加了以下内容</p>

<ol>
<li>安装logrotate，因为原始镜像里没有</li>
<li>设置时区，这样日志的时间是准确的，不会早8个小时</li>
<li>将logrotate的配置文件copy到配置目录下</li>
<li>启动crontab，并且修改nginx的启动方式</li>
</ol>


<h3>容器运行之后的效果</h3>

<p>查看容器的crontab内容</p>

<pre><code>SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

# Example of job definition:
# .---------------- minute (0 - 59)
# |  .------------- hour (0 - 23)
# |  |  .---------- day of month (1 - 31)
# |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...
# |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat
# |  |  |  |  |
# *  *  *  *  * user-name command to be executed
17 *    * * *   root    cd / &amp;&amp; run-parts --report /etc/cron.hourly
25 6    * * *   root    test -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.daily )
47 6    * * 7   root    test -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.weekly )
52 6    1 * *   root    test -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.monthly )
</code></pre>

<p>可以看到每天6点25分会运行/etc/cron.daily</p>

<p>/etc/cron.daily/logrotate 是一个脚本，每天会定时调用，执行logrotate二进制命令</p>

<pre><code>#!/bin/sh

# skip in favour of systemd timer
if [ -d /run/systemd/system ]; then
    exit 0
fi

# this cronjob persists removals (but not purges)
if [ ! -x /usr/sbin/logrotate ]; then
    exit 0
fi

/usr/sbin/logrotate /etc/logrotate.conf
EXITVALUE=$?
if [ $EXITVALUE != 0 ]; then
    /usr/bin/logger -t logrotate "ALERT exited abnormally with [$EXITVALUE]"
fi
exit $EXITVALUE
</code></pre>

<h3>切割后的日志</h3>

<pre><code>-rw-r----- 1 nginx root  1241741 Sep  9 15:11 nginx_error_log.log-20220909
-rw-r----- 1 nginx root   639982 Sep 13 06:04 nginx_error_log.log-20220912
-rw-r----- 1 nginx root 26065270 Sep 13 19:40 nginx_error_log.log-20220910
-rw-r----- 1 nginx root  5055874 Sep 14 06:38 nginx_error_log.log-20220911
-rw-r----- 1 nginx root   312747 Sep 14 12:17 nginx_error_log.log-20220913
-rw-r----- 1 nginx root  1343155 Sep 15 06:39 nginx_error_log.log-20220914
-rw-r----- 1 nginx root  2816323 Sep 15 14:35 nginx_error_log.log-20220915
-rw-r----- 1 nginx root  1141083 Sep 15 20:13 nginx_error_log.log
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hippy接入typescript记录]]></title>
    <link href="http://jason5.cn/blog/hippyjie-ru-typescriptji-lu.html"/>
    <updated>2021-01-09T17:32:08+08:00</updated>
    <id>http://jason5.cn/blog/hippyjie-ru-typescriptji-lu</id>
    <content type="html"><![CDATA[<p>项目的package.json如下</p>

<pre><code class="javascript">  "scripts": {
    "dev": "vue-cli-service serve --https true --port 443 --host test.igame.qq.com",
    "build": "vue-cli-service build",
    "lint": "eslint --ext .js,.vue,.ts .",
    "lint:fix": "eslint --fix --ext .js,.vue,.ts .",
    "hippy:debug": "hippy-debug",
    "hippy:dev": "webpack --config ./scripts/hippy-webpack.dev.js",
    "hippy:vendor": "webpack --config ./scripts/hippy-webpack.ios-vendor.js --config ./scripts/hippy-webpack.android-vendor.js",
    "hippy:build": "webpack --config ./scripts/hippy-webpack.ios.js --config ./scripts/hippy-webpack.android.js",
    "hippy:publish": "hippy-publish igame-match-test",
    "hippy:publish:prod": "NODE_ENV='release' hippy-publish igame-match-release"
  },
</code></pre>

<p>可以看到，如果是sudo npm run dev的方式来启动服务的话，用的是vue-cli-service，这个是@vue/cli-service的命令，其默认是去读取根目录的配置文件vue.config.js。如果是以npm run hippy:dev 去启动的话，读取的是配置文件hippy-webpack.dev.js。由于两个配置文件不一样，所以，对ts的支持需要两边配置文件都要修改。</p>

<!--more-->


<h2>1. vue.config.js的配置</h2>

<p>vue.config.js这边，我们不需要去配置ts-loader，参考现有的项目igame-match，只要安装@vue/cli-plugin-typescript和typescript，就可以自动帮我们配置好。这里有个问题，如果不在vue.config.js里加上entry配置的话，默认项目启动会去寻找main.ts文件，这个文件是不存在的，所以这里起不来，解决方法是修改entry文件就可以了，在vue.config.js里加上如下配置</p>

<pre><code class="javascript">const path = require('path');

module.exports = {
  runtimeCompiler: true,
  configureWebpack: {
    entry: path.resolve(__dirname, 'src', 'main.js'),
  },
};
</code></pre>

<p>这里会用到的两个小技巧</p>

<ol>
<li>初始化tsconfig.json文件</li>
</ol>


<pre><code class="```shell">   tsc init
</code></pre>

<ol>
<li>检查webpack的配置，由于vue.config.js会对webpack的配置进行一些封装，并不是很直观，所以可以运行以下的命令，查看真正的配置</li>
</ol>


<pre><code class="```shell">   vue inspect
   vue inspect --rule vue
</code></pre>

<p>   详细参考 <a href="https://cli.vuejs.org/zh/guide/webpack.html#%E4%BF%AE%E6%94%B9%E6%8F%92%E4%BB%B6%E9%80%89%E9%A1%B9">webpack 相关 | Vue CLI</a></p>

<h2>2. hippy-webpack.dev.js的配置</h2>

<p>hippy-webpack.dev.js这边，需要加上ts-loader对ts文件进行解析，加上如下的配置</p>

<pre><code class="javascript">modules: {
    rules: [
        {
            test: /\.(ts|tsx)?$/i,
            use: [{
              loader: 'ts-loader',
              options: {
                appendTsSuffixTo: [/\.vue$/],
              },
            }],
            exclude: /node_modules/,
        }
    ] 
},
resolve: {
   extensions: ['.js', '.vue', '.json', '.ts']
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Express学习笔记(二)-路由]]></title>
    <link href="http://jason5.cn/blog/expressxue-xi-bi-ji-er-lu-you.html"/>
    <updated>2018-11-05T16:08:45+08:00</updated>
    <id>http://jason5.cn/blog/expressxue-xi-bi-ji-er-lu-you</id>
    <content type="html"><![CDATA[<p>这一篇主要介绍路由的用法</p>

<!--more-->


<h3>基本用法</h3>

<pre><code class="javascript">var express = require('express');
var app = express();

// GET method route
app.get('/', function (req, res) {
  res.send('GET request to the homepage');
});

// POST method route
app.post('/', function (req, res) {
  res.send('POST request to the homepage');
});

app.all('/secret', function (req, res, next) {
  console.log('Accessing the secret section ...');
  next(); // pass control to the next handler
});
</code></pre>

<p>all表示接受所有的http方法</p>

<h3>路由路径</h3>

<p>支持正则表达式</p>

<pre><code class="javascript">app.get('/ab*cd', function(req, res) {
  res.send('ab*cd');
});
</code></pre>

<p>此路由路径将匹配 abcd、abxcd、abRABDOMcd、ab123cd 等。</p>

<h3>路由处理顺序</h3>

<pre><code class="javascript">var cb0 = function (req, res, next) {
  console.log('CB0');
  next();
}

var cb1 = function (req, res, next) {
  console.log('CB1');
  next();
}

app.get('/example/d', [cb0, cb1], function (req, res, next) {
  console.log('the response will be sent by the next function ...');
  next();
}, function (req, res) {
  res.send('Hello from D!');
});
</code></pre>

<p>可以写数组，也可以写多个回调函数参数，挨着执行，前一个函数必须执行<code>next()</code>，否则http请求会挂起</p>

<h3>模块封装</h3>

<p>可以封装一个bird.js模块</p>

<pre><code class="javascript">var express = require('express');
var router = express.Router();

// middleware that is specific to this router
router.use(function timeLog(req, res, next) {
  console.log('Time: ', Date.now());
  next();
});
// define the home page route
router.get('/', function(req, res) {
  res.send('Birds home page');
});
// define the about route
router.get('/about', function(req, res) {
  res.send('About birds');
});

module.exports = router;
</code></pre>

<p>使用模块后，url从外部使用模块开始，接着模块定义的路径，就可以访问</p>

<pre><code>var birds = require('./birds');
...
app.use('/birds', birds);
</code></pre>

<p>此时，可以响应<code>/birds</code>和<code>/birds/about</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Express学习笔记(一)-开始]]></title>
    <link href="http://jason5.cn/blog/expressxue-xi-bi-ji.html"/>
    <updated>2018-11-05T15:57:02+08:00</updated>
    <id>http://jason5.cn/blog/expressxue-xi-bi-ji</id>
    <content type="html"><![CDATA[<p>Express是一个基于nodejs的web开发框架。</p>

<!--more-->


<h3>Hello World</h3>

<p>0.安装nodejs环境</p>

<p>以腾讯云的centOS云服务器为例，先运行</p>

<pre><code>yum install nodejs
</code></pre>

<p>1.安装</p>

<pre><code>$ mkdir myapp
$ cd myapp
$ npm init
$ npm install express --save
</code></pre>

<p>2.修改app.js，然后运行</p>

<pre><code>$ node app.js
</code></pre>

<p>打开浏览器，访问<a href="http://localhost:3000%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C%E4%BA%86">http://localhost:3000%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C%E4%BA%86</a></p>

<h3>脚手架工程</h3>

<p>1.安装express-generator</p>

<pre><code>$ npm install express-generator -g
</code></pre>

<p>2.生成脚手架工程</p>

<pre><code>$ express --view=pug myapp
</code></pre>

<p>pug是使用的模板引擎</p>

<pre><code>$ cd myapp
$ npm install
</code></pre>

<p>3.运行</p>

<pre><code>$ npm start
</code></pre>

<p>在浏览器里访问。</p>

<h3>路由</h3>

<pre><code class="javascript">app.get('/', function (req, res) {
  res.send('Hello World!');
});
</code></pre>

<p>表示根目录相应http get方法</p>

<h3>静态文件</h3>

<pre><code class="javascript">app.use('/static', express.static(__dirname + '/public'));
</code></pre>

<p>public目录下的所有文件可以作为静态资源访问。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何用charles进行https抓包]]></title>
    <link href="http://jason5.cn/blog/ru-he-yong-charlesjin-xing-httpszhua-bao.html"/>
    <updated>2016-07-21T19:20:44+08:00</updated>
    <id>http://jason5.cn/blog/ru-he-yong-charlesjin-xing-httpszhua-bao</id>
    <content type="html"><![CDATA[<p>项目由http转成了https，遇到个问题是用charles不能抓包的问题。按照抓取http包的方式搭好了环境后，在浏览器里出现了这样的提示。</p>

<!--more-->


<p><img src="http://jason5.cn/images/1841176-6bec4485c88cf666.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png" /></p>

<p>charles截包的信息如下</p>

<p><img src="http://jason5.cn/images/1841176-d9e7ecd4c8ea7d00.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png" /></p>

<p>为什么会出现这样的情况呢？原因是charles相当于一个中间人代理，用户的浏览器如果直接访问目标服务器，验证CA证书有效，所以不会出这种提示，但是在中间加入charles代理后，实际上用户浏览器就会验证Charles提供的证书，这里显然是验证不过的，所以就会出现这种提示。我们必须手动在客户端导入charles的证书，才能不出现这个信任提示，下边介绍下如何去除这种提示的方法。</p>

<p>1.以小米note MIUI 7，mac版本Charles 3.11.1为例，首先在mac上生成charles的root certification</p>

<p><img src="http://jason5.cn/images/1841176-7b848c56225c08ea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png" /></p>

<p>2.将导出的crt文件上传到手机上，并且进行安装。小米note不能通过文件管理器点击crt文件进行安装，需要进入设置->安全和隐私->从存储设备安装</p>

<p><img src="http://jason5.cn/images/1841176-0d6144017d4c40e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png" /></p>

<p>3.正常通过验证，可以截取到https的明文数据了</p>

<p><img src="http://jason5.cn/images/1841176-4574049447c6faf5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png" /></p>

<p>4.更多端的设置证书方法可以参考这篇官方文档
<a href="https://www.charlesproxy.com/documentation/using-charles/ssl-certificates/">https://www.charlesproxy.com/documentation/using-charles/ssl-certificates/</a></p>

<h3>参考资料</h3>

<p>1.<a href="http://www.neatstudio.com/show-2454-1.shtml">mac下的抓包工具Charles</a></p>

<p>2.<a href="http://legendtkl.com/2015/11/30/charles-https/">Charles抓取HTTPS数据包</a></p>

<p>3.<a href="http://club.huawei.com/thread-3433050-1-1.html">手机上安装证书的方法</a></p>

<p>4.<a href="http://www.charlesproxy.com/documentation/proxying/ssl-proxying/">Charles SSL PROXYING</a></p>

<p>5.<a href="https://www.charlesproxy.com/documentation/using-charles/ssl-certificates/">Charles SSL CERTIFICATES</a></p>
]]></content>
  </entry>
  
</feed>
