<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[移动开发技术]]></title>
  <link href="http://jason5.cn/atom.xml" rel="self"/>
  <link href="http://jason5.cn/"/>
  <updated>2019-01-07T22:34:06+08:00</updated>
  <id>http://jason5.cn/</id>
  <author>
    <name><![CDATA[jason]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Aspects源码解读]]></title>
    <link href="http://jason5.cn/blog/acpectsyuan-ma-jie-du.html"/>
    <updated>2019-01-07T15:25:12+08:00</updated>
    <id>http://jason5.cn/blog/acpectsyuan-ma-jie-du</id>
    <content type="html"><![CDATA[<p>Aspects是iOS面向切面编程的第三方库，它可以在不改变原有代码的情况下，在任意函数之前或之后插入代码，也可以替换掉函数原有的代码。它的原理是基于iOS的runtime，这篇文章对Aspects进行源码解读，并阐述其原理。</p>

<h2>调用方式</h2>

<p>首先我们下载官方demo，从入口代码开始看：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">AspectsViewController</span> <span class="o">*</span><span class="n">aspectsController</span> <span class="o">=</span> <span class="p">[</span><span class="n">AspectsViewController</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">aspectsController</span> <span class="nl">aspect_hookSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">buttonPressed</span><span class="p">:)</span> <span class="nl">withOptions</span><span class="p">:</span><span class="mi">0</span> <span class="nl">usingBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="kt">id</span> <span class="n">info</span><span class="p">,</span> <span class="kt">id</span> <span class="n">sender</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Button was pressed by: %@&quot;</span><span class="p">,</span> <span class="n">sender</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="nl">error</span><span class="p">:</span><span class="nb">NULL</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码就是Aspects的调用方式之一，表示在对象aspectsController的buttonPressed函数执行之后，再执行block里的代码，打印一行日志。withOptions的参数写的0，这里是一个枚举值，可以控制block代码怎样执行，具体的定义如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">typedef</span> <span class="nf">NS_OPTIONS</span><span class="p">(</span><span class="bp">NSUInteger</span><span class="p">,</span> <span class="n">AspectOptions</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">AspectPositionAfter</span>   <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>            <span class="c1">/// Called after the original implementation (default)</span>
</span><span class='line'>    <span class="n">AspectPositionInstead</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>            <span class="c1">/// Will replace the original implementation.</span>
</span><span class='line'>    <span class="n">AspectPositionBefore</span>  <span class="o">=</span> <span class="mi">2</span><span class="p">,</span>            <span class="c1">/// Called before the original implementation.</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">AspectOptionAutomaticRemoval</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">3</span> <span class="c1">/// Will remove the hook after the first execution.</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h2>hook过程</h2>

<p>我们从入口函数进入开始跟踪代码，最后发现无论是对实例方法还是类方法进行hook，都会调用aspect_add函数，省略了一些无关代码后如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">static</span> <span class="kt">id</span> <span class="nf">aspect_add</span><span class="p">(</span><span class="kt">id</span> <span class="nb">self</span><span class="p">,</span> <span class="kt">SEL</span> <span class="n">selector</span><span class="p">,</span> <span class="n">AspectOptions</span> <span class="n">options</span><span class="p">,</span> <span class="kt">id</span> <span class="n">block</span><span class="p">,</span> <span class="bp">NSError</span> <span class="o">**</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">__block</span> <span class="n">AspectIdentifier</span> <span class="o">*</span><span class="n">identifier</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="n">AspectsContainer</span> <span class="o">*</span><span class="n">aspectContainer</span> <span class="o">=</span> <span class="n">aspect_getContainerForObject</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">selector</span><span class="p">);</span>
</span><span class='line'>    <span class="n">identifier</span> <span class="o">=</span> <span class="p">[</span><span class="n">AspectIdentifier</span> <span class="nl">identifierWithSelector</span><span class="p">:</span><span class="n">selector</span> <span class="nl">object</span><span class="p">:</span><span class="nb">self</span> <span class="nl">options</span><span class="p">:</span><span class="n">options</span> <span class="nl">block</span><span class="p">:</span><span class="n">block</span> <span class="nl">error</span><span class="p">:</span><span class="n">error</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">identifier</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">aspectContainer</span> <span class="nl">addAspect</span><span class="p">:</span><span class="n">identifier</span> <span class="nl">withOptions</span><span class="p">:</span><span class="n">options</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Modify the class to allow message interception.</span>
</span><span class='line'>        <span class="n">aspect_prepareClassAndHookSelector</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">selector</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">identifier</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码做了两件事情。</p>

<p>首先生成AspectIdentifier，然后将AspectIdentifier加入到AspectsContainer中。AspectIdentifier的定义如下，它描述了一个Ascpect切片代码的信息。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@interface</span> <span class="nc">AspectIdentifier</span> : <span class="bp">NSObject</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">assign</span><span class="p">)</span> <span class="kt">SEL</span> <span class="n">selector</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="kt">id</span> <span class="n">block</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="bp">NSMethodSignature</span> <span class="o">*</span><span class="n">blockSignature</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">weak</span><span class="p">)</span> <span class="kt">id</span> <span class="n">object</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">assign</span><span class="p">)</span> <span class="n">AspectOptions</span> <span class="n">options</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>AspectsContainer的定义如下，它负责容纳AspectIdentifier，可以在before，instead，after数组里放入多个AspectIdentifier，从名称可以看出这些AspectIdentifier所执行的时机。AspectsContainer将在后边取出并执行。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@interface</span> <span class="nc">AspectsContainer</span> : <span class="bp">NSObject</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">atomic</span><span class="p">,</span> <span class="k">copy</span><span class="p">)</span> <span class="bp">NSArray</span> <span class="o">*</span><span class="n">beforeAspects</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">atomic</span><span class="p">,</span> <span class="k">copy</span><span class="p">)</span> <span class="bp">NSArray</span> <span class="o">*</span><span class="n">insteadAspects</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">atomic</span><span class="p">,</span> <span class="k">copy</span><span class="p">)</span> <span class="bp">NSArray</span> <span class="o">*</span><span class="n">afterAspects</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>其次调用aspect_prepareClassAndHookSelector函数，这是最关键的部分：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">aspect_prepareClassAndHookSelector</span><span class="p">(</span><span class="bp">NSObject</span> <span class="o">*</span><span class="nb">self</span><span class="p">,</span> <span class="kt">SEL</span> <span class="n">selector</span><span class="p">,</span> <span class="bp">NSError</span> <span class="o">**</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">Class</span> <span class="n">klass</span> <span class="o">=</span> <span class="n">aspect_hookClass</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Method</span> <span class="n">targetMethod</span> <span class="o">=</span> <span class="n">class_getInstanceMethod</span><span class="p">(</span><span class="n">klass</span><span class="p">,</span> <span class="n">selector</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">IMP</span> <span class="n">targetMethodIMP</span> <span class="o">=</span> <span class="n">method_getImplementation</span><span class="p">(</span><span class="n">targetMethod</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">aspect_isMsgForwardIMP</span><span class="p">(</span><span class="n">targetMethodIMP</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Make a method alias for the existing method implementation, it not already copied.</span>
</span><span class='line'>        <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">typeEncoding</span> <span class="o">=</span> <span class="n">method_getTypeEncoding</span><span class="p">(</span><span class="n">targetMethod</span><span class="p">);</span>
</span><span class='line'>        <span class="kt">SEL</span> <span class="n">aliasSelector</span> <span class="o">=</span> <span class="n">aspect_aliasForSelector</span><span class="p">(</span><span class="n">selector</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">klass</span> <span class="nl">instancesRespondToSelector</span><span class="p">:</span><span class="n">aliasSelector</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">__unused</span> <span class="kt">BOOL</span> <span class="n">addedAlias</span> <span class="o">=</span> <span class="n">class_addMethod</span><span class="p">(</span><span class="n">klass</span><span class="p">,</span> <span class="n">aliasSelector</span><span class="p">,</span> <span class="n">method_getImplementation</span><span class="p">(</span><span class="n">targetMethod</span><span class="p">),</span> <span class="n">typeEncoding</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">// We use forwardInvocation to hook in.</span>
</span><span class='line'>        <span class="n">class_replaceMethod</span><span class="p">(</span><span class="n">klass</span><span class="p">,</span> <span class="n">selector</span><span class="p">,</span> <span class="n">aspect_getMsgForwardIMP</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">selector</span><span class="p">),</span> <span class="n">typeEncoding</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个函数分为两部分，第2行aspect_hookClass和后边的部分。我们先来看aspect_hookClass函数，省略后的代码如下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">static</span> <span class="kt">Class</span> <span class="nf">aspect_hookClass</span><span class="p">(</span><span class="bp">NSObject</span> <span class="o">*</span><span class="nb">self</span><span class="p">,</span> <span class="bp">NSError</span> <span class="o">**</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">Class</span> <span class="n">statedClass</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="k">class</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">Class</span> <span class="n">baseClass</span> <span class="o">=</span> <span class="n">object_getClass</span><span class="p">(</span><span class="nb">self</span><span class="p">);</span>
</span><span class='line'>  <span class="bp">NSString</span> <span class="o">*</span><span class="n">className</span> <span class="o">=</span> <span class="n">NSStringFromClass</span><span class="p">(</span><span class="n">baseClass</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Default case. Create dynamic subclass.</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">subclassName</span> <span class="o">=</span> <span class="p">[</span><span class="n">className</span> <span class="nl">stringByAppendingString</span><span class="p">:</span><span class="n">AspectsSubclassSuffix</span><span class="p">].</span><span class="n">UTF8String</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">Class</span> <span class="n">subclass</span> <span class="o">=</span> <span class="n">objc_getClass</span><span class="p">(</span><span class="n">subclassName</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">subclass</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">subclass</span> <span class="o">=</span> <span class="n">objc_allocateClassPair</span><span class="p">(</span><span class="n">baseClass</span><span class="p">,</span> <span class="n">subclassName</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>      <span class="n">aspect_swizzleForwardInvocation</span><span class="p">(</span><span class="n">subclass</span><span class="p">);</span>
</span><span class='line'>      <span class="n">aspect_hookedGetClass</span><span class="p">(</span><span class="n">subclass</span><span class="p">,</span> <span class="n">statedClass</span><span class="p">);</span>
</span><span class='line'>      <span class="n">aspect_hookedGetClass</span><span class="p">(</span><span class="n">object_getClass</span><span class="p">(</span><span class="n">subclass</span><span class="p">),</span> <span class="n">statedClass</span><span class="p">);</span>
</span><span class='line'>      <span class="n">objc_registerClassPair</span><span class="p">(</span><span class="n">subclass</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">object_setClass</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">subclass</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">subclass</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>第11行代码通过运行时的函数objc_allocateClassPair定义了一个新的子类。如果是demo执行到这里的话，生成的子类叫AspectsViewController_Aspects。第12行，将子类的forwardInvocation替换为了自定义的实现函数__ASPECTS_ARE_BEING_CALLED__。第18行，将AspectsViewController实例的isa指针指向了子类AspectsViewController_Aspects。</p>

<p>接着，我们继续看aspect_prepareClassAndHookSelector函数的后半部分。第10行在AspectsViewController_Aspects类添加了一个方法aliasSelector，demo中就是aspect_buttonPressed，它的实现指向了原来AspectsViewController类的buttonPressed的实现。第13行，将AspectsViewController_Aspects类的buttonPressed实现指向了_objc_msgForward，这样调用就会启动oc的消息转发机制。</p>

<p>到这里，Aspects这个库的关键初始化流程就执行完了，我们用下边这个图来描述下当前类和方法实现之间的关系。</p>

<p><a href="https://jason5.cn/images/Aspects.png"><img src="https://jason5.cn/images/Aspects.png" alt="" /></a></p>

<p>Aspects的实现为什么要生成一个原有类的子类，个人理解是为了对原有类产生的影响尽可能小。</p>

<h2>hook后的执行流程</h2>

<p>hook完成后，我们来看下hook后代码的执行流程。</p>

<p><strong>这一段很重要！！！</strong>往AspectsViewController实例发送buttonPressed消息的时候，首先应该去查找实例所对应的类的方法列表，由于AspectsViewController的isa指向了AspectsViewController_Aspects类，就会去AspectsViewController_Aspects类中查找，结果是查找不到buttonPressed实现，然后会去查找父类AspectsViewController的方法列表，这时候查找到了buttonPressed的实现，但是实现是指向了_msg_forward，这样就进入了消息转发流程。按照消息转发流程，系统会调用AspectsViewController_Aspects类的forwardInvocation方法，forwardInvocation方法被我们替换成了自定义实现__ASPECTS_ARE_BEING_CALLED__，最终就进入了这个方法。</p>

<p>__ASPECTS_ARE_BEING_CALLED__的省略后的代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// This is the swizzled forwardInvocation: method.</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">__ASPECTS_ARE_BEING_CALLED__</span><span class="p">(</span><span class="n">__unsafe_unretained</span> <span class="bp">NSObject</span> <span class="o">*</span><span class="nb">self</span><span class="p">,</span> <span class="kt">SEL</span> <span class="n">selector</span><span class="p">,</span> <span class="bp">NSInvocation</span> <span class="o">*</span><span class="n">invocation</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">SEL</span> <span class="n">originalSelector</span> <span class="o">=</span> <span class="n">invocation</span><span class="p">.</span><span class="n">selector</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">SEL</span> <span class="n">aliasSelector</span> <span class="o">=</span> <span class="n">aspect_aliasForSelector</span><span class="p">(</span><span class="n">invocation</span><span class="p">.</span><span class="n">selector</span><span class="p">);</span>
</span><span class='line'>    <span class="n">invocation</span><span class="p">.</span><span class="n">selector</span> <span class="o">=</span> <span class="n">aliasSelector</span><span class="p">;</span>
</span><span class='line'>    <span class="n">AspectsContainer</span> <span class="o">*</span><span class="n">objectContainer</span> <span class="o">=</span> <span class="n">objc_getAssociatedObject</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">aliasSelector</span><span class="p">);</span>
</span><span class='line'>    <span class="n">AspectsContainer</span> <span class="o">*</span><span class="n">classContainer</span> <span class="o">=</span> <span class="n">aspect_getContainerForClass</span><span class="p">(</span><span class="n">object_getClass</span><span class="p">(</span><span class="nb">self</span><span class="p">),</span> <span class="n">aliasSelector</span><span class="p">);</span>
</span><span class='line'>    <span class="n">AspectInfo</span> <span class="o">*</span><span class="n">info</span> <span class="o">=</span> <span class="p">[[</span><span class="n">AspectInfo</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithInstance</span><span class="p">:</span><span class="nb">self</span> <span class="nl">invocation</span><span class="p">:</span><span class="n">invocation</span><span class="p">];</span>
</span><span class='line'>    <span class="bp">NSArray</span> <span class="o">*</span><span class="n">aspectsToRemove</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Before hooks.</span>
</span><span class='line'>    <span class="n">aspect_invoke</span><span class="p">(</span><span class="n">classContainer</span><span class="p">.</span><span class="n">beforeAspects</span><span class="p">,</span> <span class="n">info</span><span class="p">);</span>
</span><span class='line'>    <span class="n">aspect_invoke</span><span class="p">(</span><span class="n">objectContainer</span><span class="p">.</span><span class="n">beforeAspects</span><span class="p">,</span> <span class="n">info</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Instead hooks.</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">respondsToAlias</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">objectContainer</span><span class="p">.</span><span class="n">insteadAspects</span><span class="p">.</span><span class="n">count</span> <span class="o">||</span> <span class="n">classContainer</span><span class="p">.</span><span class="n">insteadAspects</span><span class="p">.</span><span class="n">count</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">aspect_invoke</span><span class="p">(</span><span class="n">classContainer</span><span class="p">.</span><span class="n">insteadAspects</span><span class="p">,</span> <span class="n">info</span><span class="p">);</span>
</span><span class='line'>        <span class="n">aspect_invoke</span><span class="p">(</span><span class="n">objectContainer</span><span class="p">.</span><span class="n">insteadAspects</span><span class="p">,</span> <span class="n">info</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span><span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">Class</span> <span class="n">klass</span> <span class="o">=</span> <span class="n">object_getClass</span><span class="p">(</span><span class="n">invocation</span><span class="p">.</span><span class="n">target</span><span class="p">);</span>
</span><span class='line'>        <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">((</span><span class="n">respondsToAlias</span> <span class="o">=</span> <span class="p">[</span><span class="n">klass</span> <span class="nl">instancesRespondToSelector</span><span class="p">:</span><span class="n">aliasSelector</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>                <span class="p">[</span><span class="n">invocation</span> <span class="n">invoke</span><span class="p">];</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span><span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">respondsToAlias</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">klass</span> <span class="o">=</span> <span class="n">class_getSuperclass</span><span class="p">(</span><span class="n">klass</span><span class="p">)));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// After hooks.</span>
</span><span class='line'>    <span class="n">aspect_invoke</span><span class="p">(</span><span class="n">classContainer</span><span class="p">.</span><span class="n">afterAspects</span><span class="p">,</span> <span class="n">info</span><span class="p">);</span>
</span><span class='line'>    <span class="n">aspect_invoke</span><span class="p">(</span><span class="n">objectContainer</span><span class="p">.</span><span class="n">afterAspects</span><span class="p">,</span> <span class="n">info</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>第7行，对于hook的实例方法，先拿到之前设置的切片代码信息，存储在classContainer里。第24行，通过invocation调用AspectsViewController_Aspects的aspect_buttonPressed方法，由于这个方法已经指向了原来的实现buttonPressed，所以就调用了原始的代码。在这之后，如果Container里有afterAspects，就调用切片的block。beforeAspects同理。</p>

<p>到此为止，就实现了在原来的实例方法执行后，再执行hook插入的block代码。</p>

<h2>总结</h2>

<p>ios的runtime是黑魔法，运用起来可以做很多强大的功能。总的来讲，Aspects利用了ios的method swizzling和消息转发机制forwordInvocation，实现了对函数进行切片hook。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[对JSPatch原理的理解]]></title>
    <link href="http://jason5.cn/blog/dui-jspatchyuan-li-de-li-jie.html"/>
    <updated>2018-11-08T15:08:47+08:00</updated>
    <id>http://jason5.cn/blog/dui-jspatchyuan-li-de-li-jie</id>
    <content type="html"><![CDATA[<p>JSPatch利用OC语言的动态特性，让OC语言根据传入的JS代码，进行动态行为修改，以达到热更新的目的。</p>

<p>项目中根据JSPatch的原理，自己实现了一套简单的热更新方案。以替换方法实现为例，热更新运行的步骤如下：</p>

<p>1.补丁下发阶段</p>

<p>应用启动的时候，会加载下发的补丁js文件，以下这一段热更新代码会被执行。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">replaceMethod</span><span class="p">(</span><span class="s2">&quot;IGTabBarController&quot;</span><span class="p">,</span> <span class="s2">&quot;onNaviBarTaskBoxClick:&quot;</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">invocation</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">log</span><span class="p">(</span><span class="s2">&quot;origin method&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">callOriginMethod</span><span class="p">(</span><span class="nx">invocation</span><span class="p">,</span> <span class="s2">&quot;origin_onNaviBarTaskBoxClick:&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>OC中的JSContext在初始化的时候加载过replaceMethod函数，所以会调用到OC代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">ocReplaceMethod</span><span class="o">:</span><span class="p">(</span><span class="nx">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nx">className</span> <span class="nx">selectorName</span><span class="o">:</span><span class="p">(</span><span class="nx">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nx">selectorName</span> <span class="nx">isClass</span><span class="o">:</span><span class="p">(</span><span class="nx">BOOL</span><span class="p">)</span><span class="nx">isClass</span> <span class="nx">func</span><span class="o">:</span><span class="p">(</span><span class="nx">JSValue</span> <span class="o">*</span><span class="p">)</span><span class="nx">func</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个函数里，做了一个重要的逻辑（这里参考了JSPatch的实现方式），将IGTabBarController的实例方法onNaviBarTaskBoxClick:指向了forwardInvocation:，然后自定义实现PMDForwardInvocation替换forwardInvocation:的行为</p>

<p>2.用户调用阶段</p>

<p>用户操作点击后，IGTabBarController的onNaviBarTaskBoxClick:会被执行，从而PMDForwardInvocation被执行，根据OC的函数转发特性，PMDForwardInvocation会拿到所有的函数参数信息invocation。然后调用<code>jsfunc(@[invocation])</code>。这样就将所有原生参数通过invocation对象传回给了js代码。js代码拿到这些参数就可以去实现任何逻辑了，以达到替换原方法的目的。</p>

<p>总结：这里是一个很重要的技巧，如何将需要动态更新的OC方法的参数全部传给js代码，JSPatch是利用了forwardInvocation的特性。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Express学习笔记(二)-路由]]></title>
    <link href="http://jason5.cn/blog/expressxue-xi-bi-ji-er-lu-you.html"/>
    <updated>2018-11-05T16:08:45+08:00</updated>
    <id>http://jason5.cn/blog/expressxue-xi-bi-ji-er-lu-you</id>
    <content type="html"><![CDATA[<p>这一篇主要介绍路由的用法</p>

<h3>基本用法</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// GET method route</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;GET request to the homepage&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// POST method route</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;POST request to the homepage&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span><span class="s1">&#39;/secret&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Accessing the secret section ...&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">next</span><span class="p">();</span> <span class="c1">// pass control to the next handler</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>all表示接受所有的http方法</p>

<h3>路由路径</h3>

<p>支持正则表达式</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/ab*cd&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;ab*cd&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>此路由路径将匹配 abcd、abxcd、abRABDOMcd、ab123cd 等。</p>

<h3>路由处理顺序</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">cb0</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;CB0&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">next</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">cb1</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;CB1&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">next</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/example/d&#39;</span><span class="p">,</span> <span class="p">[</span><span class="nx">cb0</span><span class="p">,</span> <span class="nx">cb1</span><span class="p">],</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;the response will be sent by the next function ...&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">next</span><span class="p">();</span>
</span><span class='line'><span class="p">},</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;Hello from D!&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以写数组，也可以写多个回调函数参数，挨着执行，前一个函数必须执行<code>next()</code>，否则http请求会挂起</p>

<h3>模块封装</h3>

<p>可以封装一个bird.js模块</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">express</span><span class="p">.</span><span class="nx">Router</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// middleware that is specific to this router</span>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="kd">function</span> <span class="nx">timeLog</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Time: &#39;</span><span class="p">,</span> <span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">());</span>
</span><span class='line'>  <span class="nx">next</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="c1">// define the home page route</span>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;Birds home page&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="c1">// define the about route</span>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/about&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;About birds&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">router</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用模块后，url从外部使用模块开始，接着模块定义的路径，就可以访问</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">birds</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./birds&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;/birds&#39;</span><span class="p">,</span> <span class="nx">birds</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>此时，可以相应<code>/birds</code>和<code>/birds/about</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Express学习笔记(一)-开始]]></title>
    <link href="http://jason5.cn/blog/expressxue-xi-bi-ji.html"/>
    <updated>2018-11-05T15:57:02+08:00</updated>
    <id>http://jason5.cn/blog/expressxue-xi-bi-ji</id>
    <content type="html"><![CDATA[<p>Express是一个基于nodejs的web开发框架。</p>

<h3>Hello World</h3>

<p>1.安装</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir myapp
</span><span class='line'>$ cd myapp
</span><span class='line'>$ npm init
</span><span class='line'>$ npm install express --save</span></code></pre></td></tr></table></div></figure>


<p>2.修改app.js，然后运行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ node app.js</span></code></pre></td></tr></table></div></figure>


<p>打开浏览器，可以看到运行结果了</p>

<h3>脚手架工程</h3>

<p>1.安装express-generator</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ npm install express-generator -g</span></code></pre></td></tr></table></div></figure>


<p>2.生成脚手架工程</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ express --view=pug myapp</span></code></pre></td></tr></table></div></figure>


<p>pug是使用的模板引擎</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd myapp
</span><span class='line'>$ npm install</span></code></pre></td></tr></table></div></figure>


<p>3.运行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ npm start</span></code></pre></td></tr></table></div></figure>


<p>在浏览器里访问。</p>

<h3>路由</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;Hello World!&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>表示根目录相应http get方法</p>

<h3>静态文件</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;/static&#39;</span><span class="p">,</span> <span class="nx">express</span><span class="p">.</span><span class="kr">static</span><span class="p">(</span><span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">&#39;/public&#39;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>public目录下的所有文件可以作为静态资源访问。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TIP项目网络框架梳理]]></title>
    <link href="http://jason5.cn/blog/tipxiang-mu-wang-luo-kuang-jia-shu-li.html"/>
    <updated>2018-10-23T16:07:12+08:00</updated>
    <id>http://jason5.cn/blog/tipxiang-mu-wang-luo-kuang-jia-shu-li</id>
    <content type="html"><![CDATA[<p>前段时间小伙伴重构了项目的网络层代码，将之前的过程式的代码，面向对象化了，职责分离，更易维护。不过也增加了理解成本，这里记录一下。</p>

<p>整个网络模块的类图如下。PMD开头的类下沉到了基础库，IG开头的类仍然在项目中。</p>

<p><a href="https://jason5.cn/images/tip-network-uml.jpg"><img src="https://jason5.cn/images/tip-network-uml.jpg" alt="" /></a></p>

<ul>
<li>IGNetworkManager作为项目中使用网络层的入口类，不多做介绍。</li>
<li>PMDNetworking是发起网络请求的类，这里首先要用PMDCallFactory工厂类，生成一个实现PMDCall协议的对象，然后调用makeCallWithRequest方法进行网络请求。</li>
<li>PMDCallFactory用于生成PMDCall协议对象</li>
<li>PMDCall协议对象为了避免被回收，放到了PMDCallPool里进行管理</li>
<li>PMDBaseCall实现了PMDCall协议，完成了主要的网络请求逻辑。分为以下几个步骤</li>
</ul>


<p>1.callWithRequest准备发起网络请求</p>

<p>2.dealWithInterceptResult遍历所有PMDIntercept，在真正发起网络请求前进行逻辑处理，处理的过程中可以中断。</p>

<p>3.realCallWithRequest真正发起网络请求，这里的实现交给继承类IGCall来实现，具体的实现可以是http，也可以是tcp，在TIP项目中用到了IGNetworkObject去发网路请求。</p>

<p>4.convertResponse将请求回来的数据，遍历PMDConverter进行处理。</p>

<ul>
<li>PMDInterceptor和PMDConverter协议分别是需要在网络请求发出之前和之后要处理的逻辑，只要实现此协议，加入到PMDBaseCall中就可以了。</li>
</ul>


<p>基本的结构就是这样了，除此之外，框架还实现了取消发送，重新发送等逻辑，这里不再详细介绍。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[对iOS App签名的理解]]></title>
    <link href="http://jason5.cn/blog/dui-ios-appqian-ming-de-li-jie.html"/>
    <updated>2018-10-22T11:23:43+08:00</updated>
    <id>http://jason5.cn/blog/dui-ios-appqian-ming-de-li-jie</id>
    <content type="html"><![CDATA[<p>关于iOS设备签名的原理，这篇文章说的比较清楚了。如果忘了的话可以重新阅读以下。</p>

<p><a href="http://blog.cnbang.net/tech/3386/">iOS App 签名的原理</a></p>

<p>这里按照我的理解角度复述一下：</p>

<ol>
<li>为了不让每次开发App，都将App上传到苹果后台，用苹果后台的私钥A签名，需要本地生成一对公私钥。这样每次签名就在本地Mac机器上，用私钥L签名就可以了。</li>
<li>那么苹果如果验证公钥L的合法性呢，就需要开发者将公钥L上传到苹果的后台，苹果用私钥A进行一次签名，签名+公钥L就是证书了。（这里实际上用一次对公钥L的签名替代了每次对App的签名，省去了App每次修改都上传签名的麻烦，很巧妙）</li>
<li>第2步中的证书+一些额外信息（AppId，设备列表，push权限等）全部都在苹果的后台用私钥A签名，打包成的东西叫Provisioning Profile，下载到本地Mac后，打包在App中。安装在iOS设备的时候，用公钥A对其进行解密，验证证书+一些额外信息（AppId，设备列表，push权限等。证书验证后拿到公钥L，对App数据进行解密验证（App是用私钥L签名的）。</li>
</ol>


<p>好了，上边的文字其实看着还是有点乱和绕，权当我自己的思路做参考吧。</p>

<p>回到我们的项目，其实有一点是可以改进的。</p>

<p><img src="https://jason5.cn/images/WX20181022-114418@2x.png" alt="" /></p>

<p>以上图片是我们项目在苹果后台的证书配置，可以看到，有很多项，原因是每个开发的电脑上都生成了一对公钥L和私钥L，然后将公钥L上传到苹果后台生成了证书。更好的办法是，只用一台开发电脑生成公钥L和私钥L，然后到处p12文件，分享给别的电脑，这样苹果后台就只需要一个证书就可以了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DNS配置中A和CNAME的区别]]></title>
    <link href="http://jason5.cn/blog/dnspei-zhi-zhong-ahe-cnamede-qu-bie.html"/>
    <updated>2018-10-20T19:57:40+08:00</updated>
    <id>http://jason5.cn/blog/dnspei-zhi-zhong-ahe-cnamede-qu-bie</id>
    <content type="html"><![CDATA[<p>DNS配置中有两种常见的类型，A和CNAME。</p>

<p>A是name到ip的配置，用于域名解析到最终的接入IP。</p>

<p>CNAME是name到name的配置，用于配置域名的别名。</p>

<p>参考<a href="https://support.dnsimple.com/articles/differences-a-cname-records/">Differences between the A and CNAME records</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github Pages支持https的方法]]></title>
    <link href="http://jason5.cn/blog/github-pageszhi-chi-httpsde-fang-fa.html"/>
    <updated>2018-10-20T19:38:41+08:00</updated>
    <id>http://jason5.cn/blog/github-pageszhi-chi-httpsde-fang-fa</id>
    <content type="html"><![CDATA[<p>到Github Pages项目里，点击Setting，勾选Enforce HTTPS</p>

<p><img src="https://jason5.cn/images/WX20181020-194050@2x.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在新电脑上恢复Octopress]]></title>
    <link href="http://jason5.cn/blog/zai-xin-dian-nao-shang-hui-fu-octopress.html"/>
    <updated>2018-10-18T15:56:46+08:00</updated>
    <id>http://jason5.cn/blog/zai-xin-dian-nao-shang-hui-fu-octopress</id>
    <content type="html"><![CDATA[<p>换了新电脑，如何在新电脑上继续使用OctoPress呢，只需要执行以下命令</p>

<p>1.首先将博客的源文件clone到本地的octopress文件夹内</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone -b source https://github.com/username/username.github.io.git octopress  
</span></code></pre></td></tr></table></div></figure>


<p>2.将博客文件clone到octopress的_deploy文件夹内</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd octopress  
</span><span class='line'>$ git clone https://github.com/username/username.github.io.git _deploy   </span></code></pre></td></tr></table></div></figure>


<p>username为github用户名</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS开发中支持实时UI调试的方法]]></title>
    <link href="http://jason5.cn/blog/ioskai-fa-zhong-zhi-chi-shi-shi-uidiao-shi-de-fang-fa.html"/>
    <updated>2018-10-18T14:02:46+08:00</updated>
    <id>http://jason5.cn/blog/ioskai-fa-zhong-zhi-chi-shi-shi-uidiao-shi-de-fang-fa</id>
    <content type="html"><![CDATA[<h3>背景</h3>

<p>平时在开发iOS界面的过程中，如果修改了布局代码，需要重新启动模拟器，进行效果查看。如果工程较大，启动将耗时比较长，比较浪费时间。这里介绍一个工具InjectionIII，使用后可以不重启应用，保存文件后直接查看修改效果，极大提升界面开发工作的效率。</p>

<h3>使用方法</h3>

<p>1.在App Store下载InjectionIII</p>

<p>2.在应用启动函数 加入以下代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#if DEBUG</span>
</span><span class='line'>    <span class="bp">NSBundle</span> <span class="o">*</span><span class="n">bundle</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSBundle</span> <span class="nl">bundleWithPath</span><span class="p">:</span><span class="s">@&quot;/Applications/InjectionIII.app/Contents/Resources/iOSInjection10.bundle&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">bundle</span> <span class="n">load</span><span class="p">];</span>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure>


<p>3.启动InjectionIII，重启XCode，然后用模拟器启动应用。状态栏上有InjectionIII的小图标，确认File Watcher选项已经勾选。这时候修改文件，只要保存，在模拟器界面上会立即更新效果</p>

<p>PS: 这个工具的缺点是只支持模拟器，原因参见原理部分。</p>

<h3>原理</h3>

<p><a href="https://mp.weixin.qq.com/s?__biz=MjM5NTQ2NzE0NQ==&amp;mid=2247483999&amp;idx=1&amp;sn=bc88d37b6f819bd6bd7d8b76e9787620&amp;chksm=a6f958b9918ed1af9a084ce2c2732aaee715193e37fdb830dc31d8f0174c0314b22dc5c0dd1e&amp;mpshare=1&amp;scene=1&amp;srcid=0612tT8PS1pePiL5EmqMr9HH#rd">Injection：iOS热重载背后的黑魔法</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Weex实现三端开发架构和思路]]></title>
    <link href="http://jason5.cn/blog/yong-weexshi-xian-san-duan-kai-fa-jia-gou-he-si-lu.html"/>
    <updated>2018-08-25T21:59:32+08:00</updated>
    <id>http://jason5.cn/blog/yong-weexshi-xian-san-duan-kai-fa-jia-gou-he-si-lu</id>
    <content type="html"><![CDATA[<p>基于目前项目的已有架构，若要实现Weex三端开发，设计的架构如下图：</p>

<p><a href="http://jason5.cn/images/weex-http-proxy.png"><img src="http://jason5.cn/images/weex-http-proxy.png" alt="" /></a></p>

<p>1.iOS和Android客户端维持tcp+pb方式不变</p>

<p>2.新增http proxy模块，提供http接口给Weex h5访问</p>

<p>职责是将已有的tcp+pb方式访问的服务转换成http+json形式，提供给Weex h5调用。目前http proxy用java实现，与Android客户端网络层复用代码。</p>

<p>3.改造svr接入层，验证Weex h5登录态，进行openid转换</p>

<p>以微信登录为例，之前iOS和Android用的是App授权登录，由于Weex h5是微信公众号授权登录，两者appid不同，授权得到的openid和accesstoken都不一样，需要支持对公众号进行登录校验。校验完登录态后，将公众号openid转换为App openid，再与svr逻辑层进行通信。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Weex与原生页面间的相互跳转]]></title>
    <link href="http://jason5.cn/blog/weexyu-yuan-sheng-ye-mian-jian-de-xiang-hu-tiao-zhuan.html"/>
    <updated>2018-04-09T15:33:36+08:00</updated>
    <id>http://jason5.cn/blog/weexyu-yuan-sheng-ye-mian-jian-de-xiang-hu-tiao-zhuan</id>
    <content type="html"><![CDATA[<p>我们在现有应用中集成Weex，难免会遇到Weex页面与原生页面相互跳转的问题。通常的一种场景是，某一个中间的原生页面我们用Weex来替换，这样就存在原生页面跳转到Weex页面，再由Weex页面跳转到原生页面的场景。这篇文章讲述如何实现这种场景。</p>

<!--more-->


<h3>1. 原生页面跳转到Weex页面</h3>

<p>这个其实很简单。首先需要知道的是，Weex页面其实也是一个原生页面，只是这个原生页面的View是由Weex渲染出来的而已。所以这一步实际上是原生页面跳原生页面，用navigationController的push方法就可以了。代码如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">IGWeexDemoViewController</span> <span class="o">*</span><span class="n">vc</span> <span class="o">=</span> <span class="p">[</span><span class="n">IGWeexDemoViewController</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="p">[[</span><span class="n">CPBaseViewController</span> <span class="n">currentViewController</span><span class="p">].</span><span class="n">navigationController</span> <span class="nl">pushViewController</span><span class="p">:</span><span class="n">vc</span> <span class="nl">animated</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2. Weex页面跳转到原生页面</h3>

<p>Weex要跳回原生页面，是需要借用原生代码的能力的。实现方式就是自定义Module，Weex将需要跳转的页面和参数传递个Module，然后Module利用原生代码，控制navigationController进行跳转。</p>

<p>首先自定义跳转的Module，代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@implementation</span> <span class="nc">WXNavigationModule</span>
</span><span class='line'>
</span><span class='line'><span class="n">WX_EXPORT_METHOD</span><span class="p">(</span><span class="k">@selector</span><span class="p">(</span><span class="nl">navigationToUrl</span><span class="p">:))</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">navigationToUrl</span><span class="p">:(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">url</span><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">IGJumpMediator</span> <span class="nl">jumpActionWithUrl</span><span class="p">:</span><span class="n">url</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">CPBaseViewController</span> <span class="n">currentViewController</span><span class="p">].</span><span class="n">navigationController</span> <span class="nl">setNavigationBarHidden</span><span class="p">:</span><span class="nb">NO</span> <span class="nl">animated</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>关键在方法中的第一行代码 [IGJumpMediator jumpActionWithUrl:url]，通过拿到Weex里传递进来的参数url，进行解析，然后利用Runtime机制，通过字符串得到要跳转的ViewController类，然后再设置需要的初始化参数，最后push就可以了。方法具体的代码实现这里不再赘述。</p>

<p>第二行代码是设置了导航栏为显示，下边的篇幅讲下为什么要这样设置。</p>

<h3>3. Weex页面中的自定义导航栏实现</h3>

<p>Weex页面我没有用原生的导航栏，而是参考了一些资料和代码自己实现了导航栏，主要的原则是，一切可以在Weex中实现的，都放在Weex中，不放在原生代码中，这样可以更好的进行跨平台代码复用。</p>

<p>原生跳转到Weex的时候，先隐藏原生里的导航栏。Weex调回原生的时候，在显示原生导航栏。所以有了上边那一行代码。</p>

<p>在Weex中实现导航栏，最好封装成一个组件，这样方便所有页面一起复用。以下是导航栏NavigationBar.vue的代码。</p>

<p>模板部分</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;template&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div&gt;</span>
</span><span class='line'>        <span class="c">&lt;!--iPhoneX --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;iPhoneXDiv navbar&quot;</span> <span class="na">v-if=</span><span class="s">&quot;isiPhoneX&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>        <span class="c">&lt;!--其他iOS设备 --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;iOSDiv navbar&quot;</span> <span class="na">v-else-if=</span><span class="s">&quot;isiOS&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>        <span class="c">&lt;!--安卓设备 --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;android navbar&quot;</span> <span class="na">v-else-if=</span><span class="s">&quot;isAndroid&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;subviews&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="c">&lt;!--Title--&gt;</span>
</span><span class='line'>            <span class="nt">&lt;text</span> <span class="na">class=</span><span class="s">&quot;titletext&quot;</span><span class="nt">&gt;</span><span class="nt">&lt;/text&gt;</span>
</span><span class='line'>            <span class="c">&lt;!--左边图片--&gt;</span>
</span><span class='line'>            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;left&quot;</span> <span class="err">@</span><span class="na">click=</span><span class="s">&quot;leftButtonClicked&quot;</span> <span class="na">v-if=</span><span class="s">&quot;showLeft&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;image</span> <span class="na">src=</span><span class="s">&quot;local:///team_navi_back@2x.png&quot;</span> <span class="na">class=</span><span class="s">&quot;left-button&quot;</span><span class="nt">&gt;&lt;/image&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;right&quot;</span> <span class="err">@</span><span class="na">click=</span><span class="s">&quot;rightButtonClicked&quot;</span> <span class="na">v-if=</span><span class="s">&quot;showRight&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="c">&lt;!--如果显示右边item ， 图片或者文字 2选1 --&gt;</span>
</span><span class='line'>                <span class="nt">&lt;text</span> <span class="na">class=</span><span class="s">&quot;right-text&quot;</span> <span class="na">v-if=</span><span class="s">&quot;rightText&quot;</span><span class="nt">&gt;</span><span class="nt">&lt;/text&gt;</span>
</span><span class='line'>                <span class="nt">&lt;image</span> <span class="na">:src=</span><span class="s">&quot;rightImage&quot;</span> <span class="na">class=</span><span class="s">&quot;left-button&quot;</span> <span class="na">v-if=</span><span class="s">&quot;rightImage&quot;</span><span class="nt">&gt;&lt;/image&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/template&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>样式部分</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="o">&lt;</span><span class="nt">style</span> <span class="nt">scoped</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="nc">.iPhoneXDiv</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">height</span><span class="o">:</span> <span class="m">86px</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nc">.iOSDiv</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">height</span><span class="o">:</span> <span class="m">38px</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nc">.android</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">height</span><span class="o">:</span> <span class="m">0px</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nc">.navbar</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">width</span><span class="o">:</span> <span class="m">750px</span><span class="p">;</span>
</span><span class='line'>        <span class="k">top</span><span class="o">:</span> <span class="m">0px</span><span class="p">;</span>
</span><span class='line'>        <span class="k">left</span><span class="o">:</span> <span class="m">0px</span><span class="p">;</span>
</span><span class='line'>        <span class="k">background-color</span><span class="o">:</span> <span class="m">#1A1B2F</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">/*大佈局样式*/</span>
</span><span class='line'>    <span class="nc">.subviews</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">height</span><span class="o">:</span> <span class="m">90px</span><span class="p">;</span>
</span><span class='line'>        <span class="k">width</span><span class="o">:</span> <span class="m">750px</span><span class="p">;</span>
</span><span class='line'>        <span class="k">left</span><span class="o">:</span> <span class="m">0px</span><span class="p">;</span>
</span><span class='line'>        <span class="k">background-color</span><span class="o">:</span> <span class="m">#1A1B2F</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">/*中间文字样式*/</span>
</span><span class='line'>    <span class="nc">.titletext</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">font-size</span><span class="o">:</span> <span class="m">36px</span><span class="p">;</span>
</span><span class='line'>        <span class="k">color</span><span class="o">:</span> <span class="nb">white</span><span class="p">;</span>
</span><span class='line'>        <span class="k">position</span><span class="o">:</span> <span class="k">relative</span><span class="p">;</span>
</span><span class='line'>        <span class="k">width</span><span class="o">:</span> <span class="m">750px</span><span class="p">;</span>
</span><span class='line'>        <span class="k">height</span><span class="o">:</span> <span class="m">90px</span><span class="p">;</span>
</span><span class='line'>        <span class="k">text-align</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
</span><span class='line'>        <span class="k">line-height</span><span class="o">:</span> <span class="m">90px</span><span class="p">;</span>
</span><span class='line'>        <span class="k">bottom</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">/*左边图片*/</span>
</span><span class='line'>    <span class="nc">.left</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">justify</span><span class="o">-</span><span class="k">content</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
</span><span class='line'>        <span class="k">position</span><span class="o">:</span> <span class="k">absolute</span><span class="p">;</span>
</span><span class='line'>        <span class="n">align</span><span class="o">-</span><span class="n">items</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
</span><span class='line'>        <span class="n">flex</span><span class="o">:</span> <span class="m">1</span><span class="p">;</span>
</span><span class='line'>        <span class="k">height</span><span class="o">:</span> <span class="m">90px</span><span class="p">;</span>
</span><span class='line'>        <span class="k">left</span><span class="o">:</span> <span class="m">30px</span><span class="p">;</span>
</span><span class='line'>        <span class="k">bottom</span><span class="o">:</span> <span class="m">0px</span><span class="p">;</span>
</span><span class='line'>        <span class="k">width</span><span class="o">:</span> <span class="m">50px</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">/*图片按钮*/</span>
</span><span class='line'>    <span class="nc">.left-button</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">width</span><span class="o">:</span> <span class="m">50px</span><span class="p">;</span>
</span><span class='line'>        <span class="k">height</span><span class="o">:</span> <span class="m">50px</span><span class="p">;</span>
</span><span class='line'>        <span class="c">/*margin-left: 40px;*/</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">/*右边图片*/</span>
</span><span class='line'>    <span class="nc">.right</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">justify</span><span class="o">-</span><span class="k">content</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
</span><span class='line'>        <span class="k">position</span><span class="o">:</span> <span class="k">absolute</span><span class="p">;</span>
</span><span class='line'>        <span class="n">align</span><span class="o">-</span><span class="n">items</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
</span><span class='line'>        <span class="n">flex</span><span class="o">:</span> <span class="m">1</span><span class="p">;</span>
</span><span class='line'>        <span class="k">height</span><span class="o">:</span> <span class="m">90px</span><span class="p">;</span>
</span><span class='line'>        <span class="k">right</span><span class="o">:</span> <span class="m">20px</span><span class="p">;</span>
</span><span class='line'>        <span class="k">bottom</span><span class="o">:</span> <span class="m">0px</span><span class="p">;</span>
</span><span class='line'>        <span class="k">width</span><span class="o">:</span> <span class="m">50px</span><span class="p">;</span>
</span><span class='line'>        <span class="c">/*background-color: white;*/</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">/*右边文字*/</span>
</span><span class='line'>    <span class="nc">.right-text</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">font-size</span><span class="o">:</span> <span class="m">30px</span><span class="p">;</span>
</span><span class='line'>        <span class="k">color</span><span class="o">:</span> <span class="nb">white</span><span class="p">;</span>
</span><span class='line'>        <span class="k">position</span><span class="o">:</span> <span class="k">absolute</span><span class="p">;</span>
</span><span class='line'>        <span class="k">right</span><span class="o">:</span> <span class="m">20px</span><span class="p">;</span>
</span><span class='line'>        <span class="k">width</span><span class="o">:</span> <span class="m">100px</span><span class="p">;</span>
</span><span class='line'>        <span class="k">height</span><span class="o">:</span><span class="m">90px</span><span class="p">;</span>
</span><span class='line'>        <span class="k">text-align</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
</span><span class='line'>        <span class="k">bottom</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nt">style</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>js代码部分</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">device</span> <span class="o">=</span> <span class="nx">weex</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">env</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">Navigator</span> <span class="o">=</span> <span class="nx">weex</span><span class="p">.</span><span class="nx">requireModule</span><span class="p">(</span><span class="s1">&#39;navigator&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span><span class='line'>    <span class="cm">/*props 属性列表*/</span>
</span><span class='line'>    <span class="nx">props</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="cm">/*返回图片*/</span>
</span><span class='line'>        <span class="nx">leftImage</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">type</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span><span class='line'>            <span class="k">default</span><span class="o">:</span> <span class="s2">&quot;img/other/backbtn.png&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="cm">/*Title*/</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">titleText</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">type</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span><span class='line'>            <span class="k">default</span><span class="o">:</span> <span class="s2">&quot;Title&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="cm">/*是否显示左边图片*/</span>
</span><span class='line'>        <span class="nx">showLeft</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">type</span><span class="o">:</span> <span class="nb">Boolean</span><span class="p">,</span>
</span><span class='line'>            <span class="k">default</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="cm">/*showLeft=true时,左边是否是点击返回事件，否，则显示其他图片，重新给leftImage属性赋值*/</span>
</span><span class='line'>        <span class="nx">isBack</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">type</span><span class="o">:</span> <span class="nb">Boolean</span><span class="p">,</span>
</span><span class='line'>            <span class="k">default</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="cm">/*是否显示右边item*/</span>
</span><span class='line'>        <span class="nx">showRight</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">type</span><span class="o">:</span> <span class="nb">Boolean</span><span class="p">,</span>
</span><span class='line'>            <span class="k">default</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="cm">/*右边文字*/</span>
</span><span class='line'>        <span class="nx">rightText</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">type</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span><span class='line'>            <span class="k">default</span><span class="o">:</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/*右边图片*/</span>
</span><span class='line'>        <span class="nx">rightImage</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">type</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span><span class='line'>            <span class="k">default</span><span class="o">:</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">isiPhoneX</span><span class="o">:</span> <span class="p">(</span><span class="nx">device</span><span class="p">.</span><span class="nx">platform</span> <span class="o">===</span> <span class="s1">&#39;iOS&#39;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">device</span><span class="p">.</span><span class="nx">deviceWidth</span> <span class="o">===</span> <span class="mi">1125</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">device</span><span class="p">.</span><span class="nx">deviceHeight</span> <span class="o">===</span> <span class="mi">2436</span><span class="p">),</span>
</span><span class='line'>            <span class="nx">isiOS</span><span class="o">:</span> <span class="p">(</span><span class="nx">device</span><span class="p">.</span><span class="nx">platform</span> <span class="o">===</span> <span class="s1">&#39;iOS&#39;</span><span class="p">),</span>
</span><span class='line'>            <span class="nx">isAndroid</span><span class="o">:</span> <span class="p">(</span><span class="nx">device</span><span class="p">.</span><span class="nx">platform</span> <span class="o">===</span> <span class="s1">&#39;android&#39;</span><span class="p">),</span>
</span><span class='line'>            <span class="nx">TitleText</span><span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//左边点击事件</span>
</span><span class='line'>        <span class="nx">leftButtonClicked</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">showLeft</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">isBack</span><span class="p">)</span>  <span class="c1">//点击pop返回</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;click back&#39;</span><span class="p">);</span>
</span><span class='line'>                    <span class="nx">Navigator</span><span class="p">.</span><span class="nx">pop</span><span class="p">({},</span> <span class="nx">e</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>                    <span class="p">});</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">else</span> <span class="c1">//其他操作</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;LeftItemClicked&#39;</span><span class="p">);</span>
</span><span class='line'>                    <span class="k">this</span><span class="p">.</span><span class="nx">$emit</span><span class="p">(</span><span class="s1">&#39;LeftItemClicked&#39;</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="c1">//右边点击事件</span>
</span><span class='line'>        <span class="nx">rightButtonClicked</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">showRight</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;RightItemClicked&#39;</span><span class="p">);</span>
</span><span class='line'>                <span class="k">this</span><span class="p">.</span><span class="nx">$emit</span><span class="p">(</span><span class="s1">&#39;RightItemClicked&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>导航栏支持设置标题，左边和右边部分的显隐，左图片，右图片和右文字。对不同的平台做了下适配。</p>

<p>调用的时候比较简单，在页面头部加上如下代码就可以了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">NavBar</span>
</span><span class='line'>    <span class="o">:</span><span class="nx">show</span><span class="o">-</span><span class="nx">left</span><span class="o">=</span><span class="s2">&quot;true&quot;</span>
</span><span class='line'>    <span class="o">:</span><span class="nx">title</span><span class="o">-</span><span class="nx">text</span><span class="o">=</span><span class="s2">&quot;titleText&quot;</span>
</span><span class='line'>    <span class="o">:</span><span class="nx">show</span><span class="o">-</span><span class="nx">right</span><span class="o">=</span><span class="s2">&quot;false&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/NavBar&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>4.效果</h3>

<p>最后看一下效果，看得出来哪部分是原生实现，哪部分是Weex实现吗
<a href="http://jason5.cn/images/weex-navi-demo.gif"><img src="http://jason5.cn/images/weex-navi-demo.gif" alt="" /></a></p>

<hr />

<p>参考资料</p>

<ul>
<li><a href="https://www.jianshu.com/p/e9bbd8a2244a">Weex系列（1）-App端自定义导航条</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用Weex DevTool调试Native应用-iOS篇]]></title>
    <link href="http://jason5.cn/blog/li-yong-weex-devtooldiao-shi-nativeying-yong-iospian.html"/>
    <updated>2018-04-03T17:48:04+08:00</updated>
    <id>http://jason5.cn/blog/li-yong-weex-devtooldiao-shi-nativeying-yong-iospian</id>
    <content type="html"><![CDATA[<p>官方的文档里说提供了一个工具DevTool，用来调试原生应用，但是写得比较简略，一直跑不起来，经过几天折腾和查资料，基本上是可以调试了，记录一下步骤和问题。</p>

<!--more-->


<h3>1. 先在本机安装iOS的调试工具</h3>

<p>工具地址是 <a href="https://github.com/weexteam/weex-devtool-iOS">https://github.com/weexteam/weex-devtool-iOS</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">npm</span> <span class="nx">install</span> <span class="o">-</span><span class="nx">g</span> <span class="nx">weex</span><span class="o">-</span><span class="nx">devtool</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行调试工具weex-devtool，启动成功后，在终端命令行里会显示如下两行信息。</p>

<p><a href="http://jason5.cn/images/QQ20180403-181423.png"><img src="http://jason5.cn/images/QQ20180403-181423.png" alt="" /></a></p>

<p>Websocket Address For Native是调试工具暴露的一个websocket地址，用于和Native之间的双向通信，之后Native中的代码会用到。
Debug Server是调试工具提供的一个web服务地址，开发者通过这个网页可以像调试web页面一样，来调试Native应用。</p>

<h3>2. 将WXDevTool集成到项目工程中</h3>

<p>增加podfile文件，只在Debug模式下集成WXDevtool</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">pod</span> <span class="s1">&#39;WXDevtool&#39;</span><span class="p">,</span>   <span class="s1">&#39;0.15.3&#39;</span><span class="p">,</span> <span class="o">:</span><span class="nx">configurations</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;Debug&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里遇到两个问题</p>

<p>（1）集成后编不过，根据提示发现这个库和项目里用到的FLEX有冲突，所以暂时去掉了FLEX。希望后续升级版本能解决这两个库之间的冲突。</p>

<p>（2）发现还编不过，是需要再集成一个依赖库SocketRocket</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">pod</span> <span class="s1">&#39;SocketRocket&#39;</span><span class="p">,</span> <span class="s1">&#39;0.4.2&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3. 在App启动的时候加入如下代码</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">WXDevTool</span> <span class="nl">setDebug</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">WXDevTool</span> <span class="nl">launchDevToolDebugWithUrl</span><span class="p">:</span><span class="s">@&quot;ws://10.32.194.33:8088/debugProxy/native&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>
这里launchDevToolDebugWithUrl函数需要传一个参数，就是在第一步中的websocket地址。</p>

<h3>4. 开始调试</h3>

<p>如果之前一切顺利的话，现在就可以调试了。网页打开调试地址<a href="http://10.32.194.33:8088">http://10.32.194.33:8088</a>  <br/>
启动Native App，然后会看到我们的App信息出现在网页中。</p>

<p><a href="http://jason5.cn/images/QQ20180403-182830.png"><img src="http://jason5.cn/images/QQ20180403-182830.png" alt="" /></a></p>

<p>可以看到下边两个黑色的大按钮，是调试工具提供的两个功能，Debugger和Inspector。
Debugger用来调试js代码。在里边可以给代码设置断点，观察变量值，查看console.log的输出，跟Web开发一样的体验。</p>

<p><a href="http://jason5.cn/images/QQ20180403-193719.png"><img src="http://jason5.cn/images/QQ20180403-193719.png" alt="" /></a></p>

<p>Inspector用来调试UI界面。这里可以看到界面的树形结构，可以直接修改位置等属性，可以实时看到效果。这里如果在终端操作页面，浏览器里的页面也是会实时刷新的。</p>

<p><a href="http://jason5.cn/images/QQ20180403-193917.png"><img src="http://jason5.cn/images/QQ20180403-193917.png" alt="" /></a></p>

<p>这里遇到了一个问题，启动App后，必须首先进入Debugger页面打开调试工具，Native里的weex页面才能被正常渲染和执行，暂时还没搞清楚原因。</p>

<h3>5.总结</h3>

<p>调试工具可以让开发Native的时候，像Web开发一样去调试，一定程度上提高了效率，对熟悉Web开发的同学来讲，应该能很快上手。</p>

<p>PS：下一篇文章会讲一下原生页面和weex页面之间的跳转以及在weex中如何自定义导航栏。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Weex中js和Native的交互-iOS篇]]></title>
    <link href="http://jason5.cn/blog/weexzhong-jshe-nativede-jiao-hu-iospian.html"/>
    <updated>2018-03-27T11:21:56+08:00</updated>
    <id>http://jason5.cn/blog/weexzhong-jshe-nativede-jiao-hu-iospian</id>
    <content type="html"><![CDATA[<p>终端集成Weex后，看了下js调用Native的方法，做了个展示列表的demo，做下记录。</p>

<p><img src="http://jason5.cn/images/QQ20180327-105246.png" alt="" /></p>

<!--more-->


<h2>Native端</h2>

<p>要实现Weex调用Native，需要实现自定义的module，暴露相应的方法，并且注册。完成这个过程后，js里可以直接注册过的module中的方法，并且通过callback拿到返回结果。下边以weex调用native的网络模块获取数据并进行展示的例子，进行介绍。</p>

<h3>1. 实现WXModuleProtocol协议</h3>

<p>自定义module，需要实现WXModuleProtocol协议</p>

<p>WXCustomNetworkModule.h</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">WXCustomNetworkModule</span> : <span class="bp">NSObject</span><span class="o">&lt;</span><span class="n">WXModuleProtocol</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2. 实现网络请求数据的方法，并且暴露给js</h3>

<p>WXCustomNetworkModule.m</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">WXCustomNetworkModule</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">merchants</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">copy</span><span class="p">)</span> <span class="bp">NSString</span> <span class="o">*</span><span class="n">pageIndex</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">WXCustomNetworkModule</span>
</span><span class='line'>
</span><span class='line'><span class="n">WX_EXPORT_METHOD</span><span class="p">(</span><span class="k">@selector</span><span class="p">(</span><span class="nl">getMerchantList</span><span class="p">:))</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">getMerchantList</span><span class="p">:(</span><span class="n">WXModuleCallback</span><span class="p">)</span><span class="n">callback</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">TipCredit_QueryMerchantCreditListReq</span> <span class="o">*</span><span class="n">req</span> <span class="o">=</span> <span class="p">[[</span><span class="n">TipCredit_QueryMerchantCreditListReq</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="n">req</span><span class="p">.</span><span class="n">userLng</span> <span class="o">=</span> <span class="p">[</span><span class="n">CPLocationAPI</span> <span class="n">getLongitude</span><span class="p">];</span>
</span><span class='line'>    <span class="n">req</span><span class="p">.</span><span class="n">userLat</span> <span class="o">=</span> <span class="p">[</span><span class="n">CPLocationAPI</span> <span class="n">getLatitude</span><span class="p">];</span>
</span><span class='line'>    <span class="n">req</span><span class="p">.</span><span class="n">pageidx</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">pageIndex</span><span class="p">;</span>
</span><span class='line'>    <span class="n">req</span><span class="p">.</span><span class="n">num</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">@</span><span class="n">weakify</span><span class="p">(</span><span class="nb">self</span><span class="p">);</span>
</span><span class='line'>    <span class="p">[</span><span class="n">TipNetWorkManager</span> <span class="nl">requestWithReq</span><span class="p">:</span><span class="n">req</span> <span class="nl">withRspClass</span><span class="p">:[</span><span class="n">TipCredit_QueryMerchantCreditListRsp</span> <span class="k">class</span><span class="p">]</span> <span class="nl">withCmd</span><span class="p">:</span><span class="mi">90086</span> <span class="nl">successBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="kt">id</span> <span class="n">respondObjc</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">@</span><span class="n">strongify</span><span class="p">(</span><span class="nb">self</span><span class="p">);</span>
</span><span class='line'>        <span class="n">TipCredit_QueryMerchantCreditListRsp</span> <span class="o">*</span><span class="n">rsp</span> <span class="o">=</span> <span class="p">(</span><span class="n">TipCredit_QueryMerchantCreditListRsp</span> <span class="o">*</span><span class="p">)</span><span class="n">respondObjc</span><span class="p">;</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">pageIndex</span> <span class="o">=</span> <span class="n">rsp</span><span class="p">.</span><span class="n">pageidx</span><span class="p">;</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">merchants</span> <span class="nl">addObjectsFromArray</span><span class="p">:</span><span class="n">rsp</span><span class="p">.</span><span class="n">merchantcreditsArray</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="nb">self</span><span class="p">.</span><span class="n">merchants</span><span class="p">.</span><span class="n">count</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">merchants</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">merchants</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="n">toJson</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">callback</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">merchants</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span> <span class="nl">failedBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="kt">id</span> <span class="n">failedMsg</span><span class="p">,</span> <span class="kt">int</span> <span class="n">resultCode</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">@</span><span class="n">strongify</span><span class="p">(</span><span class="nb">self</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>getMerchantList是发送网络请求获取后台数据的方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">WX_EXPORT_METHOD</span><span class="p">(</span><span class="k">@selector</span><span class="p">(</span><span class="nl">getMerchantList</span><span class="p">:))</span>
</span></code></pre></td></tr></table></div></figure>


<p>这行代码可以将此函数暴露给js调用。</p>

<h3>3. 初始化的时候注册自定义module，并且指定module name</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">WXSDKEngine</span> <span class="nl">registerModule</span><span class="p">:</span><span class="s">@&quot;network&quot;</span> <span class="nl">withClass</span><span class="p">:[</span><span class="n">WXCustomNetworkModule</span> <span class="k">class</span><span class="p">]];</span>
</span></code></pre></td></tr></table></div></figure>


<p>module name命名为network，表示网络模块。</p>

<h3>4. js拿到回调数据</h3>

<p>实现的方法，在最后可以加一个WXModuleCallback类型的callback参数</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">callback</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">merchants</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过这行代码将结果回调给js。回调的参数类型支持NSString, NSArray, NSDictionary。所以这里回调之前，将网络返回的自定义类转换成了NSDictionary，再进行回调。</p>

<h2>js端</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">template</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">list</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;list&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">cell</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;cell&quot;</span> <span class="nx">v</span><span class="o">-</span><span class="k">for</span><span class="o">=</span><span class="s2">&quot;merchant in lists&quot;</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;panel&quot;</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">text</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;text&quot;</span><span class="o">&gt;</span><span class="p"></span><span class="o">&lt;</span><span class="err">/text&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="err">/cell&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/list&gt; </span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/template&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;App&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">components</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">HelloWorld</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">data</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">logo</span> <span class="o">:</span> <span class="s1">&#39;https://gw.alicdn.com/tfs/TB1yopEdgoQMeJjy1XaXXcSsFXa-640-302.png&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">lists</span> <span class="o">:</span> <span class="p">[]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">created</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span>
</span><span class='line'>    <span class="nx">weex</span><span class="p">.</span><span class="nx">requireModule</span><span class="p">(</span><span class="s1">&#39;network&#39;</span><span class="p">).</span><span class="nx">getMerchantList</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">rsp</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">self</span><span class="p">.</span><span class="nx">lists</span> <span class="o">=</span> <span class="nx">rsp</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>index.vue的关键代码如上。created方法在页面创建时候会执行。通过</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">weex</span><span class="p">.</span><span class="nx">requireModule</span><span class="p">(</span><span class="s1">&#39;network&#39;</span><span class="p">).</span><span class="nx">getMerchantList</span>
</span></code></pre></td></tr></table></div></figure>


<p>这行代码，调用原生网络模块，并且拿到回调数据进行展示。</p>

<h2>总结</h2>

<p>本文介绍了Weex中js与Native的交互方式。通过此方法，界面部分完全可以在js里实现，iOS和Android双端只写一份，原生部分只需要提供负责网络请求的module就可以了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[集成Weex到现有应用-iOS篇]]></title>
    <link href="http://jason5.cn/blog/ji-cheng-weexdao-xian-you-ying-yong-iospian.html"/>
    <updated>2018-03-26T11:48:50+08:00</updated>
    <id>http://jason5.cn/blog/ji-cheng-weexdao-xian-you-ying-yong-iospian</id>
    <content type="html"><![CDATA[<p>最近看了一下weex，将weex集成到了现有的iOS APP里，并且实现了一个静态页面的展示，做下记录。</p>

<!--more-->


<h2>一. 现有iOS应用的修改</h2>

<h3>1. 用cocopods引入WeexSDK</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pod <span class="s1">&#39;WeexSDK&#39;</span>, <span class="s1">&#39;0.18.0&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2. 在iOS APP里初始化Weex</h3>

<p>didFinishLaunchingWithOptions里添加代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//business configuration</span>
</span><span class='line'><span class="p">[</span><span class="n">WXAppConfiguration</span> <span class="nl">setAppGroup</span><span class="p">:</span><span class="s">@&quot;TencentApp&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">WXAppConfiguration</span> <span class="nl">setAppName</span><span class="p">:</span><span class="s">@&quot;TIP&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">WXAppConfiguration</span> <span class="nl">setAppVersion</span><span class="p">:</span><span class="s">@&quot;1.0.0&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//init sdk environment</span>
</span><span class='line'><span class="p">[</span><span class="n">WXSDKEngine</span> <span class="n">initSDKEnvironment</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//register custom module and component，optional</span>
</span><span class='line'><span class="c1">//这里暂时用不到，之后再说</span>
</span><span class='line'><span class="c1">//[WXSDKEngine registerComponent:@&quot;MyView&quot; withClass:[MyViewComponent class]];</span>
</span><span class='line'><span class="c1">//[WXSDKEngine registerModule:@&quot;event&quot; withClass:[WXEventModule class]];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//register the implementation of protocol, optional</span>
</span><span class='line'><span class="c1">//如果在weex页面里需要下载网络图片，需要自己实现协议，如果没有，可以注释掉</span>
</span><span class='line'><span class="p">[</span><span class="n">WXSDKEngine</span> <span class="nl">registerHandler</span><span class="p">:[</span><span class="n">WXImgLoaderDefaultImpl</span> <span class="n">new</span><span class="p">]</span> <span class="nl">withProtocol</span><span class="p">:@</span><span class="n">protocol</span><span class="p">(</span><span class="n">WXImgLoaderProtocol</span><span class="p">)];</span>
</span><span class='line'><span class="c1">//set the log level</span>
</span><span class='line'><span class="p">[</span><span class="n">WXLog</span> <span class="nl">setLogLevel</span><span class="p">:</span> <span class="n">WXLogLevelAll</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3. 在业务相关页面用weex渲染原生View</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">IGWeexDemoViewController</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="n">WXSDKInstance</span> <span class="o">*</span><span class="n">instance</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="bp">UIView</span> <span class="o">*</span><span class="n">weexView</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="bp">NSString</span> <span class="o">*</span><span class="n">url</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">IGWeexDemoViewController</span>
</span><span class='line'>
</span><span class='line'><span class="p">-(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//    self.url = @&quot;http://10.66.212.209:8081/dist/index.js&quot;;</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">url</span> <span class="o">=</span> <span class="s">@&quot;http://weex-1251917893.cosgz.myqcloud.com/index.js&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">_instance</span> <span class="o">=</span> <span class="p">[[</span><span class="n">WXSDKInstance</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="n">_instance</span><span class="p">.</span><span class="n">viewController</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'>    <span class="n">_instance</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">__weak</span> <span class="k">typeof</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="n">weakSelf</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'>    <span class="n">_instance</span><span class="p">.</span><span class="n">onCreate</span> <span class="o">=</span> <span class="o">^</span><span class="p">(</span><span class="bp">UIView</span> <span class="o">*</span><span class="n">view</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">weakSelf</span><span class="p">.</span><span class="n">weexView</span> <span class="n">removeFromSuperview</span><span class="p">];</span>
</span><span class='line'>        <span class="n">weakSelf</span><span class="p">.</span><span class="n">weexView</span> <span class="o">=</span> <span class="n">view</span><span class="p">;</span>
</span><span class='line'>        <span class="p">[</span><span class="n">weakSelf</span><span class="p">.</span><span class="n">view</span> <span class="nl">addSubview</span><span class="p">:</span><span class="n">weakSelf</span><span class="p">.</span><span class="n">weexView</span><span class="p">];</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">_instance</span><span class="p">.</span><span class="n">onFailed</span> <span class="o">=</span> <span class="o">^</span><span class="p">(</span><span class="bp">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//process failure</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">_instance</span><span class="p">.</span><span class="n">renderFinish</span> <span class="o">=</span> <span class="o">^</span> <span class="p">(</span><span class="bp">UIView</span> <span class="o">*</span><span class="n">view</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//process renderFinish</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="p">[</span><span class="n">_instance</span> <span class="nl">renderWithURL</span><span class="p">:[</span><span class="bp">NSURL</span> <span class="nl">URLWithString</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">url</span><span class="p">]];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">dealloc</span><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">_instance</span> <span class="n">destroyInstance</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>4. 运行效果</h3>

<p><img src="http://jason5.cn/images/QQ20180326-114148.png" alt="" /></p>

<h2>二. 生成js文件</h2>

<p>在第一张的第3节中，原生View通过加载一个js文件，然后用Weex SDK进行渲染。这一章介绍js文件的生成方法。</p>

<h3>1. 安装node</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install node
</span></code></pre></td></tr></table></div></figure>


<h3>2. 安装weex-toolkit</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>npm install -g weex-toolkit
</span></code></pre></td></tr></table></div></figure>


<h3>3. 初始化weex工程</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>weex create awesome-project
</span></code></pre></td></tr></table></div></figure>


<p>然后在项目根目录运行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>npm install
</span></code></pre></td></tr></table></div></figure>


<p>安装项目依赖</p>

<h3>4. 生成原生用到的js文件</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>npm run serve
</span></code></pre></td></tr></table></div></figure>


<p>运行这个命令，会在本地启动一个http server，原生终端用到的js文件就可以通过url访问了。生成的js在dist目录下，找到之后就可以拼出js的url了，例如
<a href="http://10.66.212.209:8081/dist/index.js%E3%80%82">http://10.66.212.209:8081/dist/index.js%E3%80%82</a></p>

<h2>三. 如何显示网络图片</h2>

<p>运行demo后，会发现网络图片不能展示。原来weex初始并没有集成网络图片下载功能，需要自己去实现。方法如下</p>

<h3>1.自定义图片下载协议WXImgLoaderProtocol</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@protocol</span> <span class="nc">WXImgLoaderProtocol</span> <span class="o">&lt;</span><span class="n">WXModuleProtocol</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">WXImageOperationProtocol</span><span class="o">&gt;</span><span class="p">)</span><span class="nl">downloadImageWithURL</span><span class="p">:(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">url</span> <span class="nl">imageFrame</span><span class="p">:(</span><span class="bp">CGRect</span><span class="p">)</span><span class="n">imageFrame</span> <span class="nl">userInfo</span><span class="p">:(</span><span class="bp">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="n">options</span> <span class="nl">completed</span><span class="p">:(</span><span class="kt">void</span><span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="bp">UIImage</span> <span class="o">*</span><span class="n">image</span><span class="p">,</span>  <span class="bp">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="n">finished</span><span class="p">))</span><span class="n">completedBlock</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2.协议的实现类WXImgLoaderDefaultImpl</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//WXImgLoaderDefaultImpl.h文件</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">WXImgLoaderDefaultImpl</span> : <span class="bp">NSObject</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//WXImgLoaderDefaultImpl.m文件</span>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">WXImgLoaderDefaultImpl</span>
</span><span class='line'><span class="cp">#pragma mark WXImgLoaderProtocol</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">WXImageOperationProtocol</span><span class="o">&gt;</span><span class="p">)</span><span class="nf">downloadImageWithURL:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">url</span> <span class="nf">imageFrame:</span><span class="p">(</span><span class="bp">CGRect</span><span class="p">)</span><span class="nv">imageFrame</span> <span class="nf">userInfo:</span><span class="p">(</span><span class="bp">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">userInfo</span> <span class="nf">completed:</span><span class="p">(</span><span class="kt">void</span><span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="bp">UIImage</span> <span class="o">*</span><span class="n">image</span><span class="p">,</span>  <span class="bp">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="n">finished</span><span class="p">))</span><span class="nv">completedBlock</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">url</span> <span class="nl">hasPrefix</span><span class="p">:</span><span class="s">@&quot;//&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">url</span> <span class="o">=</span> <span class="p">[</span><span class="s">@&quot;http:&quot;</span> <span class="nl">stringByAppendingString</span><span class="p">:</span><span class="n">url</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">WXImageOperationProtocol</span><span class="o">&gt;</span><span class="p">)[[</span><span class="n">SDWebImageManager</span> <span class="n">sharedManager</span><span class="p">]</span> <span class="nl">downloadImageWithURL</span><span class="p">:[</span><span class="bp">NSURL</span> <span class="nl">URLWithString</span><span class="p">:</span><span class="n">url</span><span class="p">]</span> <span class="nl">options</span><span class="p">:</span><span class="mi">0</span> <span class="nl">progress</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">NSInteger</span> <span class="n">receivedSize</span><span class="p">,</span> <span class="bp">NSInteger</span> <span class="n">expectedSize</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">}</span> <span class="nl">completed</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">UIImage</span> <span class="o">*</span><span class="n">image</span><span class="p">,</span> <span class="bp">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">,</span> <span class="n">SDImageCacheType</span> <span class="n">cacheType</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="n">finished</span><span class="p">,</span> <span class="bp">NSURL</span> <span class="o">*</span><span class="n">imageURL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">completedBlock</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">completedBlock</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">error</span><span class="p">,</span> <span class="n">finished</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3.在weex初始化的时候注册协议</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">WXSDKEngine</span> <span class="nl">registerHandler</span><span class="p">:[</span><span class="n">WXImgLoaderDefaultImpl</span> <span class="n">new</span><span class="p">]</span> <span class="nl">withProtocol</span><span class="p">:@</span><span class="n">protocol</span><span class="p">(</span><span class="n">WXImgLoaderProtocol</span><span class="p">)];</span>
</span></code></pre></td></tr></table></div></figure>


<h2>四. todo</h2>

<p>后续还有一些问题要研究</p>

<ol>
<li>weex页面里，如何调用native的网络模块获取到数据</li>
<li>多页面的跳转</li>
<li>调试工具weex devtool的使用方法</li>
<li>如何构建发布流程</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何查看p12文件的信息]]></title>
    <link href="http://jason5.cn/blog/ru-he-cha-kan-p12wen-jian-de-xin-xi.html"/>
    <updated>2017-12-16T14:37:21+08:00</updated>
    <id>http://jason5.cn/blog/ru-he-cha-kan-p12wen-jian-de-xin-xi</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>openssl pkcs12 -in xxx.p12 -out xxx.pem -nodes</span></code></pre></td></tr></table></div></figure>


<p>pem文件可以直接用文本工具打开</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[升级到macOS High Sierra Pod不能执行的解决办法]]></title>
    <link href="http://jason5.cn/blog/sheng-ji-dao-macos-high-sierra-podbu-neng-zhi-xing-de-jie-jue-ban-fa.html"/>
    <updated>2017-11-22T10:42:20+08:00</updated>
    <id>http://jason5.cn/blog/sheng-ji-dao-macos-high-sierra-podbu-neng-zhi-xing-de-jie-jue-ban-fa</id>
    <content type="html"><![CDATA[<p>macOS 升级到 High Sierra 后，执行pod命令出错，出错信息如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>JUNSHAO-MC0:~ junshao$ pod
</span><span class='line'>-bash: /usr/local/bin/pod: /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/bin/ruby: bad interpreter: No such file or directory</span></code></pre></td></tr></table></div></figure>


<p>解决办法是重装cocoapods</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo gem uninstall cocoapods
</span><span class='line'>sudo gem install -n /usr/local/bin cocoapods</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[转]到底什么时候才需要在ObjC的Block中使用weakSelf/strongSelf]]></title>
    <link href="http://jason5.cn/blog/zhuan-dao-di-shi-yao-shi-hou-cai-xu-yao-zai-objcde-blockzhong-shi-yong-weakself-slash-strongself.html"/>
    <updated>2017-06-16T15:01:32+08:00</updated>
    <id>http://jason5.cn/blog/zhuan-dao-di-shi-yao-shi-hou-cai-xu-yao-zai-objcde-blockzhong-shi-yong-weakself-slash-strongself</id>
    <content type="html"><![CDATA[<p>Objective C 的 Block 是一个很实用的语法，特别是与GCD结合使用，可以很方便地实现并发、异步任务。但是，如果使用不当，Block 也会引起一些循环引用问题(retain cycle)—— Block 会 retain ‘self’，而 ‘self‘ 又 retain 了 Block。因为在 ObjC 中，直接调用一个实例变量，会被编译器处理成 ‘self->theVar’，’self’ 是一个 strong 类型的变量，引用计数会加 1，于是，self retains queue， queue retains block，block retains self。</p>

<!--more-->


<h2>解决 retain circle</h2>

<p>Apple 官方的建议是，传进 Block 之前，把 ‘self’ 转换成 weak automatic 的变量，这样在 Block 中就不会出现对 self 的强引用。如果在 Block 执行完成之前，self 被释放了，weakSelf 也会变为 nil。</p>

<p>示例代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>__weak __typeof__(self) weakSelf = self;
</span><span class='line'>dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
</span><span class='line'>    [weakSelf doSomething];
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>clang 的文档表示，在 doSomething 内，weakSelf 不会被释放。但，下面的情况除外：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>__weak __typeof__(self) weakSelf = self;
</span><span class='line'>    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
</span><span class='line'>    [weakSelf doSomething];
</span><span class='line'>    [weakSelf doOtherThing];
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>在 doSomething 中，weakSelf 不会变成 nil，不过在 doSomething 执行完成，调用第二个方法 doOtherThing 的时候，weakSelf 有可能被释放，于是，strongSelf 就派上用场了：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>__weak __typeof__(self) weakSelf = self;
</span><span class='line'>    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
</span><span class='line'>    __strong __typeof(self) strongSelf = weakSelf;
</span><span class='line'>    [strongSelf doSomething];
</span><span class='line'>    [strongSelf doOtherThing];
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>__strong 确保在 Block 内，strongSelf 不会被释放。</p>

<h2>总结</h2>

<ul>
<li>在 Block 内如果需要访问 self 的方法、变量，建议使用 weakSelf。</li>
<li>如果在 Block 内需要多次 访问 self，则需要使用 strongSelf。</li>
</ul>


<h2>参考</h2>

<ul>
<li><a href="https://dhoerl.wordpress.com/2013/04/23/i-finally-figured-out-weakself-and-strongself">I finally figured out weakSelf and strongSelf</a></li>
<li><a href="https://stackoverflow.com/questions/21113963/is-the-weakself-strongself-dance-really-necessary-when-referencing-self-inside-a?rq=1">Is the weakSelf/strongSelf dance really necessary when referencing self inside a non-retained completion called from a UIViewController?</a></li>
</ul>


<blockquote><p> 原文链接： <a href="http://blog.lessfun.com/blog/2014/11/22/when-should-use-weakself-and-strongself-in-objc-block/">http://blog.lessfun.com/blog/2014/11/22/when-should-use-weakself-and-strongself-in-objc-block/</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mobike体验续]]></title>
    <link href="http://jason5.cn/blog/mobiketi-yan-xu.html"/>
    <updated>2016-11-15T14:49:07+08:00</updated>
    <id>http://jason5.cn/blog/mobiketi-yan-xu</id>
    <content type="html"><![CDATA[<p>这两天出差全靠mobike了，总共骑了大概有10趟吧，lite版的单车骑着确实轻松不少，价钱还更便宜。</p>

<p>昨天去了陆家嘴，逛了ifc，在黄浦江边吹了下风，是个好大上的地方。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mobike体验]]></title>
    <link href="http://jason5.cn/blog/mobiketi-yan.html"/>
    <updated>2016-11-13T21:25:26+08:00</updated>
    <id>http://jason5.cn/blog/mobiketi-yan</id>
    <content type="html"><![CDATA[<p>今天到上海出差，第一次来，想到处随意逛逛，单车是个很不错的选择，所以注册了mobike。</p>

<p>今天骑了三段：</p>

<p>第一段2km，耗时19m。这一段主要是在上海交大校园里，人少路况好，体验非常不错。</p>

<p>第二段3km，耗时22m。这一段是从酒店去外滩，在半路上被交警拦下，有一段路不准骑车，于是改乘地铁。这一段由于是在马路上，没有专门的自行车道，骑行感受一般。不过最难忍受的是这个车骑久了不舒服，座位对我来说比较偏矮，发不上力，且久了容易酸，下地铁台阶的时候感觉都快跪下去了。</p>

<p>第三段7km，耗时49m。从南京路步行街到酒店。跟第二段类似，没有专用自行车道，不停在人行道和马路边缘穿行，影响骑行速度。这次我骑得比较慢，也可能更适应了，腿酸的感受稍微弱一点。</p>

<p>总体感受：
1. 方便，随停真的是太方便了，完全不操心。
2. 用的人挺多的，上海和深圳都是这样。
3. lite版单车还比较少，一般附近难以找到，看起来可能会好骑一点，因为更轻，还没有体验过。
4. app做得不错，功能简洁易用，单车定位比较准。
5. 在北京这种有专用自行车道的城市，发展会更好，而对于没有骑行环境的城市，例如重庆，基本就搞不起来了。</p>

<p>经过今天的体验，总体来讲感觉不错，从最以前的完全不看好，到现在觉得稍微觉得有戏。以后有需要会继续用。</p>
]]></content>
  </entry>
  
</feed>
