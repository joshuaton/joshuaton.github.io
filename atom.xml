<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[移动开发技术]]></title>
  <link href="http://jason5.cn/atom.xml" rel="self"/>
  <link href="http://jason5.cn/"/>
  <updated>2024-11-06T20:31:46+08:00</updated>
  <id>http://jason5.cn/</id>
  <author>
    <name><![CDATA[jason]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Npm和pnpm对第三方库的安装和查找区别]]></title>
    <link href="http://jason5.cn/blog/pnpman-zhuang-hou-npmku-de-jia-zai-ji-zhi.html"/>
    <updated>2024-11-04T13:04:06+08:00</updated>
    <id>http://jason5.cn/blog/pnpman-zhuang-hou-npmku-de-jia-zai-ji-zhi</id>
    <content type="html"><![CDATA[<h3>npm 和 pnpm 安装的区别</h3>

<p>npm是将依赖安装到项目根目录node_modules里。</p>

<p>pnpm虽然也将依赖安装到node_modules里，但真实的包是在.pnpm里的，每个node_modules里都指向.pnpm里的唯一数据。</p>

<p>举个例子，package.json的内容如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;dependencies&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;A&quot;</span><span class="p">:</span> <span class="s2">&quot;^1.0.0&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;B&quot;</span><span class="p">:</span> <span class="s2">&quot;^1.0.0&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中A依赖了C@2.0.0，B依赖了C@3.0.0，两种安装方式的目录结构如下：</p>

<ul>
<li>npm安装</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">node_modules</span>
</span><span class='line'><span class="err">    A@</span><span class="mf">1.0</span><span class="err">.</span><span class="mi">0</span>
</span><span class='line'><span class="err">        node_modules</span>
</span><span class='line'><span class="err">            C@</span><span class="mf">2.0</span><span class="err">.</span><span class="mi">0</span>
</span><span class='line'><span class="err">    B@</span><span class="mf">1.0</span><span class="err">.</span><span class="mi">0</span>
</span><span class='line'><span class="err">        node_modules</span>
</span><span class='line'><span class="err">            C@</span><span class="mf">3.0</span><span class="err">.</span><span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>C如果安装在node_modules里，会造成版本冲突，所有将不同版本的C安装到了子node_modules里。当然，如果C的版本相对，那么会提取到根目录的node_modules里，这样不会造成冲突，也节省空间，但会丢失依赖树结构。</p>

<ul>
<li><p>pnpm安装</p>

<p>最后用pnpm安装的目录为</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">node_modules</span>
</span><span class='line'><span class="err">    .pnpm</span>
</span><span class='line'><span class="err">        A@</span><span class="mf">1.0</span><span class="err">.</span><span class="mi">0</span>
</span><span class='line'><span class="err">            node_modules</span>
</span><span class='line'><span class="err">                A</span>
</span><span class='line'><span class="err">                C</span> <span class="err">-&gt;</span> <span class="err">.pnpm/C@</span><span class="mf">2.0</span><span class="err">.</span><span class="mi">0</span><span class="err">/node_modules/C</span>
</span><span class='line'><span class="err">        B@</span><span class="mf">1.0</span><span class="err">.</span><span class="mi">0</span>
</span><span class='line'><span class="err">            node_modules</span>
</span><span class='line'><span class="err">                B</span>
</span><span class='line'><span class="err">                C</span> <span class="err">--&gt;</span> <span class="err">.pnpm/C@</span><span class="mf">3.0</span><span class="err">.</span><span class="mi">0</span><span class="err">/node_modules/C</span>
</span><span class='line'><span class="err">        C@</span><span class="mf">2.0</span><span class="err">.</span><span class="mi">0</span>
</span><span class='line'><span class="err">            node_modules</span>
</span><span class='line'><span class="err">                C</span>
</span><span class='line'><span class="err">        C@</span><span class="mf">3.0</span><span class="err">.</span><span class="mi">0</span>
</span><span class='line'><span class="err">            node_modules</span>
</span><span class='line'><span class="err">                C</span>
</span><span class='line'><span class="err">    A</span> <span class="err">-&gt;</span> <span class="err">.pnpm/A@</span><span class="mf">1.0</span><span class="err">.</span><span class="mi">0</span><span class="err">/node_modules/A</span>
</span><span class='line'><span class="err">    B</span> <span class="err">-&gt;</span> <span class="err">.pnpm/B@</span><span class="mf">1.0</span><span class="err">.</span><span class="mi">0</span><span class="err">/node_modules/B</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到：</p>

<ul>
<li><p>pnpm所有安装的库都在.pnpm目录下，每个版本号一个单独的目录，其余的地方都是引用到这里的</p></li>
<li><p>根node_modules下只有项目直接使用的库A和B，指向.pnpm对应位置</p></li>
<li><p>A和B的子依赖放在子node_modules目录里，并指向唯一的存储.pnpm目录</p></li>
</ul>


<p>pnpm解决了版本冲突的问题，节省了硬盘空间，并保留了依赖树结构。</p>

<h3>pnpm安装后库的查找过程</h3>

<ol>
<li><p>代码引用A@1.0.0，在node_modules/A查找，实际位置是node_modules/.pnpm/A@1.0.0/node_modules/A</p></li>
<li><p>A依赖C，向上一级目录的node_modules里能查找到C，即node_modules/.pnpm/A@1.0.0/node_modules/C，实际指向位置是.pnpm/C@2.0.0/node_modules/C</p></li>
</ol>


<h3>vite项目打包遇到的问题和解决方案</h3>

<p>在项目使用pnpm后，如果A引入了B，当pnpm install A时，如果项目不直接安装B，会在编译时出现报错，查找不到B模块</p>

<p>经过查找资料，发现vite打包用的rollup，只能打包相对模块，对于其他模块是不会被打包到bundle里的。</p>

<p>解决方案在vite.config.ts文件中增加配置</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">defineConfig</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&quot;vite&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">uni</span> <span class="nx">from</span> <span class="s2">&quot;@dcloudio/vite-plugin-uni&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">nodeResolve</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;@rollup/plugin-node-resolve&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// https://vitejs.dev/config/</span>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">defineConfig</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">plugins</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="nx">uni</span><span class="p">(),</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>  <span class="nx">build</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">rollupOptions</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">plugins</span><span class="o">:</span> <span class="p">[</span><span class="nx">nodeResolve</span><span class="p">()],</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>参考资料 <a href="https://rollupjs.org/troubleshooting/#warning-treating-module-as-external-dependency">Troubleshooting | Rollup</a></p>

<p>除了以上方法，还发现另外一个解决方案，将第三方库pnpm install的时候进行平铺安装，需要在.npmrc文件里增加配置</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">shamefully</span><span class="o">-</span><span class="nx">hoist</span> <span class="o">=</span> <span class="kc">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种方式安装，会将所有的库都安装在node_modules下，这时候是可以成功查找二级依赖并打包成功的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swith破解和升级]]></title>
    <link href="http://jason5.cn/blog/swithpo-jie-he-sheng-ji.html"/>
    <updated>2024-05-12T00:51:40+08:00</updated>
    <id>http://jason5.cn/blog/swithpo-jie-he-sheng-ji</id>
    <content type="html"><![CDATA[<h3>如何进入引导界面</h3>

<p><a href="https://blog.csdn.net/Goals1989/article/details/114836473">switch如何更新大气层，和进入hekate界面_hekate怎么进入游戏界面-CSDN博客</a></p>

<h3>如何重装系统</h3>

<p>将文件全部复制到sd卡，然后按照文档操作createMMC等</p>

<h3>如何升级系统</h3>

<p>将文件复制到sd卡，需要保留emcMMC文件和YOUXI文件，需要按阶梯升级，不能跳</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginx日志切割]]></title>
    <link href="http://jason5.cn/blog/nginxri-zhi-qie-ge.html"/>
    <updated>2023-01-09T14:56:40+08:00</updated>
    <id>http://jason5.cn/blog/nginxri-zhi-qie-ge</id>
    <content type="html"><![CDATA[<p>随着nginx日志越来越大，最终会将服务器上的日志占满，方案是用logformat自动进行日志切割，需要以下步骤</p>

<!--more-->


<h3>创建logformat配置文件</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/data/logs/*.log {
</span><span class='line'>  daily
</span><span class='line'>  missingok
</span><span class='line'>  rotate 7
</span><span class='line'>  ifempty
</span><span class='line'>  create 640 nginx root
</span><span class='line'>  sharedscripts
</span><span class='line'>  dateext
</span><span class='line'>  postrotate
</span><span class='line'>    if [ -f /var/run/nginx.pid ]; then
</span><span class='line'>      kill -USR1 \`cat /var/run/nginx.pid\`
</span><span class='line'>    fi
</span><span class='line'>  endscript
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>daily表示日志按天切割</p>

<p>rotate 7 表示只保留最近的7条切割文件</p>

<p>postrotate 表示切割日志后要运行的命令，这里是杀掉nginx进程，使其能重新用新文件写入日志</p>

<h3>修改Dockerfile</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FROM xxx/nginx:1.18
</span><span class='line'>
</span><span class='line'># 安装logrotate
</span><span class='line'>RUN apt-get update && apt-get -y install logrotate
</span><span class='line'>
</span><span class='line'># 设置时区
</span><span class='line'>ENV TZ=Asia/Shanghai
</span><span class='line'>RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo '$TZ' &gt; /etc/timezone
</span><span class='line'>
</span><span class='line'>COPY ${domain}/. /usr/share/nginx/html/
</span><span class='line'>COPY default.conf /etc/nginx/conf.d/default.conf
</span><span class='line'>COPY logrotate-nginx /etc/logrotate.d/
</span><span class='line'>WORKDIR /usr/share/nginx/html
</span><span class='line'>EXPOSE 80
</span><span class='line'>
</span><span class='line'>CMD service cron start && nginx -g 'daemon off;'</span></code></pre></td></tr></table></div></figure>


<p>主要增加了以下内容</p>

<ol>
<li>安装logrotate，因为原始镜像里没有</li>
<li>设置时区，这样日志的时间是准确的，不会早8个小时</li>
<li>将logrotate的配置文件copy到配置目录下</li>
<li>启动crontab，并且修改nginx的启动方式</li>
</ol>


<h3>容器运行之后的效果</h3>

<p>查看容器的crontab内容</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SHELL=/bin/sh
</span><span class='line'>PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
</span><span class='line'>
</span><span class='line'># Example of job definition:
</span><span class='line'># .---------------- minute (0 - 59)
</span><span class='line'># |  .------------- hour (0 - 23)
</span><span class='line'># |  |  .---------- day of month (1 - 31)
</span><span class='line'># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...
</span><span class='line'># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat
</span><span class='line'># |  |  |  |  |
</span><span class='line'># *  *  *  *  * user-name command to be executed
</span><span class='line'>17 *    * * *   root    cd / && run-parts --report /etc/cron.hourly
</span><span class='line'>25 6    * * *   root    test -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.daily )
</span><span class='line'>47 6    * * 7   root    test -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.weekly )
</span><span class='line'>52 6    1 * *   root    test -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.monthly )</span></code></pre></td></tr></table></div></figure>


<p>可以看到每天6点25分会运行/etc/cron.daily</p>

<p>/etc/cron.daily/logrotate 是一个脚本，每天会定时调用，执行logrotate二进制命令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/sh
</span><span class='line'>
</span><span class='line'># skip in favour of systemd timer
</span><span class='line'>if [ -d /run/systemd/system ]; then
</span><span class='line'>    exit 0
</span><span class='line'>fi
</span><span class='line'>
</span><span class='line'># this cronjob persists removals (but not purges)
</span><span class='line'>if [ ! -x /usr/sbin/logrotate ]; then
</span><span class='line'>    exit 0
</span><span class='line'>fi
</span><span class='line'>
</span><span class='line'>/usr/sbin/logrotate /etc/logrotate.conf
</span><span class='line'>EXITVALUE=$?
</span><span class='line'>if [ $EXITVALUE != 0 ]; then
</span><span class='line'>    /usr/bin/logger -t logrotate "ALERT exited abnormally with [$EXITVALUE]"
</span><span class='line'>fi
</span><span class='line'>exit $EXITVALUE</span></code></pre></td></tr></table></div></figure>


<h3>切割后的日志</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-rw-r----- 1 nginx root  1241741 Sep  9 15:11 nginx_error_log.log-20220909
</span><span class='line'>-rw-r----- 1 nginx root   639982 Sep 13 06:04 nginx_error_log.log-20220912
</span><span class='line'>-rw-r----- 1 nginx root 26065270 Sep 13 19:40 nginx_error_log.log-20220910
</span><span class='line'>-rw-r----- 1 nginx root  5055874 Sep 14 06:38 nginx_error_log.log-20220911
</span><span class='line'>-rw-r----- 1 nginx root   312747 Sep 14 12:17 nginx_error_log.log-20220913
</span><span class='line'>-rw-r----- 1 nginx root  1343155 Sep 15 06:39 nginx_error_log.log-20220914
</span><span class='line'>-rw-r----- 1 nginx root  2816323 Sep 15 14:35 nginx_error_log.log-20220915
</span><span class='line'>-rw-r----- 1 nginx root  1141083 Sep 15 20:13 nginx_error_log.log</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hippy接入typescript记录]]></title>
    <link href="http://jason5.cn/blog/hippyjie-ru-typescriptji-lu.html"/>
    <updated>2021-01-09T17:32:08+08:00</updated>
    <id>http://jason5.cn/blog/hippyjie-ru-typescriptji-lu</id>
    <content type="html"><![CDATA[<p>项目的package.json如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="s2">&quot;scripts&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;dev&quot;</span><span class="o">:</span> <span class="s2">&quot;vue-cli-service serve --https true --port 443 --host test.igame.qq.com&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;build&quot;</span><span class="o">:</span> <span class="s2">&quot;vue-cli-service build&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;lint&quot;</span><span class="o">:</span> <span class="s2">&quot;eslint --ext .js,.vue,.ts .&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;lint:fix&quot;</span><span class="o">:</span> <span class="s2">&quot;eslint --fix --ext .js,.vue,.ts .&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;hippy:debug&quot;</span><span class="o">:</span> <span class="s2">&quot;hippy-debug&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;hippy:dev&quot;</span><span class="o">:</span> <span class="s2">&quot;webpack --config ./scripts/hippy-webpack.dev.js&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;hippy:vendor&quot;</span><span class="o">:</span> <span class="s2">&quot;webpack --config ./scripts/hippy-webpack.ios-vendor.js --config ./scripts/hippy-webpack.android-vendor.js&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;hippy:build&quot;</span><span class="o">:</span> <span class="s2">&quot;webpack --config ./scripts/hippy-webpack.ios.js --config ./scripts/hippy-webpack.android.js&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;hippy:publish&quot;</span><span class="o">:</span> <span class="s2">&quot;hippy-publish igame-match-test&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;hippy:publish:prod&quot;</span><span class="o">:</span> <span class="s2">&quot;NODE_ENV=&#39;release&#39; hippy-publish igame-match-release&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，如果是sudo npm run dev的方式来启动服务的话，用的是vue-cli-service，这个是@vue/cli-service的命令，其默认是去读取根目录的配置文件vue.config.js。如果是以npm run hippy:dev 去启动的话，读取的是配置文件hippy-webpack.dev.js。由于两个配置文件不一样，所以，对ts的支持需要两边配置文件都要修改。</p>

<!--more-->


<h2>1. vue.config.js的配置</h2>

<p>vue.config.js这边，我们不需要去配置ts-loader，参考现有的项目igame-match，只要安装@vue/cli-plugin-typescript和typescript，就可以自动帮我们配置好。这里有个问题，如果不在vue.config.js里加上entry配置的话，默认项目启动会去寻找main.ts文件，这个文件是不存在的，所以这里起不来，解决方法是修改entry文件就可以了，在vue.config.js里加上如下配置</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">runtimeCompiler</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">configureWebpack</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">entry</span><span class="o">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">&#39;src&#39;</span><span class="p">,</span> <span class="s1">&#39;main.js&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里会用到的两个小技巧</p>

<ol>
<li>初始化tsconfig.json文件</li>
</ol>


<pre><code class="```shell">   tsc init
</code></pre>

<ol>
<li>检查webpack的配置，由于vue.config.js会对webpack的配置进行一些封装，并不是很直观，所以可以运行以下的命令，查看真正的配置</li>
</ol>


<pre><code class="```shell">   vue inspect
   vue inspect --rule vue
</code></pre>

<p>   详细参考 <a href="https://cli.vuejs.org/zh/guide/webpack.html#%E4%BF%AE%E6%94%B9%E6%8F%92%E4%BB%B6%E9%80%89%E9%A1%B9">webpack 相关 | Vue CLI</a></p>

<h2>2. hippy-webpack.dev.js的配置</h2>

<p>hippy-webpack.dev.js这边，需要加上ts-loader对ts文件进行解析，加上如下的配置</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">modules</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">rules</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nx">test</span><span class="o">:</span> <span class="sr">/\.(ts|tsx)?$/i</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">use</span><span class="o">:</span> <span class="p">[{</span>
</span><span class='line'>              <span class="nx">loader</span><span class="o">:</span> <span class="s1">&#39;ts-loader&#39;</span><span class="p">,</span>
</span><span class='line'>              <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">appendTsSuffixTo</span><span class="o">:</span> <span class="p">[</span><span class="sr">/\.vue$/</span><span class="p">],</span>
</span><span class='line'>              <span class="p">},</span>
</span><span class='line'>            <span class="p">}],</span>
</span><span class='line'>            <span class="nx">exclude</span><span class="o">:</span> <span class="sr">/node_modules/</span><span class="p">,</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="nx">resolve</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>   <span class="nx">extensions</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;.js&#39;</span><span class="p">,</span> <span class="s1">&#39;.vue&#39;</span><span class="p">,</span> <span class="s1">&#39;.json&#39;</span><span class="p">,</span> <span class="s1">&#39;.ts&#39;</span><span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[将现有js库改成ts库]]></title>
    <link href="http://jason5.cn/blog/jiang-xian-you-jsku-gai-cheng-tsku.html"/>
    <updated>2020-07-27T17:48:48+08:00</updated>
    <id>http://jason5.cn/blog/jiang-xian-you-jsku-gai-cheng-tsku</id>
    <content type="html"><![CDATA[<h3>1. 背景</h3>

<p>现在的公共库用js来书写，有两个问题：</p>

<ol>
<li><p>调用方无法获得语法提示，且对调用函数的参数类型不明</p></li>
<li><p>公共库中的一些变量类型模糊不清</p></li>
</ol>


<p>以上两个问题虽然不大，但是一定程度上影响了项目的开发效率和质量。通过typescript来改写公共库，有利于解决上述两个问题。</p>

<!--more-->


<h3>2. 操作步骤</h3>

<h4>2.1 命令行安装Typescript</h4>

<p>vue项目如果要想使用ts，需要先安装typescript和@vue/cli-plugin-typescript</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>npm install --save-dev typescript
</span><span class='line'>npm install --save-dev @vue/cli-plugin-typescript
</span></code></pre></td></tr></table></div></figure>


<h4>2.2 编写typescript配置</h4>

<p>在根目录下新建文件tsconfig.json，以下边的内容为例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;compilerOptions&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;target&quot;</span><span class="o">:</span> <span class="s2">&quot;esnext&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;module&quot;</span><span class="o">:</span> <span class="s2">&quot;esnext&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;strict&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;importHelpers&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;moduleResolution&quot;</span><span class="o">:</span> <span class="s2">&quot;node&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;experimentalDecorators&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;esModuleInterop&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;allowSyntheticDefaultImports&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;sourceMap&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;baseUrl&quot;</span><span class="o">:</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;allowJs&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;noEmit&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;paths&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;@/*&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>          <span class="s2">&quot;src/*&quot;</span>
</span><span class='line'>        <span class="p">]</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="s2">&quot;lib&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s2">&quot;esnext&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;dom&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;dom.iterable&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;scripthost&quot;</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s2">&quot;exclude&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="s2">&quot;node_modules&quot;</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>2.3 新增shims-vue.d.ts</h4>

<p>如果调用方是vue工程，且需要在vue文件里写ts，需要加上这一步。</p>

<p>根目录下新建文件<code>shims-vue.d.ts</code>，让 <code>ts</code> 识别 <code>*.vue</code> 文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">declare</span> <span class="nx">module</span> <span class="s1">&#39;*.vue&#39;</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">import</span> <span class="nx">Vue</span> <span class="nx">from</span> <span class="s1">&#39;vue&#39;</span>
</span><span class='line'>  <span class="kr">export</span> <span class="k">default</span> <span class="nx">Vue</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果vue文件的script段需要用ts来写，需要这一步操作。由于我这次是改写公共js库，所以暂时跟这里不相关。</p>

<h4>2.4 修改公共库文件后缀</h4>

<p>将js文件改为ts文件后缀。这个时候会报很多错误，大部分是类型不匹配相关的，这里需要逐一解决。</p>

<h3>3. 转ts代码时遇到的问题和改写方法</h3>

<h4>3.1 类型“{}”上不存在属性“get”</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Cookies</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="nx">Cookies</span><span class="p">.</span><span class="nx">get</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">defaultval</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//省略若干代码</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>.get方法的定义会报错，这里是js转ts最常见的错误，解决方法是将Cookies定义为class</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">class</span> <span class="nx">Cookies</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">static</span> <span class="nx">get</span><span class="p">(</span><span class="nx">key</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">defaultval</span><span class="o">?:</span> <span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//省略若干代码</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里需要将get方法定义成static，这样才可以以<code>Cookies.get</code>的形式调用，和之前保持不变。</p>

<p>如果要使用的对象{}里只包含属性，不包含方法，也可以将{}定义为接口interface，例如</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">interface</span> <span class="nx">Env</span><span class="p">{</span>
</span><span class='line'>  <span class="nx">ua</span><span class="o">:</span> <span class="nx">string</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">currPage</span><span class="o">:</span> <span class="nx">string</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">isWeixin</span><span class="o">:</span> <span class="kr">boolean</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">isWorkWeixin</span><span class="o">:</span> <span class="kr">boolean</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">isQQ</span><span class="o">:</span> <span class="kr">boolean</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">isPvpApp</span><span class="o">:</span> <span class="kr">boolean</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">isTipApp</span><span class="o">:</span> <span class="kr">boolean</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">isAndroid</span><span class="o">:</span> <span class="kr">boolean</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">isIos</span><span class="o">:</span> <span class="kr">boolean</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">isMsdk</span><span class="o">:</span> <span class="kr">boolean</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">isSlugSdk</span><span class="o">:</span> <span class="kr">boolean</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">isInGame</span><span class="o">:</span> <span class="kr">boolean</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">isGHelper</span><span class="o">:</span> <span class="kr">boolean</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">isGHelper20004</span><span class="o">:</span> <span class="kr">boolean</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">isMiniProgram</span><span class="o">:</span> <span class="kr">boolean</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">isWindowsPhone</span><span class="o">:</span> <span class="kr">boolean</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">isSymbian</span><span class="o">:</span> <span class="kr">boolean</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">isPc</span><span class="o">:</span> <span class="kr">boolean</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">version</span><span class="o">:</span> <span class="nx">string</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">loginType</span><span class="o">:</span> <span class="nx">string</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">authQuery</span><span class="o">:</span> <span class="nb">Object</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">urlmodule</span><span class="o">:</span> <span class="nx">string</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">vconsole</span><span class="o">:</span> <span class="nx">any</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用的时候如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">env</span> <span class="o">=</span> <span class="p">{}</span> <span class="nx">as</span> <span class="nx">Env</span><span class="p">;</span>
</span><span class='line'><span class="nx">env</span><span class="p">.</span><span class="nx">ua</span> <span class="o">=</span> <span class="nx">useragent</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">()</span>
</span><span class='line'><span class="nx">env</span><span class="p">.</span><span class="nx">isWeixin</span> <span class="o">=</span> <span class="nx">env</span><span class="p">.</span><span class="nx">ua</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;micromessenger&#39;</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'><span class="nx">env</span><span class="p">.</span><span class="nx">isWorkWeixin</span> <span class="o">=</span> <span class="nx">env</span><span class="p">.</span><span class="nx">ua</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;micromessenger&#39;</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="nx">env</span><span class="p">.</span><span class="nx">ua</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;wxwork&#39;</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'><span class="nx">env</span><span class="p">.</span><span class="nx">isQQ</span> <span class="o">=</span> <span class="nx">env</span><span class="p">.</span><span class="nx">ua</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39; qq/&#39;</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'><span class="nx">env</span><span class="p">.</span><span class="nx">isPvpApp</span> <span class="o">=</span> <span class="nx">env</span><span class="p">.</span><span class="nx">ua</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39; igameapp/&#39;</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'><span class="nx">env</span><span class="p">.</span><span class="nx">isTipApp</span> <span class="o">=</span> <span class="nx">env</span><span class="p">.</span><span class="nx">ua</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39; gamelife/&#39;</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'><span class="nx">env</span><span class="p">.</span><span class="nx">isAndroid</span> <span class="o">=</span> <span class="nx">env</span><span class="p">.</span><span class="nx">ua</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;android&#39;</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'><span class="nx">env</span><span class="p">.</span><span class="nx">isIos</span> <span class="o">=</span> <span class="p">(</span><span class="nx">env</span><span class="p">.</span><span class="nx">ua</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;iphone&#39;</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="nx">env</span><span class="p">.</span><span class="nx">ua</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;ipad&#39;</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="nx">env</span><span class="p">.</span><span class="nx">isMsdk</span> <span class="o">=</span> <span class="nx">env</span><span class="p">.</span><span class="nx">ua</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39; msdk/&#39;</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span> <span class="c1">// msdk</span>
</span><span class='line'><span class="nx">env</span><span class="p">.</span><span class="nx">isSlugSdk</span> <span class="o">=</span> <span class="nx">env</span><span class="p">.</span><span class="nx">ua</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;ingame&#39;</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span> <span class="c1">// 微社区sdk</span>
</span><span class='line'><span class="nx">env</span><span class="p">.</span><span class="nx">isInGame</span> <span class="o">=</span> <span class="nx">env</span><span class="p">.</span><span class="nx">isMsdk</span> <span class="o">||</span> <span class="nx">env</span><span class="p">.</span><span class="nx">isSlugSdk</span> <span class="c1">// 是否游戏内</span>
</span><span class='line'><span class="nx">env</span><span class="p">.</span><span class="nx">isGHelper</span> <span class="o">=</span> <span class="nx">env</span><span class="p">.</span><span class="nx">ua</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;gamehelper&#39;</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'><span class="nx">env</span><span class="p">.</span><span class="nx">isGHelper20004</span> <span class="o">=</span> <span class="nx">env</span><span class="p">.</span><span class="nx">ua</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;gamehelper_20004&#39;</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'><span class="nx">env</span><span class="p">.</span><span class="nx">isMiniProgram</span> <span class="o">=</span> <span class="nx">env</span><span class="p">.</span><span class="nx">ua</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/miniprogram/i</span><span class="p">)</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">||</span> <span class="nb">window</span><span class="p">.</span><span class="nx">__wxjs_environment</span> <span class="o">===</span> <span class="s1">&#39;miniprogram&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>3.2 typeof后边的内容未定义</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">node_cookie</span> <span class="o">!==</span> <span class="s1">&#39;undefined&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">cookie</span> <span class="o">=</span> <span class="nx">node_cookie</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里node_cookie是未定义的内容，可能是在其他环境里载入的变量，目前因为用不到，所以暂时是去掉了</p>

<h4>3.3 window下的属性不存在</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">__wxjs_environment</span> <span class="o">===</span> <span class="s1">&#39;miniprogram&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这行代码会报错，类型“Window &amp; typeof globalThis”上不存在属性“__wxjs_environment”，解决方法是声明一个Window下的全局变量</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">declare</span> <span class="nx">global</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">interface</span> <span class="nx">Window</span> <span class="p">{</span> <span class="nx">__wxjs_environment</span><span class="o">:</span> <span class="nx">any</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>3.4 赋值时类型不匹配</h4>

<h5>3.4.1 第一个例子</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">env</span><span class="p">.</span><span class="nx">isMiniProgram</span> <span class="o">=</span> <span class="nx">env</span><span class="p">.</span><span class="nx">ua</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/miniprogram/i</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>不能将类型“RegExpMatchArray”分配给类型“boolean”。这里就是typescript的好处，会提示隐示的类型转换，避免可能出现的bug。字符串的match方法，可能返回Array或者null，所以这里的解决方案是改成</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">env</span><span class="p">.</span><span class="nx">isMiniProgram</span> <span class="o">=</span> <span class="nx">env</span><span class="p">.</span><span class="nx">ua</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/miniprogram/i</span><span class="p">)</span> <span class="o">!=</span> <span class="kc">null</span>
</span></code></pre></td></tr></table></div></figure>


<h5>3.4.2 第二个例子</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">let</span> <span class="nx">tmpd</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="nx">timestamp</span><span class="p">).</span><span class="nx">toLocaleDateString</span><span class="p">())</span><span class="c1">// 今日0点</span>
</span><span class='line'><span class="nx">tmpd</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">tmpd</span><span class="p">.</span><span class="nx">getTime</span><span class="p">()</span> <span class="o">/</span> <span class="mi">1000</span><span class="p">)</span>
</span><span class='line'><span class="k">return</span> <span class="nx">tmpd</span> <span class="o">+</span> <span class="mi">86400</span> <span class="o">-</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>错误提示：不能将类型“number”分配给类型“Date”。出错在第2行，右边计算出来是number，但是tmpd是Date类型，出现类型不匹配，可以简单粗暴的将tmpd改为any类型</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">let</span> <span class="nx">tmpd</span> <span class="o">:</span> <span class="nx">any</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="nx">timestamp</span><span class="p">).</span><span class="nx">toLocaleDateString</span><span class="p">())</span><span class="c1">// 今日0点</span>
</span><span class='line'><span class="nx">tmpd</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">tmpd</span><span class="p">.</span><span class="nx">getTime</span><span class="p">()</span> <span class="o">/</span> <span class="mi">1000</span><span class="p">)</span>
</span><span class='line'><span class="k">return</span> <span class="nx">tmpd</span> <span class="o">+</span> <span class="mi">86400</span> <span class="o">-</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<h5>3.4.3 第三个例子</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">mistiming</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">()</span> <span class="o">/</span> <span class="mi">1000</span><span class="p">)</span> <span class="o">-</span> <span class="nx">timestamp</span>
</span></code></pre></td></tr></table></div></figure>


<p>错误提示：算术运算左侧必须是 &ldquo;any"、"number"、"bigint&rdquo; 或枚举类型。原因是Date类型和number类型做除法运算，需要修改为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">mistiming</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">getTime</span><span class="p">()</span> <span class="o">/</span> <span class="mi">1000</span><span class="p">)</span> <span class="o">-</span> <span class="nx">timestamp</span>
</span></code></pre></td></tr></table></div></figure>


<h4>3.5 类型“Object”上不存在属性“tipmdl”</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">env</span><span class="p">.</span><span class="nx">authQuery</span><span class="p">.</span><span class="nx">tipmdl</span> <span class="o">!==</span> <span class="s1">&#39;undefined&#39;</span> <span class="o">&amp;&amp;</span> <span class="nx">env</span><span class="p">.</span><span class="nx">authQuery</span><span class="p">.</span><span class="nx">tipmdl</span> <span class="o">!=</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">env</span><span class="p">.</span><span class="nx">urlmodule</span> <span class="o">=</span> <span class="nx">env</span><span class="p">.</span><span class="nx">authQuery</span><span class="p">.</span><span class="nx">tipmdl</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里authQuery是一个Object，里边存储了url的参数对，可能有任意key，所以修改成</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">env</span><span class="p">.</span><span class="nx">authQuery</span><span class="p">[</span><span class="s1">&#39;tipmdl&#39;</span><span class="p">]</span> <span class="o">!==</span> <span class="s1">&#39;undefined&#39;</span> <span class="o">&amp;&amp;</span> <span class="nx">env</span><span class="p">.</span><span class="nx">authQuery</span><span class="p">[</span><span class="s1">&#39;tipmdl&#39;</span><span class="p">]</span> <span class="o">!=</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">env</span><span class="p">.</span><span class="nx">urlmodule</span> <span class="o">=</span> <span class="nx">env</span><span class="p">.</span><span class="nx">authQuery</span><span class="p">[</span><span class="s1">&#39;tipmdl&#39;</span><span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>4. 给typescript代码加上注释</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * 设置cookie</span>
</span><span class='line'><span class="cm">   * @param sName  cookie名称</span>
</span><span class='line'><span class="cm">   * @param sValue  cookie值</span>
</span><span class='line'><span class="cm">   * @param iExpireSec  过期时间，单位秒</span>
</span><span class='line'><span class="cm">   * @param sDomain  cookie作用域名</span>
</span><span class='line'><span class="cm">   * @param sPath  cookie作用路径</span>
</span><span class='line'><span class="cm">   * @param bSecure  是否加密</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kr">static</span> <span class="nx">set</span><span class="p">(</span><span class="nx">sName</span><span class="o">:</span><span class="nx">string</span><span class="p">,</span> <span class="nx">sValue</span><span class="o">:</span><span class="nx">string</span><span class="p">,</span> <span class="nx">iExpireSec</span><span class="o">:</span><span class="nx">number</span><span class="p">,</span> <span class="nx">sDomain</span><span class="o">:</span><span class="nx">string</span><span class="p">,</span> <span class="nx">sPath</span><span class="o">:</span><span class="nx">string</span><span class="p">,</span> <span class="nx">bSecure</span><span class="o">?:</span><span class="kr">boolean</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>像上面这样写好注释后，调用方就能看到了。如下</p>

<p><img src="https://raw.githubusercontent.com/joshuaton/img/master/20200728115458.png" alt="" /></p>

<h3>5. 参考资料</h3>

<ul>
<li>Vue-cli3项目引入Typescript <a href="https://juejin.im/post/5da6e5c1f265da5b8c03c58f">https://juejin.im/post/5da6e5c1f265da5b8c03c58f</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在现有iOS项目中集成Flutter方案]]></title>
    <link href="http://jason5.cn/blog/zai-xian-you-iosxiang-mu-zhong-ji-cheng-flutterfang-an.html"/>
    <updated>2019-09-13T22:09:38+08:00</updated>
    <id>http://jason5.cn/blog/zai-xian-you-iosxiang-mu-zhong-ji-cheng-flutterfang-an</id>
    <content type="html"><![CDATA[<h2>1. 集成方式选择</h2>

<p>官方提供了源码集成方式，详细见文章<a href="https://github.com/flutter/flutter/wiki/Add-Flutter-to-existing-apps">Add Flutter to existing apps</a>。</p>

<p>该方式有一个问题，Native工程和Flutter工程耦合性强，Native开发人员必须安装Flutter运行环境，才能运行真个工程，CI构建机上也要求有Flutter环境。更好的办法是将Flutter工程生成的产物集成进Native工程里，这样Native工程可以脱离Flutter环境运行。</p>

<!--more-->


<p>经过调研和参考，我们的项目用了源码集成和私有库相结合的方式：</p>

<p><img src="https://raw.githubusercontent.com/joshuaton/img/master/20191111161133.png" alt="" /></p>

<ol>
<li><p>Flutter开发阶段，以源码方式引入，方便代码调试和快速查看效果。</p></li>
<li><p>编写构建脚本，脚本根据环境生成Debug和Release两个不同版本的构建产物，分别放在FlutterFrameworkDebug和FlutterFrameworkRelease私有库中。</p></li>
<li><p>Native开发人员以Pod私有库方式，将Flutter产物引入原生工程，线上版本同样以Pod私有库方式引入。</p></li>
</ol>


<p>该集成方式很好的弥补了代码集成方式的缺点。Podflie的编写如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># 是否源码集成, 0:否 / 1:是</span>
</span><span class='line'><span class="n">IsFlutterSourceCode</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">IsFlutterSourceCode</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>  <span class="c"># 需设置tip-flutter路径的环境变量</span>
</span><span class='line'>  <span class="c"># 如：export TIP_FLUTTER_HOME=/Users/xxx/code/tip-flutter</span>
</span><span class='line'>  <span class="n">flutter_application_path</span> <span class="o">=</span> <span class="n">ENV</span><span class="p">[</span><span class="s">&quot;TIP_FLUTTER_HOME&quot;</span><span class="p">]</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">flutter_application_path</span><span class="o">.</span><span class="n">to_s</span> <span class="o">==</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>    <span class="n">puts</span> <span class="s">&quot;flutter_application_path not found! Please set ENV[</span><span class="se">\&quot;</span><span class="s">TIP_FLUTTER_HOME</span><span class="se">\&quot;</span><span class="s">].&quot;</span>
</span><span class='line'>    <span class="nb">exit</span>
</span><span class='line'>  <span class="n">end</span>
</span><span class='line'>  <span class="n">load</span> <span class="n">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">flutter_application_path</span><span class="p">,</span> <span class="s">&#39;.ios&#39;</span><span class="p">,</span> <span class="s">&#39;Flutter&#39;</span><span class="p">,</span> <span class="s">&#39;podhelper.rb&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">target</span> <span class="s">&#39;IGame&#39;</span> <span class="n">do</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">IsFlutterSourceCode</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">install_all_flutter_pods</span><span class="p">(</span><span class="n">flutter_application_path</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">pod</span> <span class="s">&#39;FlutterFrameworkDebug&#39;</span><span class="p">,</span>  <span class="s">&#39;0.1.68&#39;</span><span class="p">,</span> <span class="p">:</span><span class="n">configurations</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s">&#39;Debug&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">pod</span> <span class="s">&#39;FlutterFrameworkRelease&#39;</span><span class="p">,</span>  <span class="s">&#39;0.1.60&#39;</span><span class="p">,</span> <span class="p">:</span><span class="n">configurations</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s">&#39;Release&#39;</span><span class="p">,</span> <span class="s">&#39;Test&#39;</span><span class="p">]</span>
</span><span class='line'>  <span class="n">end</span>
</span><span class='line'><span class="n">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过修改IsFlutterSourceCode开关配置集成方式。</p>

<p>接下来介绍私有库产物的收集方法。</p>

<h2>2. Flutter产物收集</h2>

<p>产物收集分为三个部分，App.framework、Flutter.framework、Plugin（包括Plugin.h和Plugin.a文件）。</p>

<p>framework的收集分为Debug版本和Release版本，收集Debug版本前需要以源码模式先运行工程一次，收集Release版本前需要先执行<code>flutter build ios</code>，这样对应的产物才能生成。</p>

<h3>2.1 App.framework</h3>

<p>App.framework是逻辑代码。</p>

<p>文件位置：</p>

<ul>
<li><p>Debug版本：$TIP_FLUTTER_HOME/.ios/Flutter/App.framework</p></li>
<li><p>Release版本：$TIP_FLUTTER_HOME/build/ios/iphoneos/Runner.app/Frameworks/App.framework</p></li>
</ul>


<h3>2.2 Flutter.framework</h3>

<p>Flutter.framework是引擎代码。</p>

<p>文件位置：</p>

<ul>
<li><p>Debug版本：$TIP_FLUTTER_HOME/.ios/Flutter/engine/Flutter.framework</p></li>
<li><p>Release版本：$FLUTTER_HOME/bin/cache/artifacts/engine/ios-release/Flutter.framework</p></li>
</ul>


<h3>2.3 Plugin</h3>

<p>为了减少复杂度，Plugin产物没有区分Debug版本和Release版本。</p>

<p>根据<code>.flutter-plugins</code>文件的内容分析用到了哪些plugin。</p>

<p>例如文件内容如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">flutter_mmkv_cache</span><span class="o">=</span>/Users/junshao/Documents/Code/Flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_mmkv_cache-0.0.2/
</span><span class='line'><span class="nv">path_provider</span><span class="o">=</span>/Users/junshao/Documents/Code/Flutter/flutter/.pub-cache/hosted/pub.dartlang.org/path_provider-1.3.0/
</span><span class='line'><span class="nv">sqflite</span><span class="o">=</span>/Users/junshao/Documents/Code/Flutter/flutter/.pub-cache/hosted/pub.dartlang.org/sqflite-1.1.7+1/
</span></code></pre></td></tr></table></div></figure>


<p>可以分析出来三个plugin，分别是<code>flutter_mmkv_cache</code>，<code>path_provider</code>，<code>sqflite</code>。</p>

<p>还不止这些，plugin可能会依赖native库，还需要进一步分析。</p>

<p>以<code>flutter_mmkv_cache</code>为例，查看podspec文件，位置在<code>/Users/junshao/Documents/Code/Flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_mmkv_cache-0.0.2/ios</code>，文件中有依赖的native库：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">dependency</span> <span class="s">&#39;Flutter&#39;</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">dependency</span> <span class="s">&#39;MMKV&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>除去<code>Flutter</code>本身，<code>MMKV</code>就是需要依赖的native库。</p>

<p>分析完所有plugin和依赖库后，开始构建plugin。需要针对模拟器和真机分别构建.a文件，然后将两个.a文件合并。相关命令如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/usr/bin/env xcrun xcodebuild build -configuration Debug <span class="nv">ARCHS</span><span class="o">=</span><span class="s1">&#39;x86_64&#39;</span> -target <span class="nv">$plugin_name</span> <span class="nv">BUILD_DIR</span><span class="o">=</span><span class="nv">$TIP_FLUTTER_HOME</span>/build/ios -sdk iphonesimulator &gt; /dev/null 2&gt;<span class="p">&amp;</span>1
</span><span class='line'>/usr/bin/env xcrun xcodebuild build -configuration Release <span class="nv">ARCHS</span><span class="o">=</span><span class="s1">&#39;arm64 armv7&#39;</span> -target <span class="nv">$plugin_name</span> <span class="nv">BUILD_DIR</span><span class="o">=</span><span class="nv">$TIP_FLUTTER_HOME</span>/build/ios -sdk iphoneos &gt; /dev/null 2&gt;<span class="p">&amp;</span>1
</span><span class='line'>lipo -create <span class="nv">$TIP_FLUTTER_HOME</span>/build/ios/Debug-iphonesimulator/<span class="nv">$plugin_name</span>/lib<span class="nv">$plugin_name</span>.a <span class="nv">$TIP_FLUTTER_HOME</span>/build/ios/Release-iphoneos/<span class="nv">$plugin_name</span>/lib<span class="nv">$plugin_name</span>.a -o <span class="nv">$TIP_FLUTTER_HOME</span>/build/ios/Release-iphoneos/<span class="nv">$plugin_name</span>/lib<span class="nv">$plugin_name</span>.a &gt; /dev/null 2&gt;<span class="p">&amp;</span>1
</span></code></pre></td></tr></table></div></figure>


<p>这样就得到了plugin的产物.h和.a文件。</p>

<h2>3. 遗留问题</h2>

<p>分析Plugin的依赖时，如果native工程里已有，会造成冲突。例如<code>flutter_mmkv_cache</code>需要依赖<code>MMKV</code>，但是以前的native工程也依赖了<code>MMKV</code>，会导致库重复编译不过。目前我们的做法是，去掉native工程的<code>MMKV</code>。有更好的方法欢迎指正。</p>

<h2>4. 参考资料</h2>

<ul>
<li><p><a href="https://github.com/flutter/flutter/wiki/Add-Flutter-to-existing-apps">https://github.com/flutter/flutter/wiki/Add-Flutter-to-existing-apps</a></p></li>
<li><p><a href="https://tech.youzan.com/you-zan-flutter-hun-bian-fang-an/">https://tech.youzan.com/you-zan-flutter-hun-bian-fang-an/</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[__bridge __bridge retained __bridge transfer的区别]]></title>
    <link href="http://jason5.cn/blog/bridge-bridge-retained-bridge-transferde-qu-bie.html"/>
    <updated>2019-08-03T10:25:04+08:00</updated>
    <id>http://jason5.cn/blog/bridge-bridge-retained-bridge-transferde-qu-bie</id>
    <content type="html"><![CDATA[<p>iOS开发中，经常会接触到两种对象，Objective-C对象和Core Foundation对象，他们之间有所不同，可以互相转换。最大的不同之处在于，在ARC模式下，前者不用开发者手动管理内存，后者需要开发者手动管理内存，即调用CFRelease方法释放对象，否则会造成内存泄漏。转换的话主要会用到以下3个方法：</p>

<!--more-->


<ul>
<li>__bridge,</li>
<li>__bridge_retained</li>
<li>__bridge_transfer</li>
</ul>


<p>__bridge可以用于OC对象和CF对象互转，例如</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="bp">NSObject</span> <span class="o">*</span><span class="n">obj</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSObject</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>    <span class="c1">//retain count 1</span>
</span><span class='line'><span class="n">CFTypeRef</span> <span class="n">cfObj1</span> <span class="o">=</span> <span class="p">(</span><span class="k">__bridge</span> <span class="n">CFTypeRef</span><span class="p">)</span><span class="n">obj</span><span class="p">;</span> <span class="c1">//retain count 1</span>
</span><span class='line'><span class="bp">NSObject</span> <span class="o">*</span><span class="n">obj1</span> <span class="o">=</span> <span class="p">(</span><span class="k">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="n">cfObj1</span><span class="p">;</span>       <span class="c1">//retain count 2</span>
</span></code></pre></td></tr></table></div></figure>


<p>在这种转换方式下，如果是OC对象转换成CF对象，引用计数不变。如果是CF对象转换成OC对象，因为OC对象的默认修饰符是__strong，引用计数会+1，即以下两种写法是一样的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="bp">NSObject</span> <span class="o">*</span><span class="n">obj1</span> <span class="o">=</span> <span class="p">(</span><span class="k">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="n">cfObj1</span><span class="p">;</span>
</span><span class='line'><span class="bp">NSObject</span> <span class="k">__strong</span> <span class="o">*</span><span class="n">obj1</span> <span class="o">=</span> <span class="p">(</span><span class="k">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="n">cfObj1</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>__bridge_retained用于OC对象转换为CF对象，例如</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="bp">NSObject</span> <span class="o">*</span><span class="n">obj</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSObject</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>                <span class="c1">//retain count 1</span>
</span><span class='line'><span class="n">CFTypeRef</span> <span class="n">cfObj1</span> <span class="o">=</span> <span class="p">(</span><span class="n">__bridge_retained</span> <span class="n">CFTypeRef</span><span class="p">)</span><span class="n">obj</span><span class="p">;</span>    <span class="c1">//retain count 2</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//等价写法</span>
</span><span class='line'><span class="bp">NSObject</span> <span class="o">*</span><span class="n">obj</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSObject</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>                <span class="c1">//retain count 1</span>
</span><span class='line'><span class="n">CFTypeRef</span> <span class="n">cfObj1</span> <span class="o">=</span> <span class="p">(</span><span class="n">CFTypeRef</span><span class="p">)</span><span class="n">CFBridgingRetain</span><span class="p">(</span><span class="n">obj</span><span class="p">);</span>    <span class="c1">//retain count 2</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种情况下，obj的引用计数会+1，obj的释放不会影响到cfObj1的使用</p>

<p>__bridge_transfer用于CF对象转换为OC对象，例如</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="bp">NSObject</span> <span class="o">*</span><span class="n">obj</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSObject</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>                <span class="c1">//retain count 1</span>
</span><span class='line'><span class="n">CFTypeRef</span> <span class="n">cfObj1</span> <span class="o">=</span> <span class="p">(</span><span class="n">__bridge_retained</span> <span class="n">CFTypeRef</span><span class="p">)</span><span class="n">obj</span><span class="p">;</span>    <span class="c1">//retain count 2</span>
</span><span class='line'><span class="bp">NSObject</span> <span class="o">*</span><span class="n">obj1</span> <span class="o">=</span> <span class="p">(</span><span class="k">__bridge_transfer</span> <span class="kt">id</span><span class="p">)</span><span class="n">cfObj1</span><span class="p">;</span>          <span class="c1">//retain count 2</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//等价写法</span>
</span><span class='line'><span class="bp">NSObject</span> <span class="o">*</span><span class="n">obj</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSObject</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>                  <span class="c1">//retain count 1</span>
</span><span class='line'><span class="n">CFTypeRef</span> <span class="n">cfObj1</span> <span class="o">=</span> <span class="p">(</span><span class="n">__bridge_retained</span> <span class="n">CFTypeRef</span><span class="p">)</span><span class="n">obj</span><span class="p">;</span>      <span class="c1">//retain count 2</span>
</span><span class='line'><span class="bp">NSObject</span> <span class="o">*</span><span class="n">obj1</span> <span class="o">=</span> <span class="p">(</span><span class="bp">NSObject</span> <span class="o">*</span><span class="p">)</span><span class="n">CFBridgingRelease</span><span class="p">(</span><span class="n">cfObj1</span><span class="p">);</span>   <span class="c1">//retain count 2</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后来做个练习，看下以下代码输出什么</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="bp">NSObject</span> <span class="o">*</span><span class="n">obj</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSObject</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>                <span class="c1">//retain count 1</span>
</span><span class='line'><span class="n">CFTypeRef</span> <span class="n">cfObj</span> <span class="o">=</span> <span class="p">(</span><span class="n">__bridge_retained</span> <span class="n">CFTypeRef</span><span class="p">)</span><span class="n">obj</span><span class="p">;</span>     <span class="c1">//retain count 2</span>
</span><span class='line'><span class="n">CFTypeRef</span> <span class="n">cfObj1</span> <span class="o">=</span> <span class="p">(</span><span class="k">__bridge</span> <span class="n">CFTypeRef</span><span class="p">)</span><span class="n">obj</span><span class="p">;</span>             <span class="c1">//retain count 2</span>
</span><span class='line'><span class="n">CFTypeRef</span> <span class="n">cfObj2</span> <span class="o">=</span> <span class="p">(</span><span class="n">__bridge_retained</span> <span class="n">CFTypeRef</span><span class="p">)</span><span class="n">obj</span><span class="p">;</span>    <span class="c1">//retain count 3</span>
</span><span class='line'>
</span><span class='line'><span class="bp">NSObject</span> <span class="o">*</span><span class="n">obj1</span> <span class="o">=</span> <span class="p">(</span><span class="k">__bridge_transfer</span> <span class="kt">id</span><span class="p">)</span><span class="n">cfObj1</span><span class="p">;</span>          <span class="c1">//retain count 3</span>
</span><span class='line'><span class="bp">NSObject</span> <span class="o">*</span><span class="n">obj2</span> <span class="o">=</span> <span class="p">(</span><span class="k">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="n">cfObj2</span><span class="p">;</span>                   <span class="c1">//retain count 4</span>
</span><span class='line'>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;obj retainCount %ld&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">CFGetRetainCount</span><span class="p">(</span><span class="n">cfObj</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="bp">NSString</span> <span class="o">*</span><span class="n">str</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;testStr&quot;</span><span class="p">];</span>
</span><span class='line'><span class="n">CFStringRef</span> <span class="n">cfStr</span> <span class="o">=</span> <span class="p">(</span><span class="k">__bridge</span> <span class="n">CFStringRef</span><span class="p">)</span><span class="n">str</span><span class="p">;</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;str retainCount %ld&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">CFGetRetainCount</span><span class="p">(</span><span class="n">cfStr</span><span class="p">));</span>   <span class="c1">//retain count 9223372036854775807 = 0x7FFFFFFFFFFFFFFF</span>
</span></code></pre></td></tr></table></div></figure>


<p>答案是</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">obj</span> <span class="n">retainCount</span> <span class="mi">4</span>
</span><span class='line'><span class="n">str</span> <span class="n">retainCount</span> <span class="mi">9223372036854775807</span>
</span></code></pre></td></tr></table></div></figure>


<p>str特殊一点，会被当做是字符串常量，retainCount是一个最大值，保证不会被系统回收。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 中的 NSProxy]]></title>
    <link href="http://jason5.cn/blog/ios-zhong-de-nsproxy.html"/>
    <updated>2019-06-10T20:03:28+08:00</updated>
    <id>http://jason5.cn/blog/ios-zhong-de-nsproxy</id>
    <content type="html"><![CDATA[<p>在日常开发中，NSObject 经常会被使用到。但是 NSProxy 却很少用。这个类顾名思义，是用来做代理的，任何消息都可以对它发送，在它内部，再指向具体的实现。</p>

<!--more-->


<p><img src="https://raw.githubusercontent.com/joshuaton/img/master/20190610195500.png" alt="" /></p>

<p>如上图所示，调用者可以给 NSProxy 发送消息，而不用关心内部实现，NSProxy 则可以根据具体的 SEL 去调用真正的实现着 ClassA 或者 ClassB。需要说明的是，NSProxy 不能直接使用，需要自己写一个类继承它。</p>

<p>接下来我们来看实例代码。</p>

<p>先定义一个类 MyProxy 继承自 NSProxy：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">//MyProxy.h</span>
</span><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt; </span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">MyProxy</span> : <span class="bp">NSProxy</span>
</span><span class='line'><span class="p">-(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">init</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">//MyProxy.m</span>
</span><span class='line'><span class="cp">#import &quot;MyProxy.h&quot;</span>
</span><span class='line'><span class="cp">#import &lt;objc/runtime.h&gt;</span>
</span><span class='line'><span class="cp">#import &quot;Real.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">MyProxy</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="n">Real</span> <span class="o">*</span><span class="n">real</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">MyProxy</span>
</span><span class='line'>
</span><span class='line'><span class="p">-(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">init</span><span class="p">{</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">real</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Real</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">forwardInvocation:</span><span class="p">(</span><span class="bp">NSInvocation</span> <span class="o">*</span><span class="p">)</span><span class="nv">anInvocation</span><span class="p">{</span>
</span><span class='line'>    <span class="kt">SEL</span> <span class="n">sel</span> <span class="o">=</span> <span class="n">anInvocation</span><span class="p">.</span><span class="n">selector</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">([</span><span class="nb">self</span><span class="p">.</span><span class="n">real</span> <span class="nl">respondsToSelector</span><span class="p">:</span><span class="n">sel</span><span class="p">]){</span>
</span><span class='line'>        <span class="p">[</span><span class="n">anInvocation</span> <span class="nl">invokeWithTarget</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">real</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSMethodSignature</span> <span class="o">*</span><span class="p">)</span><span class="nf">methodSignatureForSelector:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">sel</span><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">([</span><span class="nb">self</span><span class="p">.</span><span class="n">real</span> <span class="nl">respondsToSelector</span><span class="p">:</span><span class="n">sel</span><span class="p">]){</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">real</span> <span class="nl">methodSignatureForSelector</span><span class="p">:</span><span class="n">sel</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>MyProxy 需要实现两个方法 forwardInvocation: 和 methodSignatureForSelector:</p>

<p>在 forwardInvocation: 方法中，将真实的实现转发给了 Real 的实例，由其去实现。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">//Real.h</span>
</span><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Real</span> : <span class="bp">NSObject</span>
</span><span class='line'><span class="p">-(</span><span class="kt">void</span><span class="p">)</span><span class="nf">hello</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">//Real.m</span>
</span><span class='line'><span class="cp">#import &quot;Real.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Real</span>
</span><span class='line'>
</span><span class='line'><span class="p">-(</span><span class="kt">void</span><span class="p">)</span><span class="nf">hello</span><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;hello11&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>下边是调用方代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="n">MyProxy</span> <span class="o">*</span><span class="n">proxy</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MyProxy</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">proxy</span> <span class="nl">performSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">hello</span><span class="p">)];</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行后，在控制台输出 hello11，表明 Real 实例的 hello 方法得到执行。</p>

<p>NSProxy 可以用来实现双继承，更多好玩的玩法可以去探索。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[通过源码理解Autorelease Pool原理]]></title>
    <link href="http://jason5.cn/blog/tong-guo-yuan-ma-li-jie-autorelease-poolyuan-li.html"/>
    <updated>2019-06-01T20:52:49+08:00</updated>
    <id>http://jason5.cn/blog/tong-guo-yuan-ma-li-jie-autorelease-poolyuan-li</id>
    <content type="html"><![CDATA[<h2>1. Autorelease Pool 是什么</h2>

<p>iOS 的内存管理使用引用计数机制。当对象被初始化或者被强引用赋值时，对象的引用计数 +1，当对象离开所在函数作用域或者被设置为 nil 后，引用计数 -1。当对象的引用计数为 0 时，操作系统会释放掉对象所占用的内存。</p>

<!--more-->


<p>我们先来看一下这段代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="p">-(</span><span class="bp">NSObject</span> <span class="o">*</span><span class="p">)</span><span class="nf">getObj</span><span class="p">{</span>
</span><span class='line'>    <span class="bp">NSObject</span> <span class="o">*</span><span class="n">obj</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSObject</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">obj</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在 getObj 执行完后，obj 的作用域已经结束，obj 的引用计数为 0，应该马上被系统回收。那么问题就出现了，obj 是作为函数的返回给调用者的，被回收后调用者拿到的对象就是nil了，明显不符合调用者的预期。这时候 Autorelease Pool 就派上用场了，当 getObj 函数结束时，obj 并没有进行引用计数 -1 操作，而是将 obj 放入了 Autorelease Pool。Autorelease Pool 是一个可以存放多个对象指针的对象池，当 Autorelease Pool 被销毁时，会对所有 Autorelease Pool 中的对象执行引用计数 -1 操作，这时候才会回收 obj。相当于放入 Autorelease Pool 的对象被延迟释放了。这样的机制能够保证调用者能够正常拿取到 obj 的引用。</p>

<p>那么 Autorelease Pool 是什么时候被创建和销毁的呢？对于 ARC 来讲，大多数情况下，是不需要开发人员自己创建和销毁 Autorelease Pool 的（后面再讲少数情况）。Autorelease Pool 是在 Runloop 的一次循环中，被创建和释放的，是系统自己做的，开发人员不能控制创建和释放的时机，所以开发人员也不能知道 Autorelease Pool 里的对象什么时候被释放的。下边是网上看到的一个图，说明了 Autorelease Pool 创建和释放的时机。</p>

<p><img src="https://raw.githubusercontent.com/joshuaton/img/master/20190601222200.png" alt="" /></p>

<h2>2. AutoRelease Pool如何使用</h2>

<p>在 ARC 情况下，AutoRelease Pool 的使用非常简单，以 iOS 工程里的 main.m 代码为例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">@autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">UIApplicationMain</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span> <span class="nb">nil</span><span class="p">,</span> <span class="n">NSStringFromClass</span><span class="p">([</span><span class="n">AppDelegate</span> <span class="k">class</span><span class="p">]));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>UIApplicationMain 的调用被 @autoreleasepool{} 整个包裹起来，表示 UIApplicationMain 函数执行之前，创建了一个 AutoRelease Pool，在函数返回之后，释放了之前创建的 AutoRelease Pool。在此期间，如果有对象要加入 AutoRelease Pool，就是加入的这个创建的 AutoRelease Pool。</p>

<p>上边提到，在大多数情况下，开发人员不需要自己创建和销毁自动释放池，现在谈一下少数情况。开发人员需要自己使用 AutoRelease Pool 的情形，通常是如下情况：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">1000000</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="err">    </span><span class="k">@autoreleasepool</span> <span class="p">{</span>
</span><span class='line'><span class="err">        </span><span class="bp">NSString</span> <span class="o">*</span><span class="n">str</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;hi + %d&quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">];</span>
</span><span class='line'><span class="err">    </span><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果不加上 @autoreleasepool{} 代码块，循环里的临时变量 str 会被加入到当前的 AutoRelease Pool，而这个 AutoRelease Pool 的释放时机，如上所说，是需要等到当前 Runloop 一个循环后才会释放，而这个时机我们并不能控制。这样，在 Runloop 一个循环结束前，就会出现很多临时变量 str 不用了，但是占用内存的情况。所以这里手动加上 @autoreleasepool{} 代码块，每次循环都创建一个新的 AutoRelease Pool， str 会被加入到这个新的 AutoRelease Pool，在每次 for 循环结束时，AutoRelease Pool 被释放，从而 str 也被及时释放，内存能够得到及时的清理。</p>

<h2>3. Autorelease Pool的实现原理</h2>

<p>我们从系统使用 @autoreleasepool{} 的代码入手，将 main.m 代码编译成 main.cpp 代码进行进一步分析，在 main.m 文件目录执行下面的编译命令：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>clang -x objective-c -rewrite-objc -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk main.m
</span></code></pre></td></tr></table></div></figure>


<p>执行完后会生成文件 main.cpp，在文件最后会看到如下代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="cm">/* @autoreleasepool */</span> <span class="p">{</span> <span class="n">__AtAutoreleasePool</span> <span class="n">__autoreleasepool</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">UIApplicationMain</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span> <span class="n">__null</span><span class="p">,</span> <span class="n">NSStringFromClass</span><span class="p">(((</span><span class="n">Class</span> <span class="p">(</span><span class="o">*</span><span class="p">)(</span><span class="n">id</span><span class="p">,</span> <span class="n">SEL</span><span class="p">))(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">objc_msgSend</span><span class="p">)((</span><span class="n">id</span><span class="p">)</span><span class="n">objc_getClass</span><span class="p">(</span><span class="s">&quot;AppDelegate&quot;</span><span class="p">),</span> <span class="n">sel_registerName</span><span class="p">(</span><span class="s">&quot;class&quot;</span><span class="p">))));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，UIApplicationMain 执行前，增加了一行代码 <strong>AtAutoreleasePool </strong>autoreleasepool，这里声明了一个类型为 <strong>AtAutoreleasePool 的对象。在文件里搜索  </strong>AtAutoreleasePool，发现如下代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">struct</span> <span class="n">__AtAutoreleasePool</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">__AtAutoreleasePool</span><span class="p">()</span> <span class="p">{</span><span class="n">atautoreleasepoolobj</span> <span class="o">=</span> <span class="n">objc_autoreleasePoolPush</span><span class="p">();}</span>
</span><span class='line'>  <span class="o">~</span><span class="n">__AtAutoreleasePool</span><span class="p">()</span> <span class="p">{</span><span class="n">objc_autoreleasePoolPop</span><span class="p">(</span><span class="n">atautoreleasepoolobj</span><span class="p">);}</span>
</span><span class='line'>  <span class="kt">void</span> <span class="o">*</span> <span class="n">atautoreleasepoolobj</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>__AtAutoreleasePool 是一个结构体，在构造函数和析构函数里，分别调用了 objc_autoreleasePoolPush() 和 objc_autoreleasePoolPop(atautoreleasepoolobj) 方法。也就是说，在 UIApplicationMain 执行前，首先先执行了 objc_autoreleasePoolPush 方法，然后执行了 objc_autoreleasePoolPop 方法，objc_autoreleasePoolPush 是在创建 Autorelease Pool，objc_autoreleasePoolPop 是在销毁 Autorelease Pool。接下来我们通过源码分析创建和销毁 Autorelease Pool 都做了什么。</p>

<p>这两个方法的代码在<code>NSObject.mm</code>里，代码是开源的，可以到 <a href="https://opensource.apple.com/release/macos-10141.html">https://opensource.apple.com/release/macos-10141.html</a> 下载，笔者查看的是最新的 objc4-750.1 版本。所有的历史版本可以在这里浏览 <a href="https://opensource.apple.com/source/objc4/">https://opensource.apple.com/source/objc4/</a> 。</p>

<h3>3.1 创建Autorelease Pool</h3>

<p>首先看 objc_autoreleasePoolPush 的实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">void</span> <span class="o">*</span>
</span><span class='line'><span class="nf">objc_autoreleasePoolPush</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">AutoreleasePoolPage</span><span class="o">::</span><span class="n">push</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>objc_autoreleasePoolPush 的实现很简单，直接调用了AutoreleasePoolPage::push() 。先来看下 AutoreleasePoolPage 是什么：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">class</span> <span class="nc">AutoreleasePoolPage</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">magic_t</span> <span class="k">const</span> <span class="n">magic</span><span class="p">;</span>
</span><span class='line'>    <span class="n">id</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">pthread_t</span> <span class="k">const</span> <span class="kr">thread</span><span class="p">;</span>
</span><span class='line'>    <span class="n">AutoreleasePoolPage</span> <span class="o">*</span> <span class="k">const</span> <span class="n">parent</span><span class="p">;</span>
</span><span class='line'>    <span class="n">AutoreleasePoolPage</span> <span class="o">*</span><span class="n">child</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="k">const</span> <span class="n">depth</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">hiwat</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>省去其他的宏定义、常量定义和方法，AutoreleasePoolPage 有如上属性，parent 和 child 同样指向AutoreleasePoolPage， 很容易猜测 AutoreleasePoolPage 是双向链表中的一个节点，后续的代码会印证这个猜测。next 是一个指针，是一个比较重要的属性，先留意一下，后边会讲。其余的属性对理解 Autorelease Pool 原理不是特别重要，暂时先都忽略。</p>

<p>AutoreleasePoolPage 对象分配内存方法如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="o">*</span> <span class="k">operator</span> <span class="nf">new</span><span class="p">(</span><span class="kt">size_t</span> <span class="n">size</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="err">    </span><span class="k">return</span> <span class="n">malloc_zone_memalign</span><span class="p">(</span><span class="n">malloc_default_zone</span><span class="p">(),</span> <span class="n">SIZE</span><span class="p">,</span> <span class="n">SIZE</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>SIZE 被定义为 PAGE_MAX_SIZE，PAGE_MAX_SIZE 是虚拟内存一页的大小，网上查资料说是0x1000字节。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="err">    </span><span class="k">static</span> <span class="kt">size_t</span> <span class="k">const</span> <span class="n">SIZE</span> <span class="o">=</span>
</span><span class='line'><span class="cp">#if PROTECT_AUTORELEASEPOOL</span>
</span><span class='line'>        <span class="n">PAGE_MAX_SIZE</span><span class="p">;</span>  <span class="c1">// must be multiple of vm page size</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'>        <span class="n">PAGE_MAX_SIZE</span><span class="p">;</span>  <span class="c1">// size and alignment, power of 2</span>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以，一个 AutoreleasePoolPage 对象所占用的内存大小是 PAGE_MAX_SIZE。</p>

<p>看到这里我们已经清楚 AutoreleasePoolPage 的内部结构，用一张图来表示：</p>

<p><img src="https://raw.githubusercontent.com/joshuaton/img/master/20190602152848.png" alt="" /></p>

<p>除了存储 AutoreleasePoolPage 的成员变量外，其余空间会用来存储加入到 Autorelease Pool 的对象指针。</p>

<p>继续看 AutoreleasePoolPage::push 方法的实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="o">*</span><span class="nf">push</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">id</span> <span class="o">*</span><span class="n">dest</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">DebugPoolAllocation</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Each autorelease pool starts on a new pool page.</span>
</span><span class='line'>        <span class="n">dest</span> <span class="o">=</span> <span class="n">autoreleaseNewPage</span><span class="p">(</span><span class="n">POOL_BOUNDARY</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">dest</span> <span class="o">=</span> <span class="n">autoreleaseFast</span><span class="p">(</span><span class="n">POOL_BOUNDARY</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">assert</span><span class="p">(</span><span class="n">dest</span> <span class="o">==</span> <span class="n">EMPTY_POOL_PLACEHOLDER</span> <span class="o">||</span> <span class="o">*</span><span class="n">dest</span> <span class="o">==</span> <span class="n">POOL_BOUNDARY</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">dest</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>会调用 autoreleaseFast 方法，方法的参数是 POOL_BOUNDARY ，关于 POOL_BOUNDARY 是什么，这个之后再说：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">static</span> <span class="kr">inline</span> <span class="n">id</span> <span class="o">*</span><span class="nf">autoreleaseFast</span><span class="p">(</span><span class="n">id</span> <span class="n">obj</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">AutoreleasePoolPage</span> <span class="o">*</span><span class="n">page</span> <span class="o">=</span> <span class="n">hotPage</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">page</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">page</span><span class="o">-&gt;</span><span class="n">full</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">page</span><span class="o">-&gt;</span><span class="n">add</span><span class="p">(</span><span class="n">obj</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">page</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">autoreleaseFullPage</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">page</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">autoreleaseNoPage</span><span class="p">(</span><span class="n">obj</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>首先拿到当前的 hotPage，hotPage 可以理解为正在使用的 AutoreleasePoolPage，也就是双向链表末端的 AutoreleasePoolPage。然后分为三种情况：</p>

<ol>
<li><p>如果有 hotPage，并且 hotPage 没有满的时候，调用 page->add(obj)</p></li>
<li><p>如果有 hotPage，但是 hotPage 已经满的时候，调用 autoreleaseFullPage(obj, page)</p></li>
<li><p>如果没有 hotPage，调用 autoreleaseNoPage(obj)</p></li>
</ol>


<p>以下对 3 种情况分别进行说明：</p>

<p>第 1 种情况，查看 AutoreleasePoolPage 的 add 方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">id</span> <span class="o">*</span><span class="nf">add</span><span class="p">(</span><span class="n">id</span> <span class="n">obj</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">assert</span><span class="p">(</span><span class="o">!</span><span class="n">full</span><span class="p">());</span>
</span><span class='line'>    <span class="n">unprotect</span><span class="p">();</span>
</span><span class='line'>    <span class="n">id</span> <span class="o">*</span><span class="n">ret</span> <span class="o">=</span> <span class="n">next</span><span class="p">;</span>  <span class="c1">// faster than `return next-1` because of aliasing</span>
</span><span class='line'>    <span class="o">*</span><span class="n">next</span><span class="o">++</span> <span class="o">=</span> <span class="n">obj</span><span class="p">;</span>
</span><span class='line'>    <span class="n">protect</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>将 next 指针指向 obj， 然后next++，返回obj。所以，这里我们可以知道，AutoreleasePoolPage 的 next 指针是指向下一个空位置，当有对象要被加入到 AutoreleasePoolPage 的时候，会加入到这个位置。</p>

<p>第 2 种情况，查看 autoreleaseFullPage 的实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">id</span> <span class="o">*</span><span class="nf">autoreleaseFullPage</span><span class="p">(</span><span class="n">id</span> <span class="n">obj</span><span class="p">,</span> <span class="n">AutoreleasePoolPage</span> <span class="o">*</span><span class="n">page</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// The hot page is full. </span>
</span><span class='line'>    <span class="c1">// Step to the next non-full page, adding a new page if necessary.</span>
</span><span class='line'>    <span class="c1">// Then add the object to that page.</span>
</span><span class='line'>    <span class="n">assert</span><span class="p">(</span><span class="n">page</span> <span class="o">==</span> <span class="n">hotPage</span><span class="p">());</span>
</span><span class='line'>    <span class="n">assert</span><span class="p">(</span><span class="n">page</span><span class="o">-&gt;</span><span class="n">full</span><span class="p">()</span>  <span class="o">||</span>  <span class="n">DebugPoolAllocation</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">page</span><span class="o">-&gt;</span><span class="n">child</span><span class="p">)</span> <span class="n">page</span> <span class="o">=</span> <span class="n">page</span><span class="o">-&gt;</span><span class="n">child</span><span class="p">;</span>
</span><span class='line'>        <span class="k">else</span> <span class="n">page</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AutoreleasePoolPage</span><span class="p">(</span><span class="n">page</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">page</span><span class="o">-&gt;</span><span class="n">full</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">setHotPage</span><span class="p">(</span><span class="n">page</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">page</span><span class="o">-&gt;</span><span class="n">add</span><span class="p">(</span><span class="n">obj</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>新建一个 page，将新建的 page 设置为 hotPage，并且将 obj 加入到此 page 中，通过进一步查看 AutoreleasePoolPage 的构造函数会发现，新 page 的 parent 指针会设置成这个函数传入的老 page，新老 page 就形成了双向链表的结构。</p>

<p>第 3 种情况，查看 autoreleaseNoPage 的实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">id</span> <span class="o">*</span><span class="nf">autoreleaseNoPage</span><span class="p">(</span><span class="n">id</span> <span class="n">obj</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">pushExtraBoundary</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Install the first page.</span>
</span><span class='line'>    <span class="n">AutoreleasePoolPage</span> <span class="o">*</span><span class="n">page</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AutoreleasePoolPage</span><span class="p">(</span><span class="n">nil</span><span class="p">);</span>
</span><span class='line'>    <span class="n">setHotPage</span><span class="p">(</span><span class="n">page</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Push a boundary on behalf of the previously-placeholder&#39;d pool.</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">pushExtraBoundary</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">page</span><span class="o">-&gt;</span><span class="n">add</span><span class="p">(</span><span class="n">POOL_BOUNDARY</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Push the requested object or pool.</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">page</span><span class="o">-&gt;</span><span class="n">add</span><span class="p">(</span><span class="n">obj</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>新建一个 AutoreleasePoolPage ，然后再加入 obj ，创建 Autorelease Pool 的时候，obj 的值是 POOL_BOUNDARY。</p>

<p>我们用一张图来表示 Autorelease Pool 创建时候的情况：</p>

<p><img src="https://raw.githubusercontent.com/joshuaton/img/master/20190602153813.png" alt="" /></p>

<p>在这里我们来说一下 POOL_BOUNDARY 是什么。我们可以发现其定义是为 nil</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="cp">#define POOL_BOUNDARY nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>从字面意义上来讲，这是一个边界标记，当每次创建一个新的 Autorelease Pool 时，我们都会首先加入一个 POOL_BOUNDARY 标记在内存中，这样我们就知道了不同 Autorelease Pool 的分割位置在哪里。当我们需要最后创建的 Autorelease Pool 中的所有对象时，我们就只要释放这个 POOL_BOUNDARY 位置之后的对象。</p>

<h3>3.2 将对象加入Autorelease Pool</h3>

<p>创建 Autorelease Pool 的代码到此就基本看完了，我们马上再来看下将一个对象加入 Autorelease Pool 会干些什么。将对象加入 Autorelease Pool 会调用 NSObject 的 autorelease 方法，实现如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">static</span> <span class="kr">inline</span> <span class="n">id</span> <span class="nf">autorelease</span><span class="p">(</span><span class="n">id</span> <span class="n">obj</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">assert</span><span class="p">(</span><span class="n">obj</span><span class="p">);</span>
</span><span class='line'>    <span class="n">assert</span><span class="p">(</span><span class="o">!</span><span class="n">obj</span><span class="o">-&gt;</span><span class="n">isTaggedPointer</span><span class="p">());</span>
</span><span class='line'>    <span class="n">id</span> <span class="o">*</span><span class="n">dest</span> <span class="n">__unused</span> <span class="o">=</span> <span class="n">autoreleaseFast</span><span class="p">(</span><span class="n">obj</span><span class="p">);</span>
</span><span class='line'>    <span class="n">assert</span><span class="p">(</span><span class="o">!</span><span class="n">dest</span>  <span class="o">||</span>  <span class="n">dest</span> <span class="o">==</span> <span class="n">EMPTY_POOL_PLACEHOLDER</span>  <span class="o">||</span>  <span class="o">*</span><span class="n">dest</span> <span class="o">==</span> <span class="n">obj</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">obj</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>实际上是在调用 autoreleaseFast 方法。原来，创建一个 Autorelease Pool 和将一个 obj 加入 Autorelease Pool 其实代码流程是一样的，不同的是创建时候添加的是 POOL_BOUNDARY，添加时候添加的是 obj。</p>

<p>通过以上代码，我们知道往 Autorelease Pool 里添加多个对象后是什么情况了，用一张图来表示：</p>

<p><img src="https://raw.githubusercontent.com/joshuaton/img/master/20190602154506.png" alt="" /></p>

<p>假设我们有 obj0 到 obj4 一共 5 个对象需要添加进 Autorelease Pool。第一个 AutorelasePoolPage 没有用满时，直接往里边加，满了之后，新建一个 AutorelasePoolPage，在往里边继续加。所以，obj0、obj1、obj2、obj3 被添加到了第 1 个 AutorelasePoolPage 中，obj4 被添加到了第 2 个 AutorelasePoolPage 中。真实情况下，AutorelasePoolPage 当然不只存储 4 个对象，这里只是方便举例说明。</p>

<p>如果在 Autorelase Pool 没有销毁的时候，再新建一个 Autorelase Pool，则往 AutorelasePoolPage 的 next 位置加入 POOL_BOUNDARY。如果又有对象要添加进新的 Autorelase Pool，则往 AutorelasePoolPage 继续添加 obj5 和 obj6，如下图：</p>

<p><img src="https://raw.githubusercontent.com/joshuaton/img/master/20190602154735.png" alt="" /></p>

<p>可以看到，POOL_BOUNDARY 是边界对象，标识了多个 Autorelease Pool 的分割边界。</p>

<h3>3.3 销毁Autorelease Pool</h3>

<p>前边提到，销毁 Autorelease Pool 会调用 objc_autoreleasePoolPop 方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="kt">void</span>
</span><span class='line'><span class="nf">objc_autoreleasePoolPop</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">ctxt</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="err">    </span><span class="n">AutoreleasePoolPage</span><span class="o">::</span><span class="n">pop</span><span class="p">(</span><span class="n">ctxt</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>直接查看 AutoreleasePoolPage::pop 代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="nf">pop</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">token</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">AutoreleasePoolPage</span> <span class="o">*</span><span class="n">page</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">id</span> <span class="o">*</span><span class="n">stop</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">page</span> <span class="o">=</span> <span class="n">pageForPointer</span><span class="p">(</span><span class="n">token</span><span class="p">);</span>
</span><span class='line'>    <span class="n">stop</span> <span class="o">=</span> <span class="p">(</span><span class="kt">id</span> <span class="o">*</span><span class="p">)</span><span class="n">token</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">PrintPoolHiwat</span><span class="p">)</span> <span class="n">printHiwat</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">page</span><span class="o">-&gt;</span><span class="n">releaseUntil</span><span class="p">(</span><span class="n">stop</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// memory: delete empty children</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">DebugPoolAllocation</span>  <span class="o">&amp;&amp;</span>  <span class="n">page</span><span class="o">-&gt;</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// special case: delete everything during page-per-pool debugging</span>
</span><span class='line'>        <span class="n">AutoreleasePoolPage</span> <span class="o">*</span><span class="n">parent</span> <span class="o">=</span> <span class="n">page</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">;</span>
</span><span class='line'>        <span class="n">page</span><span class="o">-&gt;</span><span class="n">kill</span><span class="p">();</span>
</span><span class='line'>        <span class="n">setHotPage</span><span class="p">(</span><span class="n">parent</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">DebugMissingPools</span>  <span class="o">&amp;&amp;</span>  <span class="n">page</span><span class="o">-&gt;</span><span class="n">empty</span><span class="p">()</span>  <span class="o">&amp;&amp;</span>  <span class="o">!</span><span class="n">page</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// special case: delete everything for pop(top) </span>
</span><span class='line'>        <span class="c1">// when debugging missing autorelease pools</span>
</span><span class='line'>        <span class="n">page</span><span class="o">-&gt;</span><span class="n">kill</span><span class="p">();</span>
</span><span class='line'>        <span class="n">setHotPage</span><span class="p">(</span><span class="nb">nil</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">page</span><span class="o">-&gt;</span><span class="n">child</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// hysteresis: keep one empty child if page is more than half full</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">page</span><span class="o">-&gt;</span><span class="n">lessThanHalfFull</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">page</span><span class="o">-&gt;</span><span class="n">child</span><span class="o">-&gt;</span><span class="n">kill</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">page</span><span class="o">-&gt;</span><span class="n">child</span><span class="o">-&gt;</span><span class="n">child</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">page</span><span class="o">-&gt;</span><span class="n">child</span><span class="o">-&gt;</span><span class="n">child</span><span class="o">-&gt;</span><span class="n">kill</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>回顾下之前的代码，token 为创建 Autorelease Pool 时返回的 POOL_BOUNDARY，这个会作为 pageForPointer 的输入参数。 pageForPointer 函数的实现如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">static</span> <span class="n">AutoreleasePoolPage</span> <span class="o">*</span><span class="nf">pageForPointer</span><span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">p</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">pageForPointer</span><span class="p">((</span><span class="kt">uintptr_t</span><span class="p">)</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">AutoreleasePoolPage</span> <span class="o">*</span><span class="nf">pageForPointer</span><span class="p">(</span><span class="kt">uintptr_t</span> <span class="n">p</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">AutoreleasePoolPage</span> <span class="o">*</span><span class="n">result</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">uintptr_t</span> <span class="n">offset</span> <span class="o">=</span> <span class="n">p</span> <span class="o">%</span> <span class="n">SIZE</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">assert</span><span class="p">(</span><span class="n">offset</span> <span class="o">&gt;=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">AutoreleasePoolPage</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="n">AutoreleasePoolPage</span> <span class="o">*</span><span class="p">)(</span><span class="n">p</span> <span class="o">-</span> <span class="n">offset</span><span class="p">);</span>
</span><span class='line'>    <span class="n">result</span><span class="o">-&gt;</span><span class="n">fastcheck</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过 POOL_BOUNDARY 的内存地址和 AutoreleasePoolPage 的内存占用 SIZE，可以算出 POOL_BOUNDARY 相对于 AutoreleasePoolPage 起始地址的偏移量，从而计算出创建 Autorelease Pool 时候的那个 AutoreleasePoolPage 的内存起始地址。所以，pageForPointer 函数返回当前 Autorelease Pool 创建时候的 AutoreleasePoolPage。</p>

<p>接下来看 page->releaseUntil(stop) 的实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="kt">void</span> <span class="nf">releaseUntil</span><span class="p">(</span><span class="kt">id</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// Not recursive: we don&#39;t want to blow out the stack </span>
</span><span class='line'>    <span class="c1">// if a thread accumulates a stupendous amount of garbage</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">this</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Restart from hotPage() every time, in case -release </span>
</span><span class='line'>        <span class="c1">// autoreleased more objects</span>
</span><span class='line'>        <span class="n">AutoreleasePoolPage</span> <span class="o">*</span><span class="n">page</span> <span class="o">=</span> <span class="n">hotPage</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// fixme I think this `while` can be `if`, but I can&#39;t prove it</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">page</span><span class="o">-&gt;</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">page</span> <span class="o">=</span> <span class="n">page</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">;</span>
</span><span class='line'>            <span class="n">setHotPage</span><span class="p">(</span><span class="n">page</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">page</span><span class="o">-&gt;</span><span class="n">unprotect</span><span class="p">();</span>
</span><span class='line'>        <span class="kt">id</span> <span class="n">obj</span> <span class="o">=</span> <span class="o">*--</span><span class="n">page</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>        <span class="n">memset</span><span class="p">((</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">page</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">,</span> <span class="n">SCRIBBLE</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">page</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">));</span>
</span><span class='line'>        <span class="n">page</span><span class="o">-&gt;</span><span class="n">protect</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">obj</span> <span class="o">!=</span> <span class="n">POOL_BOUNDARY</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">objc_release</span><span class="p">(</span><span class="n">obj</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">setHotPage</span><span class="p">(</span><span class="n">this</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>从当前的 hotPage 开始，依次对 AutoreleasePoolPage 里的对象执行 objc_release 操作，直到遇到 POOL_BOUNDARY 对象。这就是对当前 Autorelease Pool 里的所有对象进行释放操作。用一张图来表示这个过程会更加直观：</p>

<p><img src="https://raw.githubusercontent.com/joshuaton/img/master/Canvas%205.jpg" alt="" /></p>

<p>我们可以思考一下为什么要这么设计 Autorelease Pool。由于要加入 Autorelease Pool 的对象个数是不固定的，所以系统只能一次分配固定大小的内存，也就是一个 AutoreleasePoolPage的大小。当加满了之后，再在双向链表的最后加上一个 AutoreleasePoolPage。这里其实跟操作系统给应用程序分配内存空间是一样的，也是按页分配。而如何区分多个 Autorelease Pool，就是用了 POOL_BOUNDARY 来做边界标记。</p>

<h2>4. 总结</h2>

<p>到此位置，我们已经分析完了创建 Autorelease Pool，往 Autorelease Pool 里添加对象，释放 Autorelease Pool 的主要代码。其中还有一些分支代码和异常情况的处理被省略，感兴趣的同学可以自行查看其余源码。</p>

<p>最后我们总结一下 Autorelease Pool 的实现原理：</p>

<ol>
<li><p>Autorelease Pool 是由多个 AutoreleasePoolPage 对象以双向链表的方式组织起来的数据结构。</p></li>
<li><p>每个 AutoreleasePoolPage 只能存储有限个对象指针。当新的对象加入 Autorelease Pool 的时候，如果当前的 AutoreleasePoolPage 存储空间不够，会新初始化一个 AutoreleasePoolPage，加入到链表末端。</p></li>
<li><p>Autorelease Pool 可以被嵌套创建。创建一个新的 Autorelease Pool 的时候，会在当前 AutoreleasePoolPage 中插入边界对象 POOL_BOUNDARY，以和上一个 Autorelease Pool 以区分。</p></li>
<li><p>当 Autorelease Pool 销毁的时候，对 AutoreleasePoolPage 里存储的所有对象依次从后往前调用 release，直到遇到对象 POOL_BOUNDARY，表明当前 Autorelease Pool 中的对象已经被全部释放。</p></li>
</ol>


<h2>5. 参考资料</h2>

<p><a href="https://juejin.im/post/5a66e28c6fb9a01cbf387da1">https://juejin.im/post/5a66e28c6fb9a01cbf387da1</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[记一次数据库被攻击的经历]]></title>
    <link href="http://jason5.cn/blog/ji-%5B%3F%5D-ci-shu-ju-ku-bei-gong-ji-de-jing-li.html"/>
    <updated>2019-05-14T15:05:33+08:00</updated>
    <id>http://jason5.cn/blog/ji-[?]-ci-shu-ju-ku-bei-gong-ji-de-jing-li</id>
    <content type="html"><![CDATA[<h3>1. 问题出现</h3>

<p>之前为了练手做了一个基于nodejs的后台系统。有一天突然发现http api访问没有数据了，赶快打开浏览器看了下报错信息，发现数据库的表找不到了，于是觉得问题可能有点大，马上登录服务器查看。</p>

<!--more-->


<p>登录服务器后一看，发现数据库里的表被删掉了，新建了一个库叫PLEASE_READ_ME_XMG，里边有个表叫WARNING，WARNING表的结构如下图</p>

<p><img src="https://raw.githubusercontent.com/joshuaton/img/master/20190514154008.png" alt="" /></p>

<p>猜测warning是警告信息，Bitcoin_Address是比特币钱包地址，Email是黑客联系邮箱。不过发现这个表里并没有数据，真不知道黑客是什么目的，还是只是恶作剧。上网搜索关键字“PLEASE_READ_ME_XMG”也印证了跟比特币勒索相关。</p>

<h3>2. 查找问题</h3>

<p>然后开始查找问题，先去mysql数据文件夹查看表文件<code>WARNING.frm</code>和<code>WARNING.ibd</code>的生成时间，确定了攻击发生的时间点。</p>

<p>用命令查看linux机器登录记录</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>who /var/log/wtmp
</span></code></pre></td></tr></table></div></figure>


<p>发现在攻击发生的时间点，没有登录日志。那就怀疑用户是远程登录mysql直接操作数据库。于是登录数据库查看授权情况</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>show grants<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>显示</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>GRANT ALL PRIVILEGES ON *.* TO <span class="s1">&#39;root&#39;</span>@<span class="s1">&#39;%&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>%代表可以从任意机器登录。</p>

<h3>3. 解决问题</h3>

<h4>3.1 修改mysql权限</h4>

<p>首先把数据库授权改为localhost。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>grant all privileges on *.* to <span class="s1">&#39;root&#39;</span>@<span class="s1">&#39;localhost&#39;</span> with grant option
</span></code></pre></td></tr></table></div></figure>


<h4>3.2 增加binlog</h4>

<p>其次，由于mysql没有开启binlog，所以无法查看数据库的改动记录，也就无法看到删除数据库表的那条命令信息，经过这次教训，将binlog打开。</p>

<p>找到mysql配置文件<code>my.cnf</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>mysqld<span class="o">]</span>
</span><span class='line'>log-bin<span class="o">=</span>/***/***/logs
</span></code></pre></td></tr></table></div></figure>


<p>在mysqld项下增加log-bin的配置，指定binlog的输出路径，注意这里要修改下logs文件夹的权限，保证可以正常写入。</p>

<p>然后重新启动mysql</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>systemctl restart mysqld
</span></code></pre></td></tr></table></div></figure>


<p>再尝试进行mysql update操作，通过命令查看binlog，发现日志正常写入。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mysqlbinlog -d xxx logs.000001
</span></code></pre></td></tr></table></div></figure>


<p>其中xxx是数据库名。</p>

<h4>3.3 定时备份数据</h4>

<p>除此之外，为了更加保险，写了备份脚本，通过mysqldump进行备份</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#! /bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="nb">time</span><span class="o">=</span><span class="k">$(</span>date <span class="s2">&quot;+%Y%m%d-%H%M&quot;</span><span class="k">)</span>
</span><span class='line'>mysqldump -uxxx -pxxx --databases dbname &gt; /path/to/bak/<span class="nv">$time</span>.sql
</span></code></pre></td></tr></table></div></figure>


<p> 将脚本保存，修改执行权限，加入crontab中定时每个小时执行备份</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="m">0</span> * * * * /path/to/back/bak_db.sh &gt; /dev/null 2&gt;<span class="p">&amp;</span><span class="m">1</span> <span class="p">&amp;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>4. 总结</h3>

<p>通过这次的攻击，数据全部丢失，虽然通过其他途径找回了信息，但是mysql数据本身并没有得到恢复。得到的教训如下：</p>

<ol>
<li><p>mysql操作权限要严格限制，通过白名单的方式放开，其他全部拒绝</p></li>
<li><p>mysql要打开binlog功能，可以用来恢复数据和查看操作记录</p></li>
<li><p>数据要定时备份，以防丢失后能够恢复</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS越狱以及cycript的安装]]></title>
    <link href="http://jason5.cn/blog/iosyue-yu-yi-ji-cycriptde-an-zhuang.html"/>
    <updated>2019-05-10T18:01:04+08:00</updated>
    <id>http://jason5.cn/blog/iosyue-yu-yi-ji-cycriptde-an-zhuang</id>
    <content type="html"><![CDATA[<p>本篇文章向iOS逆向初学者介绍如何越狱手机，并且安装cycript工具来调试第三方App。</p>

<!--more-->


<h3>1. 准备</h3>

<ul>
<li><p>1台iOS越狱手机</p></li>
<li><p>mac电脑</p></li>
<li><p>苹果开发者账号</p></li>
</ul>


<h3>2. 手机如何越狱</h3>

<p>根据当前网上查到的资料，iOS 12.1.4以下（包含）是可以越狱的，如果你的手机系统版本升级到了12.1.4之上，目前来讲没有办法，可以去淘宝买一部越狱手机。</p>

<p>笔者的手机系统版本是iOS 11.2.5，这个版本是可以非完美越狱的。非完美越狱的意思是，手机越狱成功后，如果重启，则会恢复到未越狱状态，需要重新越狱。不过这个是可以接受的，毕竟可以用了不是。以下以iOS 11.2.5为例，介绍越狱步骤。</p>

<h4>2.1 越狱工具的选择</h4>

<p>笔者越狱的时候尝试了两个工具Unc0ver和Electra，用了之后发现Electra好用一点，Unc0ver的问题是，越狱之后Cydia总是出现网络问题连接不上。用Electra越狱后Cydia可以使用，打开Cydia后会提示升级，正常升级后Cydia会变成Sileo，这个可以理解为新版的Cydia。</p>

<h4>2.2 如何安装Electra</h4>

<p>首先要在mac上安装Cydia Impactor。Cydia Impactor安装后，用数据线连接手机和电脑，将Electra.ipa拖入Impactor。安装的时候会要求输入账号名和密码。这里需要输入苹果开发者账号（每年699元那个），输入的密码并不是开发者账号的密码，而是临时生成的密码，需要到<a href="https://appleid.apple.com/">https://appleid.apple.com</a>生成App专用密码。这样Electra就顺利安装到手机上了。</p>

<h4>2.3 越狱</h4>

<p>打开手机上的Electra App，点击Jailbroken按钮，注意底下会有个开关选项"Tweaks"，这里需要把选项关掉，否则后边使用cycript会出错。顺利的话，手机会黑屏，然后重新启动桌面。再打开Electra App，刚才的Jailbroken按钮变成了Already Jailbroken，说明越狱已经成功了。手机桌面应该也出现了Cydia或Sileo图标。</p>

<h3>3. 如何ssh到手机</h3>

<p>有两种方式可以使mac ssh到手机上，一种是通过同一局域网WIFI，另一种是通过手机直接连接到mac。为了获取更快的连接速度和更稳定，笔者选择了后一种方式。</p>

<p>首先在mac上安装usbmuxd</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install usbmuxd
</span></code></pre></td></tr></table></div></figure>


<p>usbmuxd自带了一个工具iproxy，这个工具的作用是，在mac和手机之间架上一个代理，mac ssh手机本来是走22端口，需要用这个工具将其他端口，比如5678，转发到22端口上。运行命令</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>iproxy <span class="m">5678</span> 22
</span></code></pre></td></tr></table></div></figure>


<p>运行后正常情况下会显示</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>waiting <span class="k">for</span> connection
</span></code></pre></td></tr></table></div></figure>


<p>这时候，在mac上打开另一个终端窗口，输入命令</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ssh -p <span class="m">5678</span> root@127.0.0.1
</span></code></pre></td></tr></table></div></figure>


<p>输入默认的root密码alpine，就能成功ssh到手机上了。关于如何不每次都输入密码，这里可以自行搜索下其他相关资料，这里不再累述。</p>

<p>除了能够使用ssh，还可以使用scp向手机传文件，这里需要注意同样需要指定端口号，例如</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>scp -P <span class="m">5678</span> filexxx root@127.0.0.1:/tmp
</span></code></pre></td></tr></table></div></figure>


<p>ssh到手机上之后，如果我们需要其他的软件，可以使用apt-get，例如安装vim</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>apt-get install vim
</span></code></pre></td></tr></table></div></figure>


<h3>4. cycript的安装和使用</h3>

<p>能够以root身份ssh到手机之后，就可以做很多事情了，比如查看当前手机正在运行的App的进程号，以及各个App的沙盒路径，以及随意浏览里边的文件，很多有趣的事情可以去探索和尝试。这篇文章主要介绍cycirpt工具的使用。</p>

<h4>4.1 cycript介绍</h4>

<p>cycript是一个脚本语言，通过编写脚本代码，可以在任意第三方App运行的时候，执行任何逻辑，通常情况下可以用来查看App的UI结构，某个页面的实现方式。其他的使用目的等待你去探索和发现。</p>

<h4>4.2 安装和使用cycript</h4>

<p>在网上查了些资料，说cycript可以直接安装在iOS手机上的，这样只要ssh到手机上，执行cycript命令，就可以使用了。但是经过尝试，iOS 11.2.5版本不能直接安装cycript，取而代之的是一个叫bfinject的工具。bfinject工具先安装到手机上，然后启动cycript监听服务，然后mac上安装cycript客户端，通过无线的方式连接手机暴露出来的ip和端口，就可以使用cycript编写和执行脚本了。</p>

<h5>4.2.1 在手机上安装bfinject</h5>

<p>去<a href="https://github.com/BishopFox/bfinject">https://github.com/BishopFox/bfinject</a>下载bfinject，scp到手机上，然后解压，在解压目录运行<code>bash bfinject</code>启动服务。</p>

<p>通常情况下，会报错<code>Unknown jailbrek</code>。我们通过查看bfinject的代码，可以发现问题。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Detect LiberiOS vs Electra</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -f /bootstrap/inject_criticald <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    <span class="c"># This is Electra</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;[+] Electra detected.&quot;</span>
</span><span class='line'>    cp jtool.liberios /bootstrap/usr/local/bin/
</span><span class='line'>    chmod +x /bootstrap/usr/local/bin/jtool.liberios
</span><span class='line'>    <span class="nv">JTOOL</span><span class="o">=</span>/bootstrap/usr/local/bin/jtool.liberios
</span><span class='line'>    cp bfinject4realz /bootstrap/usr/local/bin/
</span><span class='line'>    <span class="nv">INJECTOR</span><span class="o">=</span>/bootstrap/usr/local/bin/bfinject4realz
</span><span class='line'><span class="k">elif</span> <span class="o">[</span> -f /jb/usr/local/bin/jtool <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    <span class="c"># This is LiberiOS</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;[+] Liberios detected&quot;</span>
</span><span class='line'>    <span class="nv">JTOOL</span><span class="o">=</span>jtool
</span><span class='line'>    <span class="nv">INJECTOR</span><span class="o">=</span><span class="sb">`</span><span class="nb">pwd</span><span class="sb">`</span>/bfinject4realz
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;[!] Unknown jailbreak. Aborting.&quot;</span>
</span><span class='line'>    <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>由以上代码第1个if分支可以判断，/bootstrap/inject_criticald目录不存在，这个是由于软件的目录变了，在不改变bfinject代码的前提下，需要修改一下目录，执行以下命令</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ln -s /electra /bootstrap
</span><span class='line'>mkdir /bootstrap/usr
</span><span class='line'>mkdir /bootstrap/usr/local
</span><span class='line'>mkdir /bootstrap/usr/local/bin
</span></code></pre></td></tr></table></div></figure>


<p>重新执行<code>bash bfinject</code>，还会出现一个错误<code>md5: command not found</code>，这个是由于需要运行md5程序，但是ios系统自带的程序叫md5sum，所以简单的办法是修改bfinject代码，将其中的md5改成md5sum就可以了。</p>

<h5>4.2.2 在手机上启动bfinject服务</h5>

<p>要查看哪个App，需要先在手机上启动，然后找到App的进程号，例如我们要查看微信的进程号，可以用以下命令</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ps aux <span class="p">|</span> grep containers <span class="p">|</span> grep WeChat
</span></code></pre></td></tr></table></div></figure>


<p>假设微信的进程号为1026，运行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bash bfinject -p <span class="m">1026</span> -L cycript
</span></code></pre></td></tr></table></div></figure>


<p>成功的话，在微信App的页面内会弹出一个框，上边的意思是正在监听xx.xx.xx.xx:1337端口(xx.xx.xx.xx为手机的ip地址)，可以连接这个端口来进行cycript调试了。</p>

<h5>4.2.3 在mac上安装cycript客户端</h5>

<p>首先去<a href="http://www.cycript.org/">http://www.cycript.org/</a>下载代码，运行./cycript的时候，会报错，仔细查看是缺少ruby2.0的库，在mac上先安装ruby2.0</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install ruby@2.0
</span></code></pre></td></tr></table></div></figure>


<p>安装后将<code>/usr/local/Cellar/ruby@2.0/2.0.0-p648_2/lib/libruby.2.0.0.dylib</code>拷贝到<code>cycript/Cycript.lib</code>目录下。顺利的话就可以用了。</p>

<p>在mac上执行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cycript -r xx.xx.xx.xx:1337
</span></code></pre></td></tr></table></div></figure>


<p>xx.xx.xx.xx为手机的ip，这里注意一下，因为是以无线连接的，所以手机和电脑需要在同一个局域网里，如果出现</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cy#
</span></code></pre></td></tr></table></div></figure>


<p>代表cycript运行成功，可以通过写cycript脚本执行命令了。</p>

<h3>5. 总结</h3>

<p>本篇文章介绍了如何越狱iOS手机，以及逆向工具cycript的安装。关于cycript的详细使用，限于篇幅原因不介绍了，请自行查看相关资料。总之，这个工具非常强大，可以更深入的分析目标App的实现方式。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SDWebImage源码解读]]></title>
    <link href="http://jason5.cn/blog/sdwebimageyuan-ma-qian-xi.html"/>
    <updated>2019-01-28T16:21:16+08:00</updated>
    <id>http://jason5.cn/blog/sdwebimageyuan-ma-qian-xi</id>
    <content type="html"><![CDATA[<p>SDWebImage是最流行的iOS第三方图片加载库，也是github上star数目最多的objective-c第三方库。这篇文章对SDWebImage的源码进行简单的分析，主要是分析代码的执行流程。源码版本是目前最新的稳定版本4.4.4。</p>

<!--more-->


<h3>源码目录</h3>

<p>SDWebImage下分为以下几个目录</p>

<ul>
<li>Downloader: 负责图片的下载，基于<code>NSURLSession</code>实现，主要类是<code>SDWebImageDownloader</code></li>
<li>Cache: 负责图片的缓存，主要是对内存和磁盘进行读写，实现二级缓存功能，主要类是<code>SDImageCache</code></li>
<li>Decoder: 负责图片的解码功能，以支持不同格式的图片，例如<code>SDWebImageGIFCoder</code>是对GIF图片的支持</li>
<li>Utils: 封装的工具类，主要类是<code>SDWebImaegeManger</code>，控制整个图片下载和缓存流程</li>
<li>Categories: 一些扩展支持，比如如果要对GIF图片进行下载展示，需要引入<code>UIImage+GIF.h</code>（框架已默认引入）</li>
<li>WebCache Categories: 对<code>UIView</code>的扩展支持，最常用的是<code>UIImageView+WebCache.h</code>，实现了<code>UIImageView</code>的图片加载和缓存功能</li>
<li>FLAnimatedImage: 对<code>FLAnimatedImage</code>进行了扩展，可以对动态图片进行加载和缓存</li>
</ul>


<h3>调用时序图</h3>

<p>以官方Demo详情页加载图片为例，加载图片的时序图如下：</p>

<p><a href="https://jason5.cn/images/2018-01/SDWebImage-Source-UML.jpg"><img src="https://jason5.cn/images/2018-01/SDWebImage-Source-UML.jpg" alt="" /></a></p>

<ol>
<li>调用<code>sd_internalSetImageWithURL:placeholderImage:options:operationKey:internalSetImageBlock:progress:completed:context:</code></li>
<li>调用<code>loadImageWithURL:options:progress:completed:</code></li>
<li>调用<code>queryCacheOperationForKey:cacheOptions:done</code>查询缓存</li>
<li>调用<code>imageFromMemoryCacheForKey</code>查内存, 调用<code>diskImageDataBySearchingAllPathsForKey</code>查磁盘</li>
<li>调用<code>downloadImageWithURL:options:progress:completed:</code>从网络下载</li>
<li>调用<code>storeImage:imageData:forKey:toDisk:completion:</code>将结果缓存</li>
</ol>


<h3>源码分析</h3>

<p>在官方Demo中，有一个列表页和详情页，我们从更简单的详情页来分析，详情页只有一个FLAnimatedImage控件，功能就是加载了一张图片，代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">__weak</span> <span class="n">typeof</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="n">weakSelf</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">imageView</span> <span class="nl">sd_setImageWithURL</span><span class="p">:</span><span class="n">self</span><span class="p">.</span><span class="n">imageURL</span>
</span><span class='line'>                  <span class="nl">placeholderImage</span><span class="p">:</span><span class="n">nil</span>
</span><span class='line'>                           <span class="nl">options</span><span class="p">:</span><span class="n">SDWebImageProgressiveDownload</span>
</span><span class='line'>                          <span class="nl">progress</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="n">NSInteger</span> <span class="n">receivedSize</span><span class="p">,</span> <span class="n">NSInteger</span> <span class="n">expectedSize</span><span class="p">,</span> <span class="n">NSURL</span> <span class="o">*</span><span class="n">targetURL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                              <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>                                  <span class="kt">float</span> <span class="n">progress</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>                                  <span class="k">if</span> <span class="p">(</span><span class="n">expectedSize</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                                      <span class="n">progress</span> <span class="o">=</span> <span class="p">(</span><span class="kt">float</span><span class="p">)</span><span class="n">receivedSize</span> <span class="o">/</span> <span class="p">(</span><span class="kt">float</span><span class="p">)</span><span class="n">expectedSize</span><span class="p">;</span>
</span><span class='line'>                                  <span class="p">}</span>
</span><span class='line'>                                  <span class="n">weakSelf</span><span class="p">.</span><span class="n">progressView</span><span class="p">.</span><span class="n">hidden</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>                                  <span class="p">[</span><span class="n">weakSelf</span><span class="p">.</span><span class="n">progressView</span> <span class="nl">setProgress</span><span class="p">:</span><span class="n">progress</span> <span class="nl">animated</span><span class="p">:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'>                              <span class="p">});</span>
</span><span class='line'>                          <span class="p">}</span>
</span><span class='line'>                         <span class="nl">completed</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="n">UIImage</span> <span class="o">*</span><span class="n">image</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">,</span> <span class="n">SDImageCacheType</span> <span class="n">cacheType</span><span class="p">,</span> <span class="n">NSURL</span> <span class="o">*</span><span class="n">imageURL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                             <span class="n">weakSelf</span><span class="p">.</span><span class="n">progressView</span><span class="p">.</span><span class="n">hidden</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>                             <span class="p">[</span><span class="n">weakSelf</span><span class="p">.</span><span class="n">activityIndicator</span> <span class="n">stopAnimating</span><span class="p">];</span>
</span><span class='line'>                             <span class="n">weakSelf</span><span class="p">.</span><span class="n">activityIndicator</span><span class="p">.</span><span class="n">hidden</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>                         <span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>对外暴露的接口比较简单，传递需要加载图片的url，placeholder图片，加载选项options，加载过程回调progressBlock，完成回调completedBlock就可以了。</p>

<p>接下来到时序图的第(1)步，调用<code>UIView+WebCache</code>的<code>sd_internalSetImageWithURL:</code>方法，代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="p">[</span><span class="n">self</span> <span class="nl">sd_internalSetImageWithURL</span><span class="p">:</span><span class="n">url</span>
</span><span class='line'>                    <span class="nl">placeholderImage</span><span class="p">:</span><span class="n">placeholder</span>
</span><span class='line'>                             <span class="nl">options</span><span class="p">:</span><span class="n">options</span>
</span><span class='line'>                        <span class="nl">operationKey</span><span class="p">:</span><span class="n">nil</span>
</span><span class='line'>               <span class="nl">internalSetImageBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="n">UIImage</span> <span class="o">*</span> <span class="n">_Nullable</span> <span class="n">image</span><span class="p">,</span> <span class="n">NSData</span> <span class="o">*</span> <span class="n">_Nullable</span> <span class="n">imageData</span><span class="p">,</span> <span class="n">SDImageCacheType</span> <span class="n">cacheType</span><span class="p">,</span> <span class="n">NSURL</span> <span class="o">*</span> <span class="n">_Nullable</span> <span class="n">imageURL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                           <span class="err">……</span>
</span><span class='line'>                       <span class="p">}</span>
</span><span class='line'>                            <span class="nl">progress</span><span class="p">:</span><span class="n">progressBlock</span>
</span><span class='line'>                           <span class="nl">completed</span><span class="p">:</span><span class="n">completedBlock</span>
</span><span class='line'>                             <span class="nl">context</span><span class="p">:</span><span class="err">@</span><span class="p">{</span><span class="nl">SDWebImageInternalSetImageGroupKey</span><span class="p">:</span> <span class="n">group</span><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>继续跟进这个方法，时序图到第(2)步，调用<code>SDWebImageManager</code>的<code>loadImageWithURL:</code>方法，代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">id</span> <span class="o">&lt;</span><span class="n">SDWebImageOperation</span><span class="o">&gt;</span> <span class="n">operation</span> <span class="o">=</span> <span class="p">[</span><span class="n">manager</span> <span class="nl">loadImageWithURL</span><span class="p">:</span><span class="n">url</span> <span class="nl">options</span><span class="p">:</span><span class="n">options</span> <span class="nl">progress</span><span class="p">:</span><span class="n">combinedProgressBlock</span> <span class="nl">completed</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="n">UIImage</span> <span class="o">*</span><span class="n">image</span><span class="p">,</span> <span class="n">NSData</span> <span class="o">*</span><span class="n">data</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">,</span> <span class="n">SDImageCacheType</span> <span class="n">cacheType</span><span class="p">,</span> <span class="n">BOOL</span> <span class="n">finished</span><span class="p">,</span> <span class="n">NSURL</span> <span class="o">*</span><span class="n">imageURL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//加载完图片的回调</span>
</span><span class='line'>  <span class="err">……</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>时序图来到第(3)步，<code>SDWebImageManager</code>会调用<code>SDImageCache</code>的<code>queryCacheOperationForKey</code>来进行缓存查询</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">//SDImageCache.m</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="n">nullable</span> <span class="n">NSOperation</span> <span class="o">*</span><span class="p">)</span><span class="nl">queryCacheOperationForKey</span><span class="p">:(</span><span class="n">nullable</span> <span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">key</span> <span class="nl">options</span><span class="p">:(</span><span class="n">SDImageCacheOptions</span><span class="p">)</span><span class="n">options</span> <span class="nl">done</span><span class="p">:(</span><span class="n">nullable</span> <span class="n">SDCacheQueryCompletedBlock</span><span class="p">)</span><span class="n">doneBlock</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 读内存缓存操作</span>
</span><span class='line'>    <span class="n">UIImage</span> <span class="o">*</span><span class="n">image</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">imageFromMemoryCacheForKey</span><span class="p">:</span><span class="n">key</span><span class="p">];</span>
</span><span class='line'>    <span class="n">BOOL</span> <span class="n">shouldQueryMemoryOnly</span> <span class="o">=</span> <span class="p">(</span><span class="n">image</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="p">(</span><span class="n">options</span> <span class="o">&amp;</span> <span class="n">SDImageCacheQueryDataWhenInMemory</span><span class="p">));</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">shouldQueryMemoryOnly</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">doneBlock</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">doneBlock</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">nil</span><span class="p">,</span> <span class="n">SDImageCacheTypeMemory</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSOperation</span> <span class="o">*</span><span class="n">operation</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSOperation</span> <span class="k">new</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">void</span><span class="p">(</span><span class="o">^</span><span class="n">queryDiskBlock</span><span class="p">)(</span><span class="kt">void</span><span class="p">)</span> <span class="o">=</span>  <span class="o">^</span><span class="p">{</span>
</span><span class='line'>      <span class="c1">//读磁盘缓存</span>
</span><span class='line'>      <span class="err">……</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">options</span> <span class="o">&amp;</span> <span class="n">SDImageCacheQueryDiskSync</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">queryDiskBlock</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">dispatch_async</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">ioQueue</span><span class="p">,</span> <span class="n">queryDiskBlock</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">operation</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，在上边的代码中，调用<code>imageFromMemoryCacheForKey</code>先从内存里查询是否有图片缓存，调用<code>dispatch_async(self.ioQueue, queryDiskBlock)</code>从磁盘里查询是否有图片缓存。这是时序图中的第(4)步。如果命中了缓存，则直接回调完成block，不再走下边的流程了。如果没有命中缓存，那么继续下边。</p>

<p>流程来到时序图中的第(5)步，查询完缓存返回后，<code>SDWebImageManager</code>会调用<code>SDWebImageDownloader</code>的<code>downloadImageWithURL:</code>方法从网络下载图片</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">//SDWebImageDownloader.m</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="n">nullable</span> <span class="n">SDWebImageDownloadToken</span> <span class="o">*</span><span class="p">)</span><span class="nl">downloadImageWithURL</span><span class="p">:(</span><span class="n">nullable</span> <span class="n">NSURL</span> <span class="o">*</span><span class="p">)</span><span class="n">url</span>
</span><span class='line'>                                                   <span class="nl">options</span><span class="p">:(</span><span class="n">SDWebImageDownloaderOptions</span><span class="p">)</span><span class="n">options</span>
</span><span class='line'>                                                  <span class="nl">progress</span><span class="p">:(</span><span class="n">nullable</span> <span class="n">SDWebImageDownloaderProgressBlock</span><span class="p">)</span><span class="n">progressBlock</span>
</span><span class='line'>                                                 <span class="nl">completed</span><span class="p">:(</span><span class="n">nullable</span> <span class="n">SDWebImageDownloaderCompletedBlock</span><span class="p">)</span><span class="n">completedBlock</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">LOCK</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">operationsLock</span><span class="p">);</span>
</span><span class='line'>    <span class="n">NSOperation</span><span class="o">&lt;</span><span class="n">SDWebImageDownloaderOperationInterface</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">operation</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">URLOperations</span> <span class="nl">objectForKey</span><span class="p">:</span><span class="n">url</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">// There is a case that the operation may be marked as finished or cancelled, but not been removed from `self.URLOperations`.</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">operation</span> <span class="o">||</span> <span class="n">operation</span><span class="p">.</span><span class="n">isFinished</span> <span class="o">||</span> <span class="n">operation</span><span class="p">.</span><span class="n">isCancelled</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">operation</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">createDownloaderOperationWithUrl</span><span class="p">:</span><span class="n">url</span> <span class="nl">options</span><span class="p">:</span><span class="n">options</span><span class="p">];</span>
</span><span class='line'>        <span class="n">__weak</span> <span class="n">typeof</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="n">wself</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'>        <span class="n">operation</span><span class="p">.</span><span class="n">completionBlock</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>            <span class="n">__strong</span> <span class="n">typeof</span><span class="p">(</span><span class="n">wself</span><span class="p">)</span> <span class="n">sself</span> <span class="o">=</span> <span class="n">wself</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">sself</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">LOCK</span><span class="p">(</span><span class="n">sself</span><span class="p">.</span><span class="n">operationsLock</span><span class="p">);</span>
</span><span class='line'>            <span class="p">[</span><span class="n">sself</span><span class="p">.</span><span class="n">URLOperations</span> <span class="nl">removeObjectForKey</span><span class="p">:</span><span class="n">url</span><span class="p">];</span>
</span><span class='line'>            <span class="n">UNLOCK</span><span class="p">(</span><span class="n">sself</span><span class="p">.</span><span class="n">operationsLock</span><span class="p">);</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">URLOperations</span> <span class="nl">setObject</span><span class="p">:</span><span class="n">operation</span> <span class="nl">forKey</span><span class="p">:</span><span class="n">url</span><span class="p">];</span>
</span><span class='line'>        <span class="c1">// Add operation to operation queue only after all configuration done according to Apple&#39;s doc.</span>
</span><span class='line'>        <span class="c1">// `addOperation:` does not synchronously execute the `operation.completionBlock` so this will not cause deadlock.</span>
</span><span class='line'>        <span class="c1">//执行下载操作</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">downloadQueue</span> <span class="nl">addOperation</span><span class="p">:</span><span class="n">operation</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">UNLOCK</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">operationsLock</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">id</span> <span class="n">downloadOperationCancelToken</span> <span class="o">=</span> <span class="p">[</span><span class="n">operation</span> <span class="nl">addHandlersForProgress</span><span class="p">:</span><span class="n">progressBlock</span> <span class="nl">completed</span><span class="p">:</span><span class="n">completedBlock</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">SDWebImageDownloadToken</span> <span class="o">*</span><span class="n">token</span> <span class="o">=</span> <span class="p">[</span><span class="n">SDWebImageDownloadToken</span> <span class="k">new</span><span class="p">];</span>
</span><span class='line'>    <span class="n">token</span><span class="p">.</span><span class="n">downloadOperation</span> <span class="o">=</span> <span class="n">operation</span><span class="p">;</span>
</span><span class='line'>    <span class="n">token</span><span class="p">.</span><span class="n">url</span> <span class="o">=</span> <span class="n">url</span><span class="p">;</span>
</span><span class='line'>    <span class="n">token</span><span class="p">.</span><span class="n">downloadOperationCancelToken</span> <span class="o">=</span> <span class="n">downloadOperationCancelToken</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">token</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>从网络下载图片的代码如上，第8行生成<code>NSOperation</code>，第26行加入叫做<code>downloadQueue</code>的<code>NSOperationQueue</code>执行。</p>

<p>下载完成后，时序图流程来到第（6）步，<code>SDWebImageManager</code>会调用<code>SDImageCache</code>的<code>storeImage:</code>方法将结果进行缓存，以便下次使用，然后再进行成功的回调，代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="bp">UIImage</span> <span class="o">*</span><span class="n">transformedImage</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">delegate</span> <span class="nl">imageManager</span><span class="p">:</span><span class="nb">self</span> <span class="nl">transformDownloadedImage</span><span class="p">:</span><span class="n">downloadedImage</span> <span class="nl">withURL</span><span class="p">:</span><span class="n">url</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">transformedImage</span> <span class="o">&amp;&amp;</span> <span class="n">finished</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">imageWasTransformed</span> <span class="o">=</span> <span class="o">!</span><span class="p">[</span><span class="n">transformedImage</span> <span class="nl">isEqual</span><span class="p">:</span><span class="n">downloadedImage</span><span class="p">];</span>
</span><span class='line'>    <span class="bp">NSData</span> <span class="o">*</span><span class="n">cacheData</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// pass nil if the image was transformed, so we can recalculate the data from the image</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">cacheSerializer</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">cacheData</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">cacheSerializer</span><span class="p">(</span><span class="n">transformedImage</span><span class="p">,</span> <span class="p">(</span><span class="n">imageWasTransformed</span> <span class="o">?</span> <span class="nb">nil</span> <span class="o">:</span> <span class="n">downloadedData</span><span class="p">),</span> <span class="n">url</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">cacheData</span> <span class="o">=</span> <span class="p">(</span><span class="n">imageWasTransformed</span> <span class="o">?</span> <span class="nb">nil</span> <span class="o">:</span> <span class="n">downloadedData</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">imageCache</span> <span class="nl">storeImage</span><span class="p">:</span><span class="n">transformedImage</span> <span class="nl">imageData</span><span class="p">:</span><span class="n">cacheData</span> <span class="nl">forKey</span><span class="p">:</span><span class="n">key</span> <span class="nl">toDisk</span><span class="p">:</span><span class="n">cacheOnDisk</span> <span class="nl">completion</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="nb">self</span> <span class="nl">callCompletionBlockForOperation</span><span class="p">:</span><span class="n">strongSubOperation</span> <span class="nl">completion</span><span class="p">:</span><span class="n">completedBlock</span> <span class="nl">image</span><span class="p">:</span><span class="n">transformedImage</span> <span class="nl">data</span><span class="p">:</span><span class="n">downloadedData</span> <span class="nl">error</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">cacheType</span><span class="p">:</span><span class="n">SDImageCacheTypeNone</span> <span class="nl">finished</span><span class="p">:</span><span class="n">finished</span> <span class="nl">url</span><span class="p">:</span><span class="n">url</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>到这里图片加载流程结束。</p>

<p>SDWebImage里还有很多实现细节，比如多线程的控制和加锁，各种控制下载行为的选项，取消正在下载的操作，URL参数的容错，PlaceHolder的设置，加载IndicatorView的显示控制，下载过程Progress的控制等。由于篇幅原因在本文中省略，等以后有时间再细致分析。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Aspects源码解读]]></title>
    <link href="http://jason5.cn/blog/acpectsyuan-ma-jie-du.html"/>
    <updated>2019-01-07T15:25:12+08:00</updated>
    <id>http://jason5.cn/blog/acpectsyuan-ma-jie-du</id>
    <content type="html"><![CDATA[<p>Aspects是iOS面向切面编程的第三方库，它可以在不改变原有代码的情况下，在任意函数之前或之后插入代码，也可以替换掉函数原有的代码。它的原理是基于oc语言的runtime，这篇文章对Aspects进行源码解读，并阐述其原理。</p>

<!--more-->


<h2>调用方式</h2>

<p>首先我们下载官方demo，从入口代码开始看：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">AspectsViewController</span> <span class="o">*</span><span class="n">aspectsController</span> <span class="o">=</span> <span class="p">[</span><span class="n">AspectsViewController</span> <span class="k">new</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">aspectsController</span> <span class="nl">aspect_hookSelector</span><span class="p">:</span><span class="err">@</span><span class="n">selector</span><span class="p">(</span><span class="nl">buttonPressed</span><span class="p">:)</span> <span class="nl">withOptions</span><span class="p">:</span><span class="mi">0</span> <span class="nl">usingBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="n">id</span> <span class="n">info</span><span class="p">,</span> <span class="n">id</span> <span class="n">sender</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="err">@</span><span class="s">&quot;Button was pressed by: %@&quot;</span><span class="p">,</span> <span class="n">sender</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="nl">error</span><span class="p">:</span><span class="nb">NULL</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码就是Aspects的调用方式之一，表示在对象aspectsController的buttonPressed函数执行之后，再执行block里的代码，打印一行日志。withOptions的参数写的0，这里是一个枚举值，可以控制block代码怎样执行，具体的定义如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">typedef</span> <span class="nf">NS_OPTIONS</span><span class="p">(</span><span class="n">NSUInteger</span><span class="p">,</span> <span class="n">AspectOptions</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">AspectPositionAfter</span>   <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>            <span class="c1">/// Called after the original implementation (default)</span>
</span><span class='line'>    <span class="n">AspectPositionInstead</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>            <span class="c1">/// Will replace the original implementation.</span>
</span><span class='line'>    <span class="n">AspectPositionBefore</span>  <span class="o">=</span> <span class="mi">2</span><span class="p">,</span>            <span class="c1">/// Called before the original implementation.</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">AspectOptionAutomaticRemoval</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">3</span> <span class="c1">/// Will remove the hook after the first execution.</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h2>hook过程</h2>

<p>我们从入口函数进入开始跟踪代码，最后发现无论是对实例方法还是类方法进行hook，都会调用aspect_add函数，省略了一些无关代码后如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">static</span> <span class="n">id</span> <span class="nf">aspect_add</span><span class="p">(</span><span class="n">id</span> <span class="n">self</span><span class="p">,</span> <span class="n">SEL</span> <span class="n">selector</span><span class="p">,</span> <span class="n">AspectOptions</span> <span class="n">options</span><span class="p">,</span> <span class="n">id</span> <span class="n">block</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">**</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">__block</span> <span class="n">AspectIdentifier</span> <span class="o">*</span><span class="n">identifier</span> <span class="o">=</span> <span class="n">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="n">AspectsContainer</span> <span class="o">*</span><span class="n">aspectContainer</span> <span class="o">=</span> <span class="n">aspect_getContainerForObject</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">selector</span><span class="p">);</span>
</span><span class='line'>    <span class="n">identifier</span> <span class="o">=</span> <span class="p">[</span><span class="n">AspectIdentifier</span> <span class="nl">identifierWithSelector</span><span class="p">:</span><span class="n">selector</span> <span class="nl">object</span><span class="p">:</span><span class="n">self</span> <span class="nl">options</span><span class="p">:</span><span class="n">options</span> <span class="nl">block</span><span class="p">:</span><span class="n">block</span> <span class="nl">error</span><span class="p">:</span><span class="n">error</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">identifier</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">aspectContainer</span> <span class="nl">addAspect</span><span class="p">:</span><span class="n">identifier</span> <span class="nl">withOptions</span><span class="p">:</span><span class="n">options</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Modify the class to allow message interception.</span>
</span><span class='line'>        <span class="n">aspect_prepareClassAndHookSelector</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">selector</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">identifier</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码做了两件事情。</p>

<p>首先生成AspectIdentifier，然后将AspectIdentifier加入到AspectsContainer中。AspectIdentifier的定义如下，它描述了一个Ascpect切片代码的信息。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="err">@</span><span class="n">interface</span> <span class="nl">AspectIdentifier</span> <span class="p">:</span> <span class="n">NSObject</span>
</span><span class='line'><span class="err">@</span><span class="n">property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">assign</span><span class="p">)</span> <span class="n">SEL</span> <span class="n">selector</span><span class="p">;</span>
</span><span class='line'><span class="err">@</span><span class="n">property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">id</span> <span class="n">block</span><span class="p">;</span>
</span><span class='line'><span class="err">@</span><span class="n">property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">NSMethodSignature</span> <span class="o">*</span><span class="n">blockSignature</span><span class="p">;</span>
</span><span class='line'><span class="err">@</span><span class="n">property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">weak</span><span class="p">)</span> <span class="n">id</span> <span class="n">object</span><span class="p">;</span>
</span><span class='line'><span class="err">@</span><span class="n">property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">assign</span><span class="p">)</span> <span class="n">AspectOptions</span> <span class="n">options</span><span class="p">;</span>
</span><span class='line'><span class="err">@</span><span class="n">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>AspectsContainer的定义如下，它负责容纳AspectIdentifier，可以在before，instead，after数组里放入多个AspectIdentifier，从名称可以看出这些AspectIdentifier所执行的时机。AspectsContainer将在后边取出并执行。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="err">@</span><span class="n">interface</span> <span class="nl">AspectsContainer</span> <span class="p">:</span> <span class="n">NSObject</span>
</span><span class='line'><span class="err">@</span><span class="n">property</span> <span class="p">(</span><span class="n">atomic</span><span class="p">,</span> <span class="n">copy</span><span class="p">)</span> <span class="n">NSArray</span> <span class="o">*</span><span class="n">beforeAspects</span><span class="p">;</span>
</span><span class='line'><span class="err">@</span><span class="n">property</span> <span class="p">(</span><span class="n">atomic</span><span class="p">,</span> <span class="n">copy</span><span class="p">)</span> <span class="n">NSArray</span> <span class="o">*</span><span class="n">insteadAspects</span><span class="p">;</span>
</span><span class='line'><span class="err">@</span><span class="n">property</span> <span class="p">(</span><span class="n">atomic</span><span class="p">,</span> <span class="n">copy</span><span class="p">)</span> <span class="n">NSArray</span> <span class="o">*</span><span class="n">afterAspects</span><span class="p">;</span>
</span><span class='line'><span class="err">@</span><span class="n">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>其次调用aspect_prepareClassAndHookSelector函数，这是最关键的部分：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">aspect_prepareClassAndHookSelector</span><span class="p">(</span><span class="n">NSObject</span> <span class="o">*</span><span class="n">self</span><span class="p">,</span> <span class="n">SEL</span> <span class="n">selector</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">**</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Class</span> <span class="n">klass</span> <span class="o">=</span> <span class="n">aspect_hookClass</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Method</span> <span class="n">targetMethod</span> <span class="o">=</span> <span class="n">class_getInstanceMethod</span><span class="p">(</span><span class="n">klass</span><span class="p">,</span> <span class="n">selector</span><span class="p">);</span>
</span><span class='line'>    <span class="n">IMP</span> <span class="n">targetMethodIMP</span> <span class="o">=</span> <span class="n">method_getImplementation</span><span class="p">(</span><span class="n">targetMethod</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">aspect_isMsgForwardIMP</span><span class="p">(</span><span class="n">targetMethodIMP</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Make a method alias for the existing method implementation, it not already copied.</span>
</span><span class='line'>        <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">typeEncoding</span> <span class="o">=</span> <span class="n">method_getTypeEncoding</span><span class="p">(</span><span class="n">targetMethod</span><span class="p">);</span>
</span><span class='line'>        <span class="n">SEL</span> <span class="n">aliasSelector</span> <span class="o">=</span> <span class="n">aspect_aliasForSelector</span><span class="p">(</span><span class="n">selector</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">klass</span> <span class="nl">instancesRespondToSelector</span><span class="p">:</span><span class="n">aliasSelector</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">__unused</span> <span class="n">BOOL</span> <span class="n">addedAlias</span> <span class="o">=</span> <span class="n">class_addMethod</span><span class="p">(</span><span class="n">klass</span><span class="p">,</span> <span class="n">aliasSelector</span><span class="p">,</span> <span class="n">method_getImplementation</span><span class="p">(</span><span class="n">targetMethod</span><span class="p">),</span> <span class="n">typeEncoding</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">// We use forwardInvocation to hook in.</span>
</span><span class='line'>        <span class="n">class_replaceMethod</span><span class="p">(</span><span class="n">klass</span><span class="p">,</span> <span class="n">selector</span><span class="p">,</span> <span class="n">aspect_getMsgForwardIMP</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">selector</span><span class="p">),</span> <span class="n">typeEncoding</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个函数分为两部分，第2行aspect_hookClass和后边的部分。我们先来看aspect_hookClass函数，省略后的代码如下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">static</span> <span class="n">Class</span> <span class="nf">aspect_hookClass</span><span class="p">(</span><span class="n">NSObject</span> <span class="o">*</span><span class="n">self</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">**</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Class</span> <span class="n">statedClass</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">class</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Class</span> <span class="n">baseClass</span> <span class="o">=</span> <span class="n">object_getClass</span><span class="p">(</span><span class="n">self</span><span class="p">);</span>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">className</span> <span class="o">=</span> <span class="n">NSStringFromClass</span><span class="p">(</span><span class="n">baseClass</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Default case. Create dynamic subclass.</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">subclassName</span> <span class="o">=</span> <span class="p">[</span><span class="n">className</span> <span class="nl">stringByAppendingString</span><span class="p">:</span><span class="n">AspectsSubclassSuffix</span><span class="p">].</span><span class="n">UTF8String</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Class</span> <span class="n">subclass</span> <span class="o">=</span> <span class="n">objc_getClass</span><span class="p">(</span><span class="n">subclassName</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">subclass</span> <span class="o">==</span> <span class="n">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">subclass</span> <span class="o">=</span> <span class="n">objc_allocateClassPair</span><span class="p">(</span><span class="n">baseClass</span><span class="p">,</span> <span class="n">subclassName</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>      <span class="n">aspect_swizzleForwardInvocation</span><span class="p">(</span><span class="n">subclass</span><span class="p">);</span>
</span><span class='line'>      <span class="n">aspect_hookedGetClass</span><span class="p">(</span><span class="n">subclass</span><span class="p">,</span> <span class="n">statedClass</span><span class="p">);</span>
</span><span class='line'>      <span class="n">aspect_hookedGetClass</span><span class="p">(</span><span class="n">object_getClass</span><span class="p">(</span><span class="n">subclass</span><span class="p">),</span> <span class="n">statedClass</span><span class="p">);</span>
</span><span class='line'>      <span class="n">objc_registerClassPair</span><span class="p">(</span><span class="n">subclass</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">object_setClass</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">subclass</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">subclass</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>第11行代码通过运行时的函数objc_allocateClassPair定义了一个新的子类。如果是demo执行到这里的话，生成的子类叫AspectsViewController_Aspects。第12行，将子类的forwardInvocation替换为了自定义的实现函数__ASPECTS_ARE_BEING_CALLED__。第18行，将AspectsViewController实例的isa指针指向了子类AspectsViewController_Aspects。</p>

<p>接着，我们继续看aspect_prepareClassAndHookSelector函数的后半部分。第10行在AspectsViewController_Aspects类添加了一个方法aliasSelector，demo中就是aspect_buttonPressed，它的实现指向了原来AspectsViewController类的buttonPressed的实现。第13行，将AspectsViewController_Aspects类的buttonPressed实现指向了_objc_msgForward，这样调用就会启动oc的消息转发机制。</p>

<p>到这里，Aspects的hook流程就执行完了，我们用下边这个图来描述下当前类和方法实现之间的关系。</p>

<p><a href="https://jason5.cn/images/2018-01/Aspects.png"><img src="https://jason5.cn/images/2018-01/Aspects.png" alt="" /></a></p>

<p>Aspects的实现为什么要生成一个原有类的子类，个人理解是为了对原有类产生的影响尽可能小。</p>

<h2>hook后的执行流程</h2>

<p>hook完成后，我们来看下hook后代码的执行流程。</p>

<p><strong>这一段很重要！！！</strong>往AspectsViewController实例发送buttonPressed消息的时候，首先应该去查找实例所对应的类的方法列表，由于AspectsViewController的isa指向了AspectsViewController_Aspects类，就会去AspectsViewController_Aspects类中查找，结果是查找不到buttonPressed实现，然后会去查找父类AspectsViewController的方法列表，这时候查找到了buttonPressed的实现，但是实现是指向了_msg_forward，这样就进入了消息转发流程。按照消息转发流程，系统会调用AspectsViewController_Aspects类的forwardInvocation方法，forwardInvocation方法被我们替换成了自定义实现__ASPECTS_ARE_BEING_CALLED__，最终就进入了这个方法。</p>

<p>__ASPECTS_ARE_BEING_CALLED__的省略后的代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">// This is the swizzled forwardInvocation: method.</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">__ASPECTS_ARE_BEING_CALLED__</span><span class="p">(</span><span class="n">__unsafe_unretained</span> <span class="n">NSObject</span> <span class="o">*</span><span class="n">self</span><span class="p">,</span> <span class="n">SEL</span> <span class="n">selector</span><span class="p">,</span> <span class="n">NSInvocation</span> <span class="o">*</span><span class="n">invocation</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">SEL</span> <span class="n">originalSelector</span> <span class="o">=</span> <span class="n">invocation</span><span class="p">.</span><span class="n">selector</span><span class="p">;</span>
</span><span class='line'>    <span class="n">SEL</span> <span class="n">aliasSelector</span> <span class="o">=</span> <span class="n">aspect_aliasForSelector</span><span class="p">(</span><span class="n">invocation</span><span class="p">.</span><span class="n">selector</span><span class="p">);</span>
</span><span class='line'>    <span class="n">invocation</span><span class="p">.</span><span class="n">selector</span> <span class="o">=</span> <span class="n">aliasSelector</span><span class="p">;</span>
</span><span class='line'>    <span class="n">AspectsContainer</span> <span class="o">*</span><span class="n">objectContainer</span> <span class="o">=</span> <span class="n">objc_getAssociatedObject</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">aliasSelector</span><span class="p">);</span>
</span><span class='line'>    <span class="n">AspectsContainer</span> <span class="o">*</span><span class="n">classContainer</span> <span class="o">=</span> <span class="n">aspect_getContainerForClass</span><span class="p">(</span><span class="n">object_getClass</span><span class="p">(</span><span class="n">self</span><span class="p">),</span> <span class="n">aliasSelector</span><span class="p">);</span>
</span><span class='line'>    <span class="n">AspectInfo</span> <span class="o">*</span><span class="n">info</span> <span class="o">=</span> <span class="p">[[</span><span class="n">AspectInfo</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithInstance</span><span class="p">:</span><span class="n">self</span> <span class="nl">invocation</span><span class="p">:</span><span class="n">invocation</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSArray</span> <span class="o">*</span><span class="n">aspectsToRemove</span> <span class="o">=</span> <span class="n">nil</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Before hooks.</span>
</span><span class='line'>    <span class="n">aspect_invoke</span><span class="p">(</span><span class="n">classContainer</span><span class="p">.</span><span class="n">beforeAspects</span><span class="p">,</span> <span class="n">info</span><span class="p">);</span>
</span><span class='line'>    <span class="n">aspect_invoke</span><span class="p">(</span><span class="n">objectContainer</span><span class="p">.</span><span class="n">beforeAspects</span><span class="p">,</span> <span class="n">info</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Instead hooks.</span>
</span><span class='line'>    <span class="n">BOOL</span> <span class="n">respondsToAlias</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">objectContainer</span><span class="p">.</span><span class="n">insteadAspects</span><span class="p">.</span><span class="n">count</span> <span class="o">||</span> <span class="n">classContainer</span><span class="p">.</span><span class="n">insteadAspects</span><span class="p">.</span><span class="n">count</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">aspect_invoke</span><span class="p">(</span><span class="n">classContainer</span><span class="p">.</span><span class="n">insteadAspects</span><span class="p">,</span> <span class="n">info</span><span class="p">);</span>
</span><span class='line'>        <span class="n">aspect_invoke</span><span class="p">(</span><span class="n">objectContainer</span><span class="p">.</span><span class="n">insteadAspects</span><span class="p">,</span> <span class="n">info</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span><span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Class</span> <span class="n">klass</span> <span class="o">=</span> <span class="n">object_getClass</span><span class="p">(</span><span class="n">invocation</span><span class="p">.</span><span class="n">target</span><span class="p">);</span>
</span><span class='line'>        <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">((</span><span class="n">respondsToAlias</span> <span class="o">=</span> <span class="p">[</span><span class="n">klass</span> <span class="nl">instancesRespondToSelector</span><span class="p">:</span><span class="n">aliasSelector</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>                <span class="p">[</span><span class="n">invocation</span> <span class="n">invoke</span><span class="p">];</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span><span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">respondsToAlias</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">klass</span> <span class="o">=</span> <span class="n">class_getSuperclass</span><span class="p">(</span><span class="n">klass</span><span class="p">)));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// After hooks.</span>
</span><span class='line'>    <span class="n">aspect_invoke</span><span class="p">(</span><span class="n">classContainer</span><span class="p">.</span><span class="n">afterAspects</span><span class="p">,</span> <span class="n">info</span><span class="p">);</span>
</span><span class='line'>    <span class="n">aspect_invoke</span><span class="p">(</span><span class="n">objectContainer</span><span class="p">.</span><span class="n">afterAspects</span><span class="p">,</span> <span class="n">info</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>第7行，对于hook的实例方法，先拿到之前设置的切片代码信息，存储在classContainer里。第24行，通过invocation调用AspectsViewController_Aspects的aspect_buttonPressed方法，由于这个方法已经指向了原来的实现buttonPressed，所以就调用了原始的代码。在这之后，如果Container里有afterAspects，就调用切片的block。beforeAspects同理。</p>

<p>到此为止，就实现了在原来的实例方法执行后，再执行hook插入的block代码。</p>

<h2>总结</h2>

<p>oc语言的runtime是黑魔法，运用起来可以做很多强大的功能。总的来讲，Aspects利用了method swizzling和消息转发机制forwordInvocation，实现了对函数进行切面hook。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[对JSPatch原理的理解]]></title>
    <link href="http://jason5.cn/blog/dui-jspatchyuan-li-de-li-jie.html"/>
    <updated>2018-11-08T15:08:47+08:00</updated>
    <id>http://jason5.cn/blog/dui-jspatchyuan-li-de-li-jie</id>
    <content type="html"><![CDATA[<p>JSPatch利用OC语言的动态特性，让OC语言根据传入的JS代码，进行动态行为修改，以达到热更新的目的。</p>

<p>项目中根据JSPatch的原理，自己实现了一套简单的热更新方案。以替换方法实现为例，热更新运行的步骤如下：</p>

<!--more-->


<p>1.补丁下发阶段</p>

<p>应用启动的时候，会加载下发的补丁js文件，以下这一段热更新代码会被执行。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">replaceMethod</span><span class="p">(</span><span class="s2">&quot;IGTabBarController&quot;</span><span class="p">,</span> <span class="s2">&quot;onNaviBarTaskBoxClick:&quot;</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">invocation</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">log</span><span class="p">(</span><span class="s2">&quot;origin method&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">callOriginMethod</span><span class="p">(</span><span class="nx">invocation</span><span class="p">,</span> <span class="s2">&quot;origin_onNaviBarTaskBoxClick:&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>OC中的JSContext在初始化的时候加载过replaceMethod函数，所以会调用到OC代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">ocReplaceMethod</span><span class="o">:</span><span class="p">(</span><span class="nx">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nx">className</span> <span class="nx">selectorName</span><span class="o">:</span><span class="p">(</span><span class="nx">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nx">selectorName</span> <span class="nx">isClass</span><span class="o">:</span><span class="p">(</span><span class="nx">BOOL</span><span class="p">)</span><span class="nx">isClass</span> <span class="nx">func</span><span class="o">:</span><span class="p">(</span><span class="nx">JSValue</span> <span class="o">*</span><span class="p">)</span><span class="nx">func</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个函数里，做了一个重要的逻辑（这里参考了JSPatch的实现方式），将IGTabBarController的实例方法onNaviBarTaskBoxClick:指向了forwardInvocation:，然后自定义实现PMDForwardInvocation替换forwardInvocation:的行为</p>

<p>2.用户调用阶段</p>

<p>用户操作点击后，IGTabBarController的onNaviBarTaskBoxClick:会被执行，从而PMDForwardInvocation被执行，根据OC的函数转发特性，PMDForwardInvocation会拿到所有的函数参数信息invocation。然后调用<code>jsfunc(@[invocation])</code>。这样就将所有原生参数通过invocation对象传回给了js代码。js代码拿到这些参数就可以去实现任何逻辑了，以达到替换原方法的目的。</p>

<p>总结：这里是一个很重要的技巧，如何将需要动态更新的OC方法的参数全部传给js代码，JSPatch是利用了forwardInvocation的特性。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Express学习笔记(二)-路由]]></title>
    <link href="http://jason5.cn/blog/expressxue-xi-bi-ji-er-lu-you.html"/>
    <updated>2018-11-05T16:08:45+08:00</updated>
    <id>http://jason5.cn/blog/expressxue-xi-bi-ji-er-lu-you</id>
    <content type="html"><![CDATA[<p>这一篇主要介绍路由的用法</p>

<!--more-->


<h3>基本用法</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// GET method route</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;GET request to the homepage&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// POST method route</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;POST request to the homepage&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span><span class="s1">&#39;/secret&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Accessing the secret section ...&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">next</span><span class="p">();</span> <span class="c1">// pass control to the next handler</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>all表示接受所有的http方法</p>

<h3>路由路径</h3>

<p>支持正则表达式</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/ab*cd&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;ab*cd&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>此路由路径将匹配 abcd、abxcd、abRABDOMcd、ab123cd 等。</p>

<h3>路由处理顺序</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">cb0</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;CB0&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">next</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">cb1</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;CB1&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">next</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/example/d&#39;</span><span class="p">,</span> <span class="p">[</span><span class="nx">cb0</span><span class="p">,</span> <span class="nx">cb1</span><span class="p">],</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;the response will be sent by the next function ...&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">next</span><span class="p">();</span>
</span><span class='line'><span class="p">},</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;Hello from D!&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以写数组，也可以写多个回调函数参数，挨着执行，前一个函数必须执行<code>next()</code>，否则http请求会挂起</p>

<h3>模块封装</h3>

<p>可以封装一个bird.js模块</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">express</span><span class="p">.</span><span class="nx">Router</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// middleware that is specific to this router</span>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="kd">function</span> <span class="nx">timeLog</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Time: &#39;</span><span class="p">,</span> <span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">());</span>
</span><span class='line'>  <span class="nx">next</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="c1">// define the home page route</span>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;Birds home page&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="c1">// define the about route</span>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/about&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;About birds&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">router</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用模块后，url从外部使用模块开始，接着模块定义的路径，就可以访问</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">birds</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./birds&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;/birds&#39;</span><span class="p">,</span> <span class="nx">birds</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>此时，可以响应<code>/birds</code>和<code>/birds/about</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Express学习笔记(一)-开始]]></title>
    <link href="http://jason5.cn/blog/expressxue-xi-bi-ji.html"/>
    <updated>2018-11-05T15:57:02+08:00</updated>
    <id>http://jason5.cn/blog/expressxue-xi-bi-ji</id>
    <content type="html"><![CDATA[<p>Express是一个基于nodejs的web开发框架。</p>

<!--more-->


<h3>Hello World</h3>

<p>0.安装nodejs环境</p>

<p>以腾讯云的centOS云服务器为例，先运行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yum install nodejs</span></code></pre></td></tr></table></div></figure>


<p>1.安装</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir myapp
</span><span class='line'>$ cd myapp
</span><span class='line'>$ npm init
</span><span class='line'>$ npm install express --save</span></code></pre></td></tr></table></div></figure>


<p>2.修改app.js，然后运行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ node app.js</span></code></pre></td></tr></table></div></figure>


<p>打开浏览器，访问<a href="http://localhost:3000%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C%E4%BA%86">http://localhost:3000%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C%E4%BA%86</a></p>

<h3>脚手架工程</h3>

<p>1.安装express-generator</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ npm install express-generator -g</span></code></pre></td></tr></table></div></figure>


<p>2.生成脚手架工程</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ express --view=pug myapp</span></code></pre></td></tr></table></div></figure>


<p>pug是使用的模板引擎</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd myapp
</span><span class='line'>$ npm install</span></code></pre></td></tr></table></div></figure>


<p>3.运行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ npm start</span></code></pre></td></tr></table></div></figure>


<p>在浏览器里访问。</p>

<h3>路由</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;Hello World!&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>表示根目录相应http get方法</p>

<h3>静态文件</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;/static&#39;</span><span class="p">,</span> <span class="nx">express</span><span class="p">.</span><span class="kr">static</span><span class="p">(</span><span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">&#39;/public&#39;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>public目录下的所有文件可以作为静态资源访问。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TIP项目网络框架梳理]]></title>
    <link href="http://jason5.cn/blog/tipxiang-mu-wang-luo-kuang-jia-shu-li.html"/>
    <updated>2018-10-23T16:07:12+08:00</updated>
    <id>http://jason5.cn/blog/tipxiang-mu-wang-luo-kuang-jia-shu-li</id>
    <content type="html"><![CDATA[<p>前段时间小伙伴重构了项目的网络层代码，将之前的过程式的代码，面向对象化了，职责分离，更易维护。不过也增加了理解成本，这里记录一下。</p>

<!--more-->


<p>整个网络模块的类图如下。PMD开头的类下沉到了基础库，IG开头的类仍然在项目中。</p>

<p><a href="https://jason5.cn/images/tip-network-uml.jpg"><img src="https://jason5.cn/images/tip-network-uml.jpg" alt="" /></a></p>

<ul>
<li>IGNetworkManager作为项目中使用网络层的入口类，不多做介绍。</li>
<li>PMDNetworking是发起网络请求的类，这里首先要用PMDCallFactory工厂类，生成一个实现PMDCall协议的对象，然后调用makeCallWithRequest方法进行网络请求。</li>
<li>PMDCallFactory用于生成PMDCall协议对象</li>
<li>PMDCall协议对象为了避免被回收，放到了PMDCallPool里进行管理</li>
<li>PMDBaseCall实现了PMDCall协议，完成了主要的网络请求逻辑。分为以下几个步骤</li>
</ul>


<p>1.callWithRequest准备发起网络请求</p>

<p>2.dealWithInterceptResult遍历所有PMDIntercept，在真正发起网络请求前进行逻辑处理，处理的过程中可以中断。</p>

<p>3.realCallWithRequest真正发起网络请求，这里的实现交给继承类IGCall来实现，具体的实现可以是http，也可以是tcp，在TIP项目中用到了IGNetworkObject去发网路请求。</p>

<p>4.convertResponse将请求回来的数据，遍历PMDConverter进行处理。</p>

<ul>
<li>PMDInterceptor和PMDConverter协议分别是需要在网络请求发出之前和之后要处理的逻辑，只要实现此协议，加入到PMDBaseCall中就可以了。</li>
</ul>


<p>基本的结构就是这样了，除此之外，框架还实现了取消发送，重新发送等逻辑，这里不再详细介绍。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[对iOS App签名的理解]]></title>
    <link href="http://jason5.cn/blog/dui-ios-appqian-ming-de-li-jie.html"/>
    <updated>2018-10-22T11:23:43+08:00</updated>
    <id>http://jason5.cn/blog/dui-ios-appqian-ming-de-li-jie</id>
    <content type="html"><![CDATA[<p>关于iOS设备签名的原理，这篇文章说的比较清楚了。如果忘了的话可以重新阅读以下。</p>

<!--more-->


<p><a href="http://blog.cnbang.net/tech/3386/">iOS App 签名的原理</a></p>

<p>这里按照我的理解角度复述一下：</p>

<ol>
<li>为了不让每次开发App，都将App上传到苹果后台，用苹果后台的私钥A签名，需要本地生成一对公私钥。这样每次签名就在本地Mac机器上，用私钥L签名就可以了。</li>
<li>那么苹果如果验证公钥L的合法性呢，就需要开发者将公钥L上传到苹果的后台，苹果用私钥A进行一次签名，签名+公钥L就是证书了。（这里实际上用一次对公钥L的签名替代了每次对App的签名，省去了App每次修改都上传签名的麻烦，很巧妙）</li>
<li>第2步中的证书+一些额外信息（AppId，设备列表，push权限等）全部都在苹果的后台用私钥A签名，打包成的东西叫Provisioning Profile，下载到本地Mac后，打包在App中。安装在iOS设备的时候，用公钥A对其进行解密，验证证书+一些额外信息（AppId，设备列表，push权限等。证书验证后拿到公钥L，对App数据进行解密验证（App是用私钥L签名的）。</li>
</ol>


<p>好了，上边的文字其实看着还是有点乱和绕，权当我自己的思路做参考吧。</p>

<p>回到我们的项目，其实有一点是可以改进的。</p>

<p><img src="https://jason5.cn/images/WX20181022-114418@2x.png" alt="" /></p>

<p>以上图片是我们项目在苹果后台的证书配置，可以看到，有很多项，原因是每个开发的电脑上都生成了一对公钥L和私钥L，然后将公钥L上传到苹果后台生成了证书。更好的办法是，只用一台开发电脑生成公钥L和私钥L，然后到处p12文件，分享给别的电脑，这样苹果后台就只需要一个证书就可以了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DNS配置中A和CNAME的区别]]></title>
    <link href="http://jason5.cn/blog/dnspei-zhi-zhong-ahe-cnamede-qu-bie.html"/>
    <updated>2018-10-20T19:57:40+08:00</updated>
    <id>http://jason5.cn/blog/dnspei-zhi-zhong-ahe-cnamede-qu-bie</id>
    <content type="html"><![CDATA[<p>DNS配置中有两种常见的类型，A和CNAME。</p>

<p>A是name到ip的配置，用于域名解析到最终的接入IP。</p>

<p>CNAME是name到name的配置，用于配置域名的别名。</p>

<p>参考<a href="https://support.dnsimple.com/articles/differences-a-cname-records/">Differences between the A and CNAME records</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github Pages支持https的方法]]></title>
    <link href="http://jason5.cn/blog/github-pageszhi-chi-httpsde-fang-fa.html"/>
    <updated>2018-10-20T19:38:41+08:00</updated>
    <id>http://jason5.cn/blog/github-pageszhi-chi-httpsde-fang-fa</id>
    <content type="html"><![CDATA[<p>到Github Pages项目里，点击Setting，勾选Enforce HTTPS</p>

<p><img src="https://jason5.cn/images/WX20181020-194050@2x.png" alt="" /></p>
]]></content>
  </entry>
  
</feed>
